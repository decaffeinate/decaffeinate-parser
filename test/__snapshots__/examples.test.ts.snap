// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CS1: addition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 + 4",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 + 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 + 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: array-with-multiple-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "[1, 2, 3]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 9,
        "line": 1,
        "members": Array [
          Int {
            "column": 2,
            "data": 1,
            "end": 2,
            "line": 1,
            "raw": "1",
            "start": 1,
            "type": "Int",
          },
          Int {
            "column": 5,
            "data": 2,
            "end": 5,
            "line": 1,
            "raw": "2",
            "start": 4,
            "type": "Int",
          },
          Int {
            "column": 8,
            "data": 3,
            "end": 8,
            "line": 1,
            "raw": "3",
            "start": 7,
            "type": "Int",
          },
        ],
        "raw": "[1, 2, 3]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "[1, 2, 3]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: array-with-single-member 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "[1]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 3,
        "line": 1,
        "members": Array [
          Int {
            "column": 2,
            "data": 1,
            "end": 2,
            "line": 1,
            "raw": "1",
            "start": 1,
            "type": "Int",
          },
        ],
        "raw": "[1]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "[1]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: assign 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a = 1",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 5,
        "expression": Int {
          "column": 5,
          "data": 1,
          "end": 5,
          "line": 1,
          "raw": "1",
          "start": 4,
          "type": "Int",
        },
        "line": 1,
        "raw": "a = 1",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a = 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: backticks-with-string-inside 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "\`import foo from 'foo'\`",
    "start": 0,
    "statements": Array [
      JavaScript {
        "column": 1,
        "data": "import foo from 'foo'",
        "end": 23,
        "line": 1,
        "raw": "\`import foo from 'foo'\`",
        "start": 0,
        "type": "JavaScript",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "\`import foo from 'foo'\`
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bare-yield 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "f = ->
  yield",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 14,
        "expression": GeneratorFunction {
          "body": Block {
            "column": 3,
            "end": 14,
            "inline": false,
            "line": 2,
            "raw": "yield",
            "start": 9,
            "statements": Array [
              Yield {
                "column": 3,
                "end": 14,
                "expression": null,
                "line": 2,
                "raw": "yield",
                "start": 9,
                "type": "Yield",
              },
            ],
            "type": "Block",
          },
          "column": 5,
          "end": 14,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  yield",
          "start": 4,
          "type": "GeneratorFunction",
        },
        "line": 1,
        "raw": "f = ->
  yield",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "f = ->
  yield
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitshift-left 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a << b",
    "start": 0,
    "statements": Array [
      LeftShiftOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a << b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LeftShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a << b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitshift-right 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a >> b",
    "start": 0,
    "statements": Array [
      SignedRightShiftOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >> b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "SignedRightShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a >> b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitshift-right-unsigned 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a >>> b",
    "start": 0,
    "statements": Array [
      UnsignedRightShiftOp {
        "column": 1,
        "end": 7,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >>> b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "UnsignedRightShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a >>> b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitwise-and 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a & b",
    "start": 0,
    "statements": Array [
      BitAndOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a & b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a & b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitwise-or 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a | b",
    "start": 0,
    "statements": Array [
      BitOrOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a | b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a | b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bitwise-xor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a ^ b",
    "start": 0,
    "statements": Array [
      BitXorOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ^ b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitXorOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a ^ b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "###
# hey there
###
a",
    "start": 0,
    "statements": Array [
      Identifier {
        "column": 1,
        "data": "a",
        "end": 21,
        "line": 4,
        "raw": "a",
        "start": 20,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "###
# hey there
###
a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: block-comment-in-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "->
  ###
  a
  ###",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 18,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  ###
  a
  ###",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "->
  ###
  a
  ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: block-comment-only-file 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "###
# hey there
###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bound-function-with-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "(a, b) =>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "raw": "(a, b) =>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a, b) =>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: bound-generator-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "=> yield 3",
    "start": 0,
    "statements": Array [
      BoundGeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 10,
          "inline": true,
          "line": 1,
          "raw": "yield 3",
          "start": 3,
          "statements": Array [
            Yield {
              "column": 4,
              "end": 10,
              "expression": Int {
                "column": 10,
                "data": 3,
                "end": 10,
                "line": 1,
                "raw": "3",
                "start": 9,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield 3",
              "start": 3,
              "type": "Yield",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [],
        "raw": "=> yield 3",
        "start": 0,
        "type": "BoundGeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "=> yield 3
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: break 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "loop
  break",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 12,
          "inline": false,
          "line": 2,
          "raw": "break",
          "start": 7,
          "statements": Array [
            Break {
              "column": 3,
              "end": 12,
              "line": 2,
              "raw": "break",
              "start": 7,
              "type": "Break",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "line": 1,
        "raw": "loop
  break",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "loop
  break
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: call-dynamic-member-access-result 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a[b]()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 6,
        "function": DynamicMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "indexingExpr": Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a[b]",
          "start": 0,
          "type": "DynamicMemberAccessOp",
        },
        "line": 1,
        "raw": "a[b]()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a[b]()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chain-calls-with-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 56,
    "inline": false,
    "line": 1,
    "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 15,
            "end": 47,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 16,
                "data": "MyCtrl",
                "end": 46,
                "line": 3,
                "raw": "MyCtrl",
                "start": 40,
                "type": "Quasi",
              },
            ],
            "raw": "'MyCtrl'",
            "start": 39,
            "type": "String",
          },
          Identifier {
            "column": 25,
            "data": "MyCtrl",
            "end": 55,
            "line": 3,
            "raw": "MyCtrl",
            "start": 49,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "end": 56,
        "function": MemberAccessOp {
          "column": 1,
          "end": 38,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 11,
                "end": 23,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 12,
                    "data": "app",
                    "end": 22,
                    "line": 2,
                    "raw": "app",
                    "start": 19,
                    "type": "Quasi",
                  },
                ],
                "raw": "'app'",
                "start": 18,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 24,
            "function": MemberAccessOp {
              "column": 1,
              "end": 17,
              "expression": Identifier {
                "column": 1,
                "data": "angular",
                "end": 7,
                "line": 1,
                "raw": "angular",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 4,
                "data": "module",
                "end": 17,
                "line": 2,
                "raw": "module",
                "start": 11,
                "type": "Identifier",
              },
              "raw": "angular
  .module",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "angular
  .module('app')",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 4,
            "data": "controller",
            "end": 38,
            "line": 3,
            "raw": "controller",
            "start": 28,
            "type": "Identifier",
          },
          "raw": "angular
  .module('app')
  .controller",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 56,
  "line": 1,
  "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chain-calls-without-indent 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 40,
    "inline": false,
    "line": 1,
    "raw": "$stateProvider
.state 'foo'
.state 'bar'",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 8,
            "end": 40,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 9,
                "data": "bar",
                "end": 39,
                "line": 3,
                "raw": "bar",
                "start": 36,
                "type": "Quasi",
              },
            ],
            "raw": "'bar'",
            "start": 35,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 40,
        "function": MemberAccessOp {
          "column": 1,
          "end": 34,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 8,
                "end": 27,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 9,
                    "data": "foo",
                    "end": 26,
                    "line": 2,
                    "raw": "foo",
                    "start": 23,
                    "type": "Quasi",
                  },
                ],
                "raw": "'foo'",
                "start": 22,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 27,
            "function": MemberAccessOp {
              "column": 1,
              "end": 21,
              "expression": Identifier {
                "column": 1,
                "data": "$stateProvider",
                "end": 14,
                "line": 1,
                "raw": "$stateProvider",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 2,
                "data": "state",
                "end": 21,
                "line": 2,
                "raw": "state",
                "start": 16,
                "type": "Identifier",
              },
              "raw": "$stateProvider
.state",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "$stateProvider
.state 'foo'",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 2,
            "data": "state",
            "end": 34,
            "line": 3,
            "raw": "state",
            "start": 29,
            "type": "Identifier",
          },
          "raw": "$stateProvider
.state 'foo'
.state",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "$stateProvider
.state 'foo'
.state 'bar'",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "$stateProvider
.state 'foo'
.state 'bar'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chain-calls-without-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 40,
    "inline": false,
    "line": 1,
    "raw": "$stateProvider
.state 'foo'
.state 'bar'",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 8,
            "end": 40,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 9,
                "data": "bar",
                "end": 39,
                "line": 3,
                "raw": "bar",
                "start": 36,
                "type": "Quasi",
              },
            ],
            "raw": "'bar'",
            "start": 35,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 40,
        "function": MemberAccessOp {
          "column": 1,
          "end": 34,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 8,
                "end": 27,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 9,
                    "data": "foo",
                    "end": 26,
                    "line": 2,
                    "raw": "foo",
                    "start": 23,
                    "type": "Quasi",
                  },
                ],
                "raw": "'foo'",
                "start": 22,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 27,
            "function": MemberAccessOp {
              "column": 1,
              "end": 21,
              "expression": Identifier {
                "column": 1,
                "data": "$stateProvider",
                "end": 14,
                "line": 1,
                "raw": "$stateProvider",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 2,
                "data": "state",
                "end": 21,
                "line": 2,
                "raw": "state",
                "start": 16,
                "type": "Identifier",
              },
              "raw": "$stateProvider
.state",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "$stateProvider
.state 'foo'",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 2,
            "data": "state",
            "end": 34,
            "line": 3,
            "raw": "state",
            "start": 29,
            "type": "Identifier",
          },
          "raw": "$stateProvider
.state 'foo'
.state",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "$stateProvider
.state 'foo'
.state 'bar'",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "$stateProvider
.state 'foo'
.state 'bar'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-equals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "a == b == c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 11,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a == b == c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a == b == c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-extended 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a < b < c < d < e",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 17,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
          Identifier {
            "column": 13,
            "data": "d",
            "end": 13,
            "line": 1,
            "raw": "d",
            "start": 12,
            "type": "Identifier",
          },
          Identifier {
            "column": 17,
            "data": "e",
            "end": 17,
            "line": 1,
            "raw": "e",
            "start": 16,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 11,
              "start": 10,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 15,
              "start": 14,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b < c < d < e",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "a < b < c < d < e",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-greater-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a > b > c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a > b > c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a > b > c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-less-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a < b < c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b < c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a < b < c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-mixed 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a < b > c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b > c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a < b > c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-nested 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "(a == b == c) == d == e",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 23,
        "line": 1,
        "operands": Array [
          ChainedComparisonOp {
            "column": 2,
            "end": 12,
            "line": 1,
            "operands": Array [
              Identifier {
                "column": 2,
                "data": "a",
                "end": 2,
                "line": 1,
                "raw": "a",
                "start": 1,
                "type": "Identifier",
              },
              Identifier {
                "column": 7,
                "data": "b",
                "end": 7,
                "line": 1,
                "raw": "b",
                "start": 6,
                "type": "Identifier",
              },
              Identifier {
                "column": 12,
                "data": "c",
                "end": 12,
                "line": 1,
                "raw": "c",
                "start": 11,
                "type": "Identifier",
              },
            ],
            "operators": Array [
              OperatorInfo {
                "operator": "==",
                "token": SourceToken {
                  "end": 5,
                  "start": 3,
                  "type": "OPERATOR",
                },
              },
              OperatorInfo {
                "operator": "==",
                "token": SourceToken {
                  "end": 10,
                  "start": 8,
                  "type": "OPERATOR",
                },
              },
            ],
            "raw": "a == b == c",
            "start": 1,
            "type": "ChainedComparisonOp",
          },
          Identifier {
            "column": 18,
            "data": "d",
            "end": 18,
            "line": 1,
            "raw": "d",
            "start": 17,
            "type": "Identifier",
          },
          Identifier {
            "column": 23,
            "data": "e",
            "end": 23,
            "line": 1,
            "raw": "e",
            "start": 22,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 16,
              "start": 14,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 21,
              "start": 19,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "(a == b == c) == d == e",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "(a == b == c) == d == e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-not-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "a != b != c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 11,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "!=",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "!=",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a != b != c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a != b != c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-three 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "a == b == c == d",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 16,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
          Identifier {
            "column": 16,
            "data": "d",
            "end": 16,
            "line": 1,
            "raw": "d",
            "start": 15,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 14,
              "start": 12,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a == b == c == d",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "a == b == c == d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-with-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "0<++c<2",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 7,
        "line": 1,
        "operands": Array [
          Int {
            "column": 1,
            "data": 0,
            "end": 1,
            "line": 1,
            "raw": "0",
            "start": 0,
            "type": "Int",
          },
          PreIncrementOp {
            "column": 3,
            "end": 5,
            "expression": Identifier {
              "column": 5,
              "data": "c",
              "end": 5,
              "line": 1,
              "raw": "c",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "++c",
            "start": 2,
            "type": "PreIncrementOp",
          },
          Int {
            "column": 7,
            "data": 2,
            "end": 7,
            "line": 1,
            "raw": "2",
            "start": 6,
            "type": "Int",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 2,
              "start": 1,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 6,
              "start": 5,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "0<++c<2",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "0<++c<2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-with-other-operators 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "Math.PI/2 < angle < 3*Math.PI/2",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 31,
        "line": 1,
        "operands": Array [
          DivideOp {
            "column": 1,
            "end": 9,
            "left": MemberAccessOp {
              "column": 1,
              "end": 7,
              "expression": Identifier {
                "column": 1,
                "data": "Math",
                "end": 4,
                "line": 1,
                "raw": "Math",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 6,
                "data": "PI",
                "end": 7,
                "line": 1,
                "raw": "PI",
                "start": 5,
                "type": "Identifier",
              },
              "raw": "Math.PI",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "Math.PI/2",
            "right": Int {
              "column": 9,
              "data": 2,
              "end": 9,
              "line": 1,
              "raw": "2",
              "start": 8,
              "type": "Int",
            },
            "start": 0,
            "type": "DivideOp",
          },
          Identifier {
            "column": 13,
            "data": "angle",
            "end": 17,
            "line": 1,
            "raw": "angle",
            "start": 12,
            "type": "Identifier",
          },
          DivideOp {
            "column": 21,
            "end": 31,
            "left": MultiplyOp {
              "column": 21,
              "end": 29,
              "left": Int {
                "column": 21,
                "data": 3,
                "end": 21,
                "line": 1,
                "raw": "3",
                "start": 20,
                "type": "Int",
              },
              "line": 1,
              "raw": "3*Math.PI",
              "right": MemberAccessOp {
                "column": 23,
                "end": 29,
                "expression": Identifier {
                  "column": 23,
                  "data": "Math",
                  "end": 26,
                  "line": 1,
                  "raw": "Math",
                  "start": 22,
                  "type": "Identifier",
                },
                "line": 1,
                "member": Identifier {
                  "column": 28,
                  "data": "PI",
                  "end": 29,
                  "line": 1,
                  "raw": "PI",
                  "start": 27,
                  "type": "Identifier",
                },
                "raw": "Math.PI",
                "start": 22,
                "type": "MemberAccessOp",
              },
              "start": 20,
              "type": "MultiplyOp",
            },
            "line": 1,
            "raw": "3*Math.PI/2",
            "right": Int {
              "column": 31,
              "data": 2,
              "end": 31,
              "line": 1,
              "raw": "2",
              "start": 30,
              "type": "Int",
            },
            "start": 20,
            "type": "DivideOp",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 11,
              "start": 10,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 19,
              "start": 18,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "Math.PI/2 < angle < 3*Math.PI/2",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 32,
  "line": 1,
  "raw": "Math.PI/2 < angle < 3*Math.PI/2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-comparison-with-unary-negate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "-1 < 0 < 1",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 10,
        "line": 1,
        "operands": Array [
          UnaryNegateOp {
            "column": 1,
            "end": 2,
            "expression": Int {
              "column": 2,
              "data": 1,
              "end": 2,
              "line": 1,
              "raw": "1",
              "start": 1,
              "type": "Int",
            },
            "line": 1,
            "raw": "-1",
            "start": 0,
            "type": "UnaryNegateOp",
          },
          Int {
            "column": 6,
            "data": 0,
            "end": 6,
            "line": 1,
            "raw": "0",
            "start": 5,
            "type": "Int",
          },
          Int {
            "column": 10,
            "data": 1,
            "end": 10,
            "line": 1,
            "raw": "1",
            "start": 9,
            "type": "Int",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 4,
              "start": 3,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 8,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "-1 < 0 < 1",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "-1 < 0 < 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: chained-prototype-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 37,
    "inline": false,
    "line": 1,
    "raw": "Object::toString.constructor::valueOf",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 37,
        "expression": ProtoMemberAccessOp {
          "column": 1,
          "end": 30,
          "expression": MemberAccessOp {
            "column": 1,
            "end": 28,
            "expression": MemberAccessOp {
              "column": 1,
              "end": 16,
              "expression": ProtoMemberAccessOp {
                "column": 1,
                "end": 8,
                "expression": Identifier {
                  "column": 1,
                  "data": "Object",
                  "end": 6,
                  "line": 1,
                  "raw": "Object",
                  "start": 0,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "Object::",
                "start": 0,
                "type": "ProtoMemberAccessOp",
              },
              "line": 1,
              "member": Identifier {
                "column": 9,
                "data": "toString",
                "end": 16,
                "line": 1,
                "raw": "toString",
                "start": 8,
                "type": "Identifier",
              },
              "raw": "Object::toString",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "member": Identifier {
              "column": 18,
              "data": "constructor",
              "end": 28,
              "line": 1,
              "raw": "constructor",
              "start": 17,
              "type": "Identifier",
            },
            "raw": "Object::toString.constructor",
            "start": 0,
            "type": "MemberAccessOp",
          },
          "line": 1,
          "raw": "Object::toString.constructor::",
          "start": 0,
          "type": "ProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 31,
          "data": "valueOf",
          "end": 37,
          "line": 1,
          "raw": "valueOf",
          "start": 30,
          "type": "Identifier",
        },
        "raw": "Object::toString.constructor::valueOf",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 38,
  "line": 1,
  "raw": "Object::toString.constructor::valueOf
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-extends 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "A extends B",
    "start": 0,
    "statements": Array [
      ExtendsOp {
        "column": 1,
        "end": 11,
        "left": Identifier {
          "column": 1,
          "data": "A",
          "end": 1,
          "line": 1,
          "raw": "A",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "A extends B",
        "right": Identifier {
          "column": 11,
          "data": "B",
          "end": 11,
          "line": 1,
          "raw": "B",
          "start": 10,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ExtendsOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "A extends B",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-member-with-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 39,
    "inline": false,
    "line": 1,
    "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 39,
          "inline": false,
          "line": 2,
          "raw": "###
  # foo
  ###
  foo: ->",
          "start": 12,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "foo",
                "end": 35,
                "line": 5,
                "raw": "foo",
                "start": 32,
                "type": "Identifier",
              },
              "column": 3,
              "end": 39,
              "expression": Function {
                "body": null,
                "column": 8,
                "end": 39,
                "line": 5,
                "parameters": Array [],
                "raw": "->",
                "start": 37,
                "type": "Function",
              },
              "line": 5,
              "raw": "foo: ->",
              "start": 32,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 39,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-super-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 76,
    "inline": false,
    "line": 1,
    "raw": "class Foo extends Bar
  constructor: ->
    super

  foo: ->
    super(1, 2)",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 76,
          "inline": false,
          "line": 2,
          "raw": "constructor: ->
    super

  foo: ->
    super(1, 2)",
          "start": 24,
          "statements": Array [
            Constructor {
              "assignee": Identifier {
                "column": 3,
                "data": "constructor",
                "end": 35,
                "line": 2,
                "raw": "constructor",
                "start": 24,
                "type": "Identifier",
              },
              "column": 3,
              "end": 49,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 49,
                  "inline": false,
                  "line": 3,
                  "raw": "super",
                  "start": 44,
                  "statements": Array [
                    BareSuperFunctionApplication {
                      "column": 5,
                      "end": 49,
                      "line": 3,
                      "raw": "super",
                      "start": 44,
                      "type": "BareSuperFunctionApplication",
                    },
                  ],
                  "type": "Block",
                },
                "column": 16,
                "end": 49,
                "line": 2,
                "parameters": Array [],
                "raw": "->
    super",
                "start": 37,
                "type": "Function",
              },
              "line": 2,
              "raw": "constructor: ->
    super",
              "start": 24,
              "type": "Constructor",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "foo",
                "end": 56,
                "line": 5,
                "raw": "foo",
                "start": 53,
                "type": "Identifier",
              },
              "column": 3,
              "end": 76,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 76,
                  "inline": false,
                  "line": 6,
                  "raw": "super(1, 2)",
                  "start": 65,
                  "statements": Array [
                    FunctionApplication {
                      "arguments": Array [
                        Int {
                          "column": 11,
                          "data": 1,
                          "end": 72,
                          "line": 6,
                          "raw": "1",
                          "start": 71,
                          "type": "Int",
                        },
                        Int {
                          "column": 14,
                          "data": 2,
                          "end": 75,
                          "line": 6,
                          "raw": "2",
                          "start": 74,
                          "type": "Int",
                        },
                      ],
                      "column": 5,
                      "end": 76,
                      "function": Super {
                        "column": 5,
                        "end": 70,
                        "line": 6,
                        "raw": "super",
                        "start": 65,
                        "type": "Super",
                      },
                      "line": 6,
                      "raw": "super(1, 2)",
                      "start": 65,
                      "type": "FunctionApplication",
                    },
                  ],
                  "type": "Block",
                },
                "column": 8,
                "end": 76,
                "line": 5,
                "parameters": Array [],
                "raw": "->
    super(1, 2)",
                "start": 58,
                "type": "Function",
              },
              "line": 5,
              "raw": "foo: ->
    super(1, 2)",
              "start": 53,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": Constructor {
          "assignee": Identifier {
            "column": 3,
            "data": "constructor",
            "end": 35,
            "line": 2,
            "raw": "constructor",
            "start": 24,
            "type": "Identifier",
          },
          "column": 3,
          "end": 49,
          "expression": Function {
            "body": Block {
              "column": 5,
              "end": 49,
              "inline": false,
              "line": 3,
              "raw": "super",
              "start": 44,
              "statements": Array [
                BareSuperFunctionApplication {
                  "column": 5,
                  "end": 49,
                  "line": 3,
                  "raw": "super",
                  "start": 44,
                  "type": "BareSuperFunctionApplication",
                },
              ],
              "type": "Block",
            },
            "column": 16,
            "end": 49,
            "line": 2,
            "parameters": Array [],
            "raw": "->
    super",
            "start": 37,
            "type": "Function",
          },
          "line": 2,
          "raw": "constructor: ->
    super",
          "start": 24,
          "type": "Constructor",
        },
        "end": 76,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "parent": Identifier {
          "column": 19,
          "data": "Bar",
          "end": 21,
          "line": 1,
          "raw": "Bar",
          "start": 18,
          "type": "Identifier",
        },
        "raw": "class Foo extends Bar
  constructor: ->
    super

  foo: ->
    super(1, 2)",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 76,
  "line": 1,
  "raw": "class Foo extends Bar
  constructor: ->
    super

  foo: ->
    super(1, 2)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-body-statements 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "class A
  a = 1
  b: a",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 22,
          "inline": false,
          "line": 2,
          "raw": "a = 1
  b: a",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 15,
              "expression": Int {
                "column": 7,
                "data": 1,
                "end": 15,
                "line": 2,
                "raw": "1",
                "start": 14,
                "type": "Int",
              },
              "line": 2,
              "raw": "a = 1",
              "start": 10,
              "type": "AssignOp",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 19,
                "line": 3,
                "raw": "b",
                "start": 18,
                "type": "Identifier",
              },
              "column": 3,
              "end": 22,
              "expression": Identifier {
                "column": 6,
                "data": "a",
                "end": 22,
                "line": 3,
                "raw": "a",
                "start": 21,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "b: a",
              "start": 18,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 22,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a = 1
  b: a",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "class A
  a = 1
  b: a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-bound-methods 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A
  a: => b",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "a: => b",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 17,
              "expression": BoundFunction {
                "body": Block {
                  "column": 9,
                  "end": 17,
                  "inline": true,
                  "line": 2,
                  "raw": "b",
                  "start": 16,
                  "statements": Array [
                    Identifier {
                      "column": 9,
                      "data": "b",
                      "end": 17,
                      "line": 2,
                      "raw": "b",
                      "start": 16,
                      "type": "Identifier",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 17,
                "line": 2,
                "parameters": Array [],
                "raw": "=> b",
                "start": 13,
                "type": "BoundFunction",
              },
              "line": 2,
              "raw": "a: => b",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [
          ClassProtoAssignOp {
            "assignee": Identifier {
              "column": 3,
              "data": "a",
              "end": 11,
              "line": 2,
              "raw": "a",
              "start": 10,
              "type": "Identifier",
            },
            "column": 3,
            "end": 17,
            "expression": BoundFunction {
              "body": Block {
                "column": 9,
                "end": 17,
                "inline": true,
                "line": 2,
                "raw": "b",
                "start": 16,
                "statements": Array [
                  Identifier {
                    "column": 9,
                    "data": "b",
                    "end": 17,
                    "line": 2,
                    "raw": "b",
                    "start": 16,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "end": 17,
              "line": 2,
              "parameters": Array [],
              "raw": "=> b",
              "start": 13,
              "type": "BoundFunction",
            },
            "line": 2,
            "raw": "a: => b",
            "start": 10,
            "type": "ClassProtoAssignOp",
          },
        ],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a: => b",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  a: => b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-conditional-bound-method 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: => d",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 26,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: => d",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 26,
                "inline": false,
                "line": 3,
                "raw": "c: => d",
                "start": 19,
                "statements": Array [
                  ClassProtoAssignOp {
                    "assignee": Identifier {
                      "column": 5,
                      "data": "c",
                      "end": 20,
                      "line": 3,
                      "raw": "c",
                      "start": 19,
                      "type": "Identifier",
                    },
                    "column": 5,
                    "end": 26,
                    "expression": BoundFunction {
                      "body": Block {
                        "column": 11,
                        "end": 26,
                        "inline": true,
                        "line": 3,
                        "raw": "d",
                        "start": 25,
                        "statements": Array [
                          Identifier {
                            "column": 11,
                            "data": "d",
                            "end": 26,
                            "line": 3,
                            "raw": "d",
                            "start": 25,
                            "type": "Identifier",
                          },
                        ],
                        "type": "Block",
                      },
                      "column": 8,
                      "end": 26,
                      "line": 3,
                      "parameters": Array [],
                      "raw": "=> d",
                      "start": 22,
                      "type": "BoundFunction",
                    },
                    "line": 3,
                    "raw": "c: => d",
                    "start": 19,
                    "type": "ClassProtoAssignOp",
                  },
                ],
                "type": "Block",
              },
              "end": 26,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: => d",
              "start": 10,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [
          ClassProtoAssignOp {
            "assignee": Identifier {
              "column": 5,
              "data": "c",
              "end": 20,
              "line": 3,
              "raw": "c",
              "start": 19,
              "type": "Identifier",
            },
            "column": 5,
            "end": 26,
            "expression": BoundFunction {
              "body": Block {
                "column": 11,
                "end": 26,
                "inline": true,
                "line": 3,
                "raw": "d",
                "start": 25,
                "statements": Array [
                  Identifier {
                    "column": 11,
                    "data": "d",
                    "end": 26,
                    "line": 3,
                    "raw": "d",
                    "start": 25,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 8,
              "end": 26,
              "line": 3,
              "parameters": Array [],
              "raw": "=> d",
              "start": 22,
              "type": "BoundFunction",
            },
            "line": 3,
            "raw": "c: => d",
            "start": 19,
            "type": "ClassProtoAssignOp",
          },
        ],
        "column": 1,
        "ctor": null,
        "end": 26,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: => d",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "class A
  if b
    c: => d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-conditional-method 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: -> d",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 26,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: -> d",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 26,
                "inline": false,
                "line": 3,
                "raw": "c: -> d",
                "start": 19,
                "statements": Array [
                  ClassProtoAssignOp {
                    "assignee": Identifier {
                      "column": 5,
                      "data": "c",
                      "end": 20,
                      "line": 3,
                      "raw": "c",
                      "start": 19,
                      "type": "Identifier",
                    },
                    "column": 5,
                    "end": 26,
                    "expression": Function {
                      "body": Block {
                        "column": 11,
                        "end": 26,
                        "inline": true,
                        "line": 3,
                        "raw": "d",
                        "start": 25,
                        "statements": Array [
                          Identifier {
                            "column": 11,
                            "data": "d",
                            "end": 26,
                            "line": 3,
                            "raw": "d",
                            "start": 25,
                            "type": "Identifier",
                          },
                        ],
                        "type": "Block",
                      },
                      "column": 8,
                      "end": 26,
                      "line": 3,
                      "parameters": Array [],
                      "raw": "-> d",
                      "start": 22,
                      "type": "Function",
                    },
                    "line": 3,
                    "raw": "c: -> d",
                    "start": 19,
                    "type": "ClassProtoAssignOp",
                  },
                ],
                "type": "Block",
              },
              "end": 26,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: -> d",
              "start": 10,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 26,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: -> d",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "class A
  if b
    c: -> d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-constructor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "class Point
  constructor: (@x, @y) ->",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 38,
          "inline": false,
          "line": 2,
          "raw": "constructor: (@x, @y) ->",
          "start": 14,
          "statements": Array [
            Constructor {
              "assignee": Identifier {
                "column": 3,
                "data": "constructor",
                "end": 25,
                "line": 2,
                "raw": "constructor",
                "start": 14,
                "type": "Identifier",
              },
              "column": 3,
              "end": 38,
              "expression": Function {
                "body": null,
                "column": 16,
                "end": 38,
                "line": 2,
                "parameters": Array [
                  MemberAccessOp {
                    "column": 17,
                    "end": 30,
                    "expression": This {
                      "column": 17,
                      "end": 29,
                      "line": 2,
                      "raw": "@",
                      "start": 28,
                      "type": "This",
                    },
                    "line": 2,
                    "member": Identifier {
                      "column": 18,
                      "data": "x",
                      "end": 30,
                      "line": 2,
                      "raw": "x",
                      "start": 29,
                      "type": "Identifier",
                    },
                    "raw": "@x",
                    "start": 28,
                    "type": "MemberAccessOp",
                  },
                  MemberAccessOp {
                    "column": 21,
                    "end": 34,
                    "expression": This {
                      "column": 21,
                      "end": 33,
                      "line": 2,
                      "raw": "@",
                      "start": 32,
                      "type": "This",
                    },
                    "line": 2,
                    "member": Identifier {
                      "column": 22,
                      "data": "y",
                      "end": 34,
                      "line": 2,
                      "raw": "y",
                      "start": 33,
                      "type": "Identifier",
                    },
                    "raw": "@y",
                    "start": 32,
                    "type": "MemberAccessOp",
                  },
                ],
                "raw": "(@x, @y) ->",
                "start": 27,
                "type": "Function",
              },
              "line": 2,
              "raw": "constructor: (@x, @y) ->",
              "start": 14,
              "type": "Constructor",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": Constructor {
          "assignee": Identifier {
            "column": 3,
            "data": "constructor",
            "end": 25,
            "line": 2,
            "raw": "constructor",
            "start": 14,
            "type": "Identifier",
          },
          "column": 3,
          "end": 38,
          "expression": Function {
            "body": null,
            "column": 16,
            "end": 38,
            "line": 2,
            "parameters": Array [
              MemberAccessOp {
                "column": 17,
                "end": 30,
                "expression": This {
                  "column": 17,
                  "end": 29,
                  "line": 2,
                  "raw": "@",
                  "start": 28,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 18,
                  "data": "x",
                  "end": 30,
                  "line": 2,
                  "raw": "x",
                  "start": 29,
                  "type": "Identifier",
                },
                "raw": "@x",
                "start": 28,
                "type": "MemberAccessOp",
              },
              MemberAccessOp {
                "column": 21,
                "end": 34,
                "expression": This {
                  "column": 21,
                  "end": 33,
                  "line": 2,
                  "raw": "@",
                  "start": 32,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 22,
                  "data": "y",
                  "end": 34,
                  "line": 2,
                  "raw": "y",
                  "start": 33,
                  "type": "Identifier",
                },
                "raw": "@y",
                "start": 32,
                "type": "MemberAccessOp",
              },
            ],
            "raw": "(@x, @y) ->",
            "start": 27,
            "type": "Function",
          },
          "line": 2,
          "raw": "constructor: (@x, @y) ->",
          "start": 14,
          "type": "Constructor",
        },
        "end": 38,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "Point",
          "end": 11,
          "line": 1,
          "raw": "Point",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "Point",
          "end": 11,
          "line": 1,
          "raw": "Point",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class Point
  constructor: (@x, @y) ->",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class Point
  constructor: (@x, @y) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-explicit-object-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "class A
  {b: c}",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "{b: c}",
          "start": 10,
          "statements": Array [
            ObjectInitialiser {
              "column": 3,
              "end": 16,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 4,
                  "end": 15,
                  "expression": Identifier {
                    "column": 7,
                    "data": "c",
                    "end": 15,
                    "line": 2,
                    "raw": "c",
                    "start": 14,
                    "type": "Identifier",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 4,
                    "data": "b",
                    "end": 12,
                    "line": 2,
                    "raw": "b",
                    "start": 11,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: c",
                  "start": 11,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "{b: c}",
              "start": 10,
              "type": "ObjectInitialiser",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 16,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  {b: c}",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  {b: c}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-implicit-object-literal-within-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "class A
  b = ->
    c: d
    return 1",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 38,
          "inline": false,
          "line": 2,
          "raw": "b = ->
    c: d
    return 1",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 38,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 38,
                  "inline": false,
                  "line": 3,
                  "raw": "c: d
    return 1",
                  "start": 21,
                  "statements": Array [
                    ObjectInitialiser {
                      "column": 5,
                      "end": 25,
                      "line": 3,
                      "members": Array [
                        ObjectInitialiserMember {
                          "column": 5,
                          "end": 25,
                          "expression": Identifier {
                            "column": 8,
                            "data": "d",
                            "end": 25,
                            "line": 3,
                            "raw": "d",
                            "start": 24,
                            "type": "Identifier",
                          },
                          "isComputed": false,
                          "key": Identifier {
                            "column": 5,
                            "data": "c",
                            "end": 22,
                            "line": 3,
                            "raw": "c",
                            "start": 21,
                            "type": "Identifier",
                          },
                          "line": 3,
                          "raw": "c: d",
                          "start": 21,
                          "type": "ObjectInitialiserMember",
                        },
                      ],
                      "raw": "c: d",
                      "start": 21,
                      "type": "ObjectInitialiser",
                    },
                    Return {
                      "column": 5,
                      "end": 38,
                      "expression": Int {
                        "column": 12,
                        "data": 1,
                        "end": 38,
                        "line": 4,
                        "raw": "1",
                        "start": 37,
                        "type": "Int",
                      },
                      "line": 4,
                      "raw": "return 1",
                      "start": 30,
                      "type": "Return",
                    },
                  ],
                  "type": "Block",
                },
                "column": 7,
                "end": 38,
                "line": 2,
                "parameters": Array [],
                "raw": "->
    c: d
    return 1",
                "start": 14,
                "type": "Function",
              },
              "line": 2,
              "raw": "b = ->
    c: d
    return 1",
              "start": 10,
              "type": "AssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 38,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b = ->
    c: d
    return 1",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class A
  b = ->
    c: d
    return 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "class A
  a: 1
  b: -> 2",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 24,
          "inline": false,
          "line": 2,
          "raw": "a: 1
  b: -> 2",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 14,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 14,
                "line": 2,
                "raw": "1",
                "start": 13,
                "type": "Int",
              },
              "line": 2,
              "raw": "a: 1",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 18,
                "line": 3,
                "raw": "b",
                "start": 17,
                "type": "Identifier",
              },
              "column": 3,
              "end": 24,
              "expression": Function {
                "body": Block {
                  "column": 9,
                  "end": 24,
                  "inline": true,
                  "line": 3,
                  "raw": "2",
                  "start": 23,
                  "statements": Array [
                    Int {
                      "column": 9,
                      "data": 2,
                      "end": 24,
                      "line": 3,
                      "raw": "2",
                      "start": 23,
                      "type": "Int",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 24,
                "line": 3,
                "parameters": Array [],
                "raw": "-> 2",
                "start": 20,
                "type": "Function",
              },
              "line": 3,
              "raw": "b: -> 2",
              "start": 17,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 24,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a: 1
  b: -> 2",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "class A
  a: 1
  b: -> 2",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-non-identifier-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A?.B
  a: 1",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "a: 1",
          "start": 13,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 14,
                "line": 2,
                "raw": "a",
                "start": 13,
                "type": "Identifier",
              },
              "column": 3,
              "end": 17,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 17,
                "line": 2,
                "raw": "1",
                "start": 16,
                "type": "Int",
              },
              "line": 2,
              "raw": "a: 1",
              "start": 13,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": SoakedMemberAccessOp {
          "column": 7,
          "end": 10,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 10,
            "data": "B",
            "end": 10,
            "line": 1,
            "raw": "B",
            "start": 9,
            "type": "Identifier",
          },
          "raw": "A?.B",
          "start": 6,
          "type": "SoakedMemberAccessOp",
        },
        "nameAssignee": SoakedMemberAccessOp {
          "column": 7,
          "end": 10,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 10,
            "data": "B",
            "end": 10,
            "line": 1,
            "raw": "B",
            "start": 9,
            "type": "Identifier",
          },
          "raw": "A?.B",
          "start": 6,
          "type": "SoakedMemberAccessOp",
        },
        "parent": null,
        "raw": "class A?.B
  a: 1",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "class A?.B
  a: 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-outer-assign-blocking-conditional-assign 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 30,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: d
  e: f",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 30,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: d
  e: f",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 23,
                "inline": false,
                "line": 3,
                "raw": "c: d",
                "start": 19,
                "statements": Array [
                  ObjectInitialiser {
                    "column": 5,
                    "end": 23,
                    "line": 3,
                    "members": Array [
                      ObjectInitialiserMember {
                        "column": 5,
                        "end": 23,
                        "expression": Identifier {
                          "column": 8,
                          "data": "d",
                          "end": 23,
                          "line": 3,
                          "raw": "d",
                          "start": 22,
                          "type": "Identifier",
                        },
                        "isComputed": false,
                        "key": Identifier {
                          "column": 5,
                          "data": "c",
                          "end": 20,
                          "line": 3,
                          "raw": "c",
                          "start": 19,
                          "type": "Identifier",
                        },
                        "line": 3,
                        "raw": "c: d",
                        "start": 19,
                        "type": "ObjectInitialiserMember",
                      },
                    ],
                    "raw": "c: d",
                    "start": 19,
                    "type": "ObjectInitialiser",
                  },
                ],
                "type": "Block",
              },
              "end": 23,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: d",
              "start": 10,
              "type": "Conditional",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "e",
                "end": 27,
                "line": 4,
                "raw": "e",
                "start": 26,
                "type": "Identifier",
              },
              "column": 3,
              "end": 30,
              "expression": Identifier {
                "column": 6,
                "data": "f",
                "end": 30,
                "line": 4,
                "raw": "f",
                "start": 29,
                "type": "Identifier",
              },
              "line": 4,
              "raw": "e: f",
              "start": 26,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 30,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: d
  e: f",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "class A
  if b
    c: d
  e: f
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-parenthesized-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "class A
  b: (c)",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "b: (c)",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 16,
              "expression": Identifier {
                "column": 7,
                "data": "c",
                "end": 15,
                "line": 2,
                "raw": "c",
                "start": 14,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "b: (c)",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 16,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b: (c)",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  b: (c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-proto-access-name 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "class A::",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 9,
        "line": 1,
        "name": ProtoMemberAccessOp {
          "column": 7,
          "end": 9,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "A::",
          "start": 6,
          "type": "ProtoMemberAccessOp",
        },
        "nameAssignee": ProtoMemberAccessOp {
          "column": 7,
          "end": 9,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "A::",
          "start": 6,
          "type": "ProtoMemberAccessOp",
        },
        "parent": null,
        "raw": "class A::",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "class A::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: class-with-static-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "class A
  @b: c",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 15,
          "inline": false,
          "line": 2,
          "raw": "@b: c",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": MemberAccessOp {
                "column": 3,
                "end": 12,
                "expression": This {
                  "column": 3,
                  "end": 11,
                  "line": 2,
                  "raw": "@",
                  "start": 10,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 4,
                  "data": "b",
                  "end": 12,
                  "line": 2,
                  "raw": "b",
                  "start": 11,
                  "type": "Identifier",
                },
                "raw": "@b",
                "start": 10,
                "type": "MemberAccessOp",
              },
              "column": 3,
              "end": 15,
              "expression": Identifier {
                "column": 7,
                "data": "c",
                "end": 15,
                "line": 2,
                "raw": "c",
                "start": 14,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "@b: c",
              "start": 10,
              "type": "AssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 15,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  @b: c",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "class A
  @b: c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: comment-in-parenthesized-block 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "() -> (
  ###yo###
  a
)",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 7,
          "end": 24,
          "inline": true,
          "line": 1,
          "raw": "(
  ###yo###
  a
)",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 22,
              "line": 3,
              "raw": "a",
              "start": 21,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 24,
        "line": 1,
        "parameters": Array [],
        "raw": "() -> (
  ###yo###
  a
)",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "() -> (
  ###yo###
  a
)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: comment-only-file 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "# Testing
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: complex-template-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "\\"#{}A#{} #{} #{}B#{}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 21,
        "expressions": Array [
          null,
          null,
          null,
          null,
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "A",
            "end": 5,
            "line": 1,
            "raw": "A",
            "start": 4,
            "type": "Quasi",
          },
          Quasi {
            "column": 9,
            "data": " ",
            "end": 9,
            "line": 1,
            "raw": " ",
            "start": 8,
            "type": "Quasi",
          },
          Quasi {
            "column": 13,
            "data": " ",
            "end": 13,
            "line": 1,
            "raw": " ",
            "start": 12,
            "type": "Quasi",
          },
          Quasi {
            "column": 17,
            "data": "B",
            "end": 17,
            "line": 1,
            "raw": "B",
            "start": 16,
            "type": "Quasi",
          },
          Quasi {
            "column": 21,
            "data": "",
            "end": 20,
            "line": 1,
            "raw": "",
            "start": 20,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{}A#{} #{} #{}B#{}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "\\"#{}A#{} #{} #{}B#{}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: compound-assignment-addition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a += 1",
    "start": 0,
    "statements": Array [
      CompoundAssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Int {
          "column": 6,
          "data": 1,
          "end": 6,
          "line": 1,
          "raw": "1",
          "start": 5,
          "type": "Int",
        },
        "line": 1,
        "op": "PlusOp",
        "raw": "a += 1",
        "start": 0,
        "type": "CompoundAssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a += 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: compound-assignment-subtraction 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a -= b",
    "start": 0,
    "statements": Array [
      CompoundAssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "line": 1,
        "op": "SubtractOp",
        "raw": "a -= b",
        "start": 0,
        "type": "CompoundAssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a -= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-empty-consequent-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 27,
    "inline": false,
    "line": 1,
    "raw": "if false
else if false
else",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 6,
          "end": 27,
          "inline": true,
          "line": 2,
          "raw": "if false
else",
          "start": 14,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 6,
              "condition": Bool {
                "column": 9,
                "data": false,
                "end": 22,
                "line": 2,
                "raw": "false",
                "start": 17,
                "type": "Bool",
              },
              "consequent": null,
              "end": 27,
              "isUnless": false,
              "line": 2,
              "raw": "if false
else",
              "start": 14,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Bool {
          "column": 4,
          "data": false,
          "end": 8,
          "line": 1,
          "raw": "false",
          "start": 3,
          "type": "Bool",
        },
        "consequent": null,
        "end": 27,
        "isUnless": false,
        "line": 1,
        "raw": "if false
else if false
else",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "if false
else if false
else",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-ending-in-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "x = if a
  ;",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 12,
        "expression": Conditional {
          "alternate": null,
          "column": 5,
          "condition": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "consequent": null,
          "end": 12,
          "isUnless": false,
          "line": 1,
          "raw": "if a
  ;",
          "start": 4,
          "type": "Conditional",
        },
        "line": 1,
        "raw": "x = if a
  ;",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "x = if a
  ;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "if a then b else c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 18,
          "end": 18,
          "inline": true,
          "line": 1,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 18,
              "data": "c",
              "end": 18,
              "line": 1,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 11,
          "end": 11,
          "inline": true,
          "line": 1,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 11,
              "data": "b",
              "end": 11,
              "line": 1,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 18,
        "isUnless": false,
        "line": 1,
        "raw": "if a then b else c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "if a then b else c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-unless-equal-condition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "unless a == b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": EQOp {
          "column": 8,
          "end": 13,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a == b",
          "right": Identifier {
            "column": 13,
            "data": "b",
            "end": 13,
            "line": 1,
            "raw": "b",
            "start": 12,
            "type": "Identifier",
          },
          "start": 7,
          "type": "EQOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": true,
        "line": 1,
        "raw": "unless a == b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "unless a == b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-unless-exists-op 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "unless a?
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": UnaryExistsOp {
          "column": 8,
          "end": 9,
          "expression": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?",
          "start": 7,
          "type": "UnaryExistsOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 13,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 12,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 13,
              "line": 2,
              "raw": "b",
              "start": 12,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 13,
        "isUnless": true,
        "line": 1,
        "raw": "unless a?
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "unless a?
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-unless-virtual-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "unless a + b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": PlusOp {
          "column": 8,
          "end": 12,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a + b",
          "right": Identifier {
            "column": 12,
            "data": "b",
            "end": 12,
            "line": 1,
            "raw": "b",
            "start": 11,
            "type": "Identifier",
          },
          "start": 7,
          "type": "PlusOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 15,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 16,
              "line": 2,
              "raw": "c",
              "start": 15,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 16,
        "isUnless": true,
        "line": 1,
        "raw": "unless a + b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "unless a + b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-using-unless 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "unless a
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 12,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 11,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 12,
              "line": 2,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 12,
        "isUnless": true,
        "line": 1,
        "raw": "unless a
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "unless a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-with-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "if a
  b
else
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 4,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b
else
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "if a
  b
else
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-with-braces-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "a if (b and c)",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": LogicalAndOp {
          "column": 7,
          "end": 13,
          "left": Identifier {
            "column": 7,
            "data": "b",
            "end": 7,
            "line": 1,
            "raw": "b",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "b and c",
          "right": Identifier {
            "column": 13,
            "data": "c",
            "end": 13,
            "line": 1,
            "raw": "c",
            "start": 12,
            "type": "Identifier",
          },
          "start": 6,
          "type": "LogicalAndOp",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 14,
        "isUnless": false,
        "line": 1,
        "raw": "a if (b and c)",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "a if (b and c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-with-post-if 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a if b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 6,
        "isUnless": false,
        "line": 1,
        "raw": "a if b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a if b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-with-post-unless 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "a unless b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 10,
        "isUnless": true,
        "line": 1,
        "raw": "a unless b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "a unless b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: conditional-without-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "if a
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 8,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "if a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: continue 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "loop
  continue",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 15,
          "inline": false,
          "line": 2,
          "raw": "continue",
          "start": 7,
          "statements": Array [
            Continue {
              "column": 3,
              "end": 15,
              "line": 2,
              "raw": "continue",
              "start": 7,
              "type": "Continue",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "raw": "loop
  continue",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "loop
  continue
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: dangling-prototype-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "Object::",
    "start": 0,
    "statements": Array [
      ProtoMemberAccessOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 1,
          "data": "Object",
          "end": 6,
          "line": 1,
          "raw": "Object",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "Object::",
        "start": 0,
        "type": "ProtoMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "Object::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: dangling-prototype-access-of-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a()::",
    "start": 0,
    "statements": Array [
      ProtoMemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": FunctionApplication {
          "arguments": Array [],
          "column": 1,
          "end": 3,
          "function": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a()",
          "start": 0,
          "type": "FunctionApplication",
        },
        "line": 1,
        "raw": "a()::",
        "start": 0,
        "type": "ProtoMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a()::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: delete 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "delete a",
    "start": 0,
    "statements": Array [
      DeleteOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "delete a",
        "start": 0,
        "type": "DeleteOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "delete a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: destructure-this-assignment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "({@a}) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          ObjectInitialiser {
            "column": 2,
            "end": 5,
            "line": 1,
            "members": Array [
              ObjectInitialiserMember {
                "column": 3,
                "end": 4,
                "expression": null,
                "isComputed": false,
                "key": MemberAccessOp {
                  "column": 3,
                  "end": 4,
                  "expression": This {
                    "column": 3,
                    "end": 3,
                    "line": 1,
                    "raw": "@",
                    "start": 2,
                    "type": "This",
                  },
                  "line": 1,
                  "member": Identifier {
                    "column": 4,
                    "data": "a",
                    "end": 4,
                    "line": 1,
                    "raw": "a",
                    "start": 3,
                    "type": "Identifier",
                  },
                  "raw": "@a",
                  "start": 2,
                  "type": "MemberAccessOp",
                },
                "line": 1,
                "raw": "@a",
                "start": 2,
                "type": "ObjectInitialiserMember",
              },
            ],
            "raw": "{@a}",
            "start": 1,
            "type": "ObjectInitialiser",
          },
        ],
        "raw": "({@a}) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "({@a}) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: division 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 / 4",
    "start": 0,
    "statements": Array [
      DivideOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 / 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "DivideOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 / 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "do ->
  a",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 9,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 9,
            "inline": false,
            "line": 2,
            "raw": "a",
            "start": 8,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "a",
                "end": 9,
                "line": 2,
                "raw": "a",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 9,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  a",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do ->
  a",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "do ->
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a(do =>
  b)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          DoOp {
            "column": 3,
            "end": 11,
            "expression": BoundFunction {
              "body": Block {
                "column": 3,
                "end": 11,
                "inline": false,
                "line": 2,
                "raw": "b",
                "start": 10,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 11,
                    "line": 2,
                    "raw": "b",
                    "start": 10,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "end": 11,
              "line": 1,
              "parameters": Array [],
              "raw": "=>
  b",
              "start": 5,
              "type": "BoundFunction",
            },
            "line": 1,
            "raw": "do =>
  b",
            "start": 2,
            "type": "DoOp",
          },
        ],
        "column": 1,
        "end": 12,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(do =>
  b)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a(do =>
  b)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-assign-and-defaults 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "do a = (b = c, d) ->
  e",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 24,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          "column": 4,
          "end": 24,
          "expression": Function {
            "body": Block {
              "column": 3,
              "end": 24,
              "inline": false,
              "line": 2,
              "raw": "e",
              "start": 23,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "e",
                  "end": 24,
                  "line": 2,
                  "raw": "e",
                  "start": 23,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 8,
            "end": 24,
            "line": 1,
            "parameters": Array [
              DefaultParam {
                "column": 9,
                "default": Identifier {
                  "column": 13,
                  "data": "c",
                  "end": 13,
                  "line": 1,
                  "raw": "c",
                  "start": 12,
                  "type": "Identifier",
                },
                "end": 13,
                "line": 1,
                "param": Identifier {
                  "column": 9,
                  "data": "b",
                  "end": 9,
                  "line": 1,
                  "raw": "b",
                  "start": 8,
                  "type": "Identifier",
                },
                "raw": "b = c",
                "start": 8,
                "type": "DefaultParam",
              },
              Identifier {
                "column": 16,
                "data": "d",
                "end": 16,
                "line": 1,
                "raw": "d",
                "start": 15,
                "type": "Identifier",
              },
            ],
            "raw": "(b = c, d) ->
  e",
            "start": 7,
            "type": "Function",
          },
          "line": 1,
          "raw": "a = (b = c, d) ->
  e",
          "start": 3,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "do a = (b = c, d) ->
  e",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do a = (b = c, d) ->
  e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-assign-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "do wait = ->
  wait()",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 21,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 4,
            "data": "wait",
            "end": 7,
            "line": 1,
            "raw": "wait",
            "start": 3,
            "type": "Identifier",
          },
          "column": 4,
          "end": 21,
          "expression": Function {
            "body": Block {
              "column": 3,
              "end": 21,
              "inline": false,
              "line": 2,
              "raw": "wait()",
              "start": 15,
              "statements": Array [
                FunctionApplication {
                  "arguments": Array [],
                  "column": 3,
                  "end": 21,
                  "function": Identifier {
                    "column": 3,
                    "data": "wait",
                    "end": 19,
                    "line": 2,
                    "raw": "wait",
                    "start": 15,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "wait()",
                  "start": 15,
                  "type": "FunctionApplication",
                },
              ],
              "type": "Block",
            },
            "column": 11,
            "end": 21,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  wait()",
            "start": 10,
            "type": "Function",
          },
          "line": 1,
          "raw": "wait = ->
  wait()",
          "start": 3,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "do wait = ->
  wait()",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "do wait = ->
  wait()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-bound-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "do =>
  a",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 9,
        "expression": BoundFunction {
          "body": Block {
            "column": 3,
            "end": 9,
            "inline": false,
            "line": 2,
            "raw": "a",
            "start": 8,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "a",
                "end": 9,
                "line": 2,
                "raw": "a",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 9,
          "line": 1,
          "parameters": Array [],
          "raw": "=>
  a",
          "start": 3,
          "type": "BoundFunction",
        },
        "line": 1,
        "raw": "do =>
  a",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "do =>
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-default-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 25,
    "inline": false,
    "line": 1,
    "raw": "do (a=1, b=@b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 25,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 25,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 20,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 25,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 21,
                  "line": 2,
                  "raw": "a",
                  "start": 20,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 25,
                  "line": 2,
                  "raw": "b",
                  "start": 24,
                  "type": "Identifier",
                },
                "start": 20,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 25,
          "line": 1,
          "parameters": Array [
            DefaultParam {
              "column": 5,
              "default": Int {
                "column": 7,
                "data": 1,
                "end": 7,
                "line": 1,
                "raw": "1",
                "start": 6,
                "type": "Int",
              },
              "end": 7,
              "line": 1,
              "param": Identifier {
                "column": 5,
                "data": "a",
                "end": 5,
                "line": 1,
                "raw": "a",
                "start": 4,
                "type": "Identifier",
              },
              "raw": "a=1",
              "start": 4,
              "type": "DefaultParam",
            },
            DefaultParam {
              "column": 10,
              "default": MemberAccessOp {
                "column": 12,
                "end": 13,
                "expression": This {
                  "column": 12,
                  "end": 12,
                  "line": 1,
                  "raw": "@",
                  "start": 11,
                  "type": "This",
                },
                "line": 1,
                "member": Identifier {
                  "column": 13,
                  "data": "b",
                  "end": 13,
                  "line": 1,
                  "raw": "b",
                  "start": 12,
                  "type": "Identifier",
                },
                "raw": "@b",
                "start": 11,
                "type": "MemberAccessOp",
              },
              "end": 13,
              "line": 1,
              "param": Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
              "raw": "b=@b",
              "start": 9,
              "type": "DefaultParam",
            },
          ],
          "raw": "(a=1, b=@b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a=1, b=@b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do (a=1, b=@b) ->
  a + b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-defaults-with-same-name 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "do (a=a, b=b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 24,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 24,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 19,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 24,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 20,
                  "line": 2,
                  "raw": "a",
                  "start": 19,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 24,
                  "line": 2,
                  "raw": "b",
                  "start": 23,
                  "type": "Identifier",
                },
                "start": 19,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 24,
          "line": 1,
          "parameters": Array [
            DefaultParam {
              "column": 5,
              "default": Identifier {
                "column": 7,
                "data": "a",
                "end": 7,
                "line": 1,
                "raw": "a",
                "start": 6,
                "type": "Identifier",
              },
              "end": 7,
              "line": 1,
              "param": Identifier {
                "column": 5,
                "data": "a",
                "end": 5,
                "line": 1,
                "raw": "a",
                "start": 4,
                "type": "Identifier",
              },
              "raw": "a=a",
              "start": 4,
              "type": "DefaultParam",
            },
            DefaultParam {
              "column": 10,
              "default": Identifier {
                "column": 12,
                "data": "b",
                "end": 12,
                "line": 1,
                "raw": "b",
                "start": 11,
                "type": "Identifier",
              },
              "end": 12,
              "line": 1,
              "param": Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
              "raw": "b=b",
              "start": 9,
              "type": "DefaultParam",
            },
          ],
          "raw": "(a=a, b=b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a=a, b=b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do (a=a, b=b) ->
  a + b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: do-with-simple-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "do (a, b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 20,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 20,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 15,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 20,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 16,
                  "line": 2,
                  "raw": "a",
                  "start": 15,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 20,
                  "line": 2,
                  "raw": "b",
                  "start": 19,
                  "type": "Identifier",
                },
                "start": 15,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 20,
          "line": 1,
          "parameters": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
            Identifier {
              "column": 8,
              "data": "b",
              "end": 8,
              "line": 1,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "raw": "(a, b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a, b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "do (a, b) ->
  a + b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: double-negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "!!a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 3,
        "expression": LogicalNotOp {
          "column": 2,
          "end": 3,
          "expression": Identifier {
            "column": 3,
            "data": "a",
            "end": 3,
            "line": 1,
            "raw": "a",
            "start": 2,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "!a",
          "start": 1,
          "type": "LogicalNotOp",
        },
        "line": 1,
        "raw": "!!a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "!!a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: dynamic-member-expressions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a[b]",
    "start": 0,
    "statements": Array [
      DynamicMemberAccessOp {
        "column": 1,
        "end": 4,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "indexingExpr": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a[b]",
        "start": 0,
        "type": "DynamicMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a[b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-anonymous-class 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "class",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 5,
        "line": 1,
        "name": null,
        "nameAssignee": null,
        "parent": null,
        "raw": "class",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "class",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-array 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "[]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 2,
        "line": 1,
        "members": Array [],
        "raw": "[]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "[]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-bound-function-without-body 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "=>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 2,
        "line": 1,
        "parameters": Array [],
        "raw": "=>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "=>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-class 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "class A",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 7,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "class A",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-class-with-superclass 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A extends B",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": Identifier {
          "column": 17,
          "data": "B",
          "end": 17,
          "line": 1,
          "raw": "B",
          "start": 16,
          "type": "Identifier",
        },
        "raw": "class A extends B",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A extends B",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-function-without-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 2,
        "line": 1,
        "parameters": Array [],
        "raw": "->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-heregex-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "///a#{}b///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 11,
        "expressions": Array [
          null,
        ],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Quasi",
          },
        ],
        "raw": "///a#{}b///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "///a#{}b///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "loop",
    "start": 0,
    "statements": Array [
      Loop {
        "body": null,
        "column": 1,
        "end": 4,
        "line": 1,
        "raw": "loop",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "loop then
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-object 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "{}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 2,
        "line": 1,
        "members": Array [],
        "raw": "{}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "{}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-program 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 0,
  "line": 1,
  "raw": "",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: empty-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{}b\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{}b\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "\\"a#{}b\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: equality 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a == b",
    "start": 0,
    "statements": Array [
      EQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a == b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "EQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a == b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: equality-longhand 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a is b",
    "start": 0,
    "statements": Array [
      EQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a is b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "EQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a is b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: existential-binary 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a ? b",
    "start": 0,
    "statements": Array [
      ExistsOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ? b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ExistsOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a ? b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: existential-unary 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "a?",
    "start": 0,
    "statements": Array [
      UnaryExistsOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?",
        "start": 0,
        "type": "UnaryExistsOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "a?",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: expansion 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "[a, ..., b] = c",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": ArrayInitialiser {
          "column": 1,
          "end": 11,
          "line": 1,
          "members": Array [
            Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            Expansion {
              "column": 5,
              "end": 7,
              "line": 1,
              "raw": "...",
              "start": 4,
              "type": "Expansion",
            },
            Identifier {
              "column": 10,
              "data": "b",
              "end": 10,
              "line": 1,
              "raw": "b",
              "start": 9,
              "type": "Identifier",
            },
          ],
          "raw": "[a, ..., b]",
          "start": 0,
          "type": "ArrayInitialiser",
        },
        "column": 1,
        "end": 15,
        "expression": Identifier {
          "column": 15,
          "data": "c",
          "end": 15,
          "line": 1,
          "raw": "c",
          "start": 14,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a, ..., b] = c",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "[a, ..., b] = c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: export-assignment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "export a = 1",
    "start": 0,
    "statements": Array [
      ExportNamedDeclaration {
        "column": 1,
        "end": 12,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "column": 1,
          "end": 12,
          "expression": Int {
            "column": 12,
            "data": 1,
            "end": 12,
            "line": 1,
            "raw": "1",
            "start": 11,
            "type": "Int",
          },
          "line": 1,
          "raw": "export a = 1",
          "start": 0,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "export a = 1",
        "start": 0,
        "type": "ExportNamedDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "export a = 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: export-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "export default a",
    "start": 0,
    "statements": Array [
      ExportDefaultDeclaration {
        "column": 1,
        "end": 16,
        "expression": Identifier {
          "column": 16,
          "data": "a",
          "end": 16,
          "line": 1,
          "raw": "a",
          "start": 15,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "export default a",
        "start": 0,
        "type": "ExportDefaultDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "export default a
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: export-multiple-bindings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 43,
    "inline": false,
    "line": 1,
    "raw": "export {a, b as c} from 'd'
export {e as f}",
    "start": 0,
    "statements": Array [
      ExportBindingsDeclaration {
        "column": 1,
        "end": 27,
        "line": 1,
        "namedExports": Array [
          ModuleSpecifier {
            "alias": null,
            "column": 9,
            "end": 9,
            "line": 1,
            "original": Identifier {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Identifier",
            },
            "raw": "a",
            "start": 8,
            "type": "ModuleSpecifier",
          },
          ModuleSpecifier {
            "alias": Identifier {
              "column": 17,
              "data": "c",
              "end": 17,
              "line": 1,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
            "column": 12,
            "end": 17,
            "line": 1,
            "original": Identifier {
              "column": 12,
              "data": "b",
              "end": 12,
              "line": 1,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
            "raw": "b as c",
            "start": 11,
            "type": "ModuleSpecifier",
          },
        ],
        "raw": "export {a, b as c} from 'd'",
        "source": String {
          "column": 25,
          "end": 27,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 26,
              "data": "d",
              "end": 26,
              "line": 1,
              "raw": "d",
              "start": 25,
              "type": "Quasi",
            },
          ],
          "raw": "'d'",
          "start": 24,
          "type": "String",
        },
        "start": 0,
        "type": "ExportBindingsDeclaration",
      },
      ExportBindingsDeclaration {
        "column": 1,
        "end": 43,
        "line": 2,
        "namedExports": Array [
          ModuleSpecifier {
            "alias": Identifier {
              "column": 14,
              "data": "f",
              "end": 42,
              "line": 2,
              "raw": "f",
              "start": 41,
              "type": "Identifier",
            },
            "column": 9,
            "end": 42,
            "line": 2,
            "original": Identifier {
              "column": 9,
              "data": "e",
              "end": 37,
              "line": 2,
              "raw": "e",
              "start": 36,
              "type": "Identifier",
            },
            "raw": "e as f",
            "start": 36,
            "type": "ModuleSpecifier",
          },
        ],
        "raw": "export {e as f}",
        "source": null,
        "start": 28,
        "type": "ExportBindingsDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 44,
  "line": 1,
  "raw": "export {a, b as c} from 'd'
export {e as f}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: export-star 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "export * from 'a'",
    "start": 0,
    "statements": Array [
      ExportAllDeclaration {
        "column": 1,
        "end": 17,
        "line": 1,
        "raw": "export * from 'a'",
        "source": String {
          "column": 15,
          "end": 17,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 16,
              "data": "a",
              "end": 16,
              "line": 1,
              "raw": "a",
              "start": 15,
              "type": "Quasi",
            },
          ],
          "raw": "'a'",
          "start": 14,
          "type": "String",
        },
        "start": 0,
        "type": "ExportAllDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "export * from 'a'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: external-constructor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "f = ->
class A
  constructor: f",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Function {
          "body": null,
          "column": 5,
          "end": 6,
          "line": 1,
          "parameters": Array [],
          "raw": "->",
          "start": 4,
          "type": "Function",
        },
        "line": 1,
        "raw": "f = ->",
        "start": 0,
        "type": "AssignOp",
      },
      Class {
        "body": Block {
          "column": 3,
          "end": 31,
          "inline": false,
          "line": 3,
          "raw": "constructor: f",
          "start": 17,
          "statements": Array [
            Constructor {
              "assignee": Identifier {
                "column": 3,
                "data": "constructor",
                "end": 28,
                "line": 3,
                "raw": "constructor",
                "start": 17,
                "type": "Identifier",
              },
              "column": 3,
              "end": 31,
              "expression": Identifier {
                "column": 16,
                "data": "f",
                "end": 31,
                "line": 3,
                "raw": "f",
                "start": 30,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "constructor: f",
              "start": 17,
              "type": "Constructor",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": Constructor {
          "assignee": Identifier {
            "column": 3,
            "data": "constructor",
            "end": 28,
            "line": 3,
            "raw": "constructor",
            "start": 17,
            "type": "Identifier",
          },
          "column": 3,
          "end": 31,
          "expression": Identifier {
            "column": 16,
            "data": "f",
            "end": 31,
            "line": 3,
            "raw": "f",
            "start": 30,
            "type": "Identifier",
          },
          "line": 3,
          "raw": "constructor: f",
          "start": 17,
          "type": "Constructor",
        },
        "end": 31,
        "line": 2,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 14,
          "line": 2,
          "raw": "A",
          "start": 13,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 14,
          "line": 2,
          "raw": "A",
          "start": 13,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  constructor: f",
        "start": 7,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 32,
  "line": 1,
  "raw": "f = ->
class A
  constructor: f
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: false 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "false",
    "start": 0,
    "statements": Array [
      Bool {
        "column": 1,
        "data": false,
        "end": 5,
        "line": 1,
        "raw": "false",
        "start": 0,
        "type": "Bool",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "false",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: float 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "1.2",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 1.2,
        "end": 3,
        "line": 1,
        "raw": "1.2",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "1.2",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: float-int-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "1.0",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 1,
        "end": 3,
        "line": 1,
        "raw": "1.0",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "1.0",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: float-leading-period 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": ".25",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 0.25,
        "end": 3,
        "line": 1,
        "raw": ".25",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": ".25
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: floor-division 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "7 // 3",
    "start": 0,
    "statements": Array [
      FloorDivideOp {
        "column": 1,
        "end": 6,
        "left": Int {
          "column": 1,
          "data": 7,
          "end": 1,
          "line": 1,
          "raw": "7",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "7 // 3",
        "right": Int {
          "column": 6,
          "data": 3,
          "end": 6,
          "line": 1,
          "raw": "3",
          "start": 5,
          "type": "Int",
        },
        "start": 0,
        "type": "FloorDivideOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "7 // 3",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-comprehension 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a for b in c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "a for b in c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 12,
          "data": "c",
          "end": 12,
          "line": 1,
          "raw": "c",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a for b in c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-from 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "for a from b
  c",
    "start": 0,
    "statements": Array [
      ForFrom {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 15,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 16,
              "line": 2,
              "raw": "c",
              "start": 15,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 16,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a from b
  c",
        "start": 0,
        "target": Identifier {
          "column": 12,
          "data": "b",
          "end": 12,
          "line": 1,
          "raw": "b",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForFrom",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for a from b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for a in b
  c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 13,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 14,
              "line": 2,
              "raw": "c",
              "start": 13,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b
  c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "for a in b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-in-by 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "for a in b by c
  d",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 19,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 18,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 19,
              "line": 2,
              "raw": "d",
              "start": 18,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 19,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b by c
  d",
        "start": 0,
        "step": Identifier {
          "column": 15,
          "data": "c",
          "end": 15,
          "line": 1,
          "raw": "c",
          "start": 14,
          "type": "Identifier",
        },
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "for a in b by c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-in-when 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "for a in b when c
  d",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 21,
              "line": 2,
              "raw": "d",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "filter": Identifier {
          "column": 17,
          "data": "c",
          "end": 17,
          "line": 1,
          "raw": "c",
          "start": 16,
          "type": "Identifier",
        },
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b when c
  d",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "for a in b when c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-in-with-key-and-value-assignees 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "for a, i in b
  c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "filter": null,
        "keyAssignee": Identifier {
          "column": 8,
          "data": "i",
          "end": 8,
          "line": 1,
          "raw": "i",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a, i in b
  c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 13,
          "data": "b",
          "end": 13,
          "line": 1,
          "raw": "b",
          "start": 12,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for a, i in b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for a of b
  c",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 13,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 14,
              "line": 2,
              "raw": "c",
              "start": 13,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a of b
  c",
        "start": 0,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "for a of b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-of-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a(for b of c
  b)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          ForOf {
            "body": Block {
              "column": 3,
              "end": 16,
              "inline": false,
              "line": 2,
              "raw": "b",
              "start": 15,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 16,
                  "line": 2,
                  "raw": "b",
                  "start": 15,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 16,
            "filter": null,
            "isOwn": false,
            "keyAssignee": Identifier {
              "column": 7,
              "data": "b",
              "end": 7,
              "line": 1,
              "raw": "b",
              "start": 6,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "for b of c
  b",
            "start": 2,
            "target": Identifier {
              "column": 12,
              "data": "c",
              "end": 12,
              "line": 1,
              "raw": "c",
              "start": 11,
              "type": "Identifier",
            },
            "type": "ForOf",
            "valAssignee": null,
          },
        ],
        "column": 1,
        "end": 17,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(for b of c
  b)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a(for b of c
  b)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-of-when 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "for a of b when c
  d",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 21,
              "line": 2,
              "raw": "d",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "filter": Identifier {
          "column": 17,
          "data": "c",
          "end": 17,
          "line": 1,
          "raw": "c",
          "start": 16,
          "type": "Identifier",
        },
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a of b when c
  d",
        "start": 0,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "for a of b when c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-of-with-key-and-value-assignees 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "for k, v of a
  b",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 2,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "filter": null,
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "k",
          "end": 5,
          "line": 1,
          "raw": "k",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for k, v of a
  b",
        "start": 0,
        "target": Identifier {
          "column": 13,
          "data": "a",
          "end": 13,
          "line": 1,
          "raw": "a",
          "start": 12,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": Identifier {
          "column": 8,
          "data": "v",
          "end": 8,
          "line": 1,
          "raw": "v",
          "start": 7,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for k, v of a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-own-of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "for own a of b
  c",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 18,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 18,
              "line": 2,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 18,
        "filter": null,
        "isOwn": true,
        "keyAssignee": Identifier {
          "column": 9,
          "data": "a",
          "end": 9,
          "line": 1,
          "raw": "a",
          "start": 8,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for own a of b
  c",
        "start": 0,
        "target": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "for own a of b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: for-repeater 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for [0..1]
  2",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "2",
          "start": 13,
          "statements": Array [
            Int {
              "column": 3,
              "data": 2,
              "end": 14,
              "line": 2,
              "raw": "2",
              "start": 13,
              "type": "Int",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for [0..1]
  2",
        "start": 0,
        "step": null,
        "target": Range {
          "column": 5,
          "end": 10,
          "isInclusive": true,
          "left": Int {
            "column": 6,
            "data": 0,
            "end": 6,
            "line": 1,
            "raw": "0",
            "start": 5,
            "type": "Int",
          },
          "line": 1,
          "raw": "[0..1]",
          "right": Int {
            "column": 9,
            "data": 1,
            "end": 9,
            "line": 1,
            "raw": "1",
            "start": 8,
            "type": "Int",
          },
          "start": 4,
          "type": "Range",
        },
        "type": "ForIn",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "for [0..1]
  2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-ending-in-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "a ->
  b
  ### c ###",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": Block {
              "column": 3,
              "end": 20,
              "inline": false,
              "line": 2,
              "raw": "b
  ### c ###",
              "start": 7,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 8,
                  "line": 2,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 20,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  b
  ### c ###",
            "start": 2,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 20,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ->
  b
  ### c ###",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "a ->
  b
  ### c ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-ending-in-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "->
  ;",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  ;",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "->
  ;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-followed-by-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a ->
  b
### c ###",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": Block {
              "column": 3,
              "end": 8,
              "inline": false,
              "line": 2,
              "raw": "b",
              "start": 7,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 8,
                  "line": 2,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 8,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  b",
            "start": 2,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 8,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ->
  b",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a ->
  b
### c ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-trailing-spaces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "main = ->
  foo
  bar

baz",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "main",
          "end": 4,
          "line": 1,
          "raw": "main",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 21,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 21,
            "inline": false,
            "line": 2,
            "raw": "foo
  bar",
            "start": 12,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "foo",
                "end": 15,
                "line": 2,
                "raw": "foo",
                "start": 12,
                "type": "Identifier",
              },
              Identifier {
                "column": 3,
                "data": "bar",
                "end": 21,
                "line": 3,
                "raw": "bar",
                "start": 18,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 8,
          "end": 21,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  foo
  bar",
          "start": 7,
          "type": "Function",
        },
        "line": 1,
        "raw": "main = ->
  foo
  bar",
        "start": 0,
        "type": "AssignOp",
      },
      Identifier {
        "column": 1,
        "data": "baz",
        "end": 26,
        "line": 5,
        "raw": "baz",
        "start": 23,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "main = ->
  foo
  bar

baz",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-with-body 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "->
  a",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 6,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 5,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 6,
              "line": 2,
              "raw": "a",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  a",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "->
  a
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-with-default-parameter 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "(a=1) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 8,
        "line": 1,
        "parameters": Array [
          DefaultParam {
            "column": 2,
            "default": Int {
              "column": 4,
              "data": 1,
              "end": 4,
              "line": 1,
              "raw": "1",
              "start": 3,
              "type": "Int",
            },
            "end": 4,
            "line": 1,
            "param": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "raw": "a=1",
            "start": 1,
            "type": "DefaultParam",
          },
        ],
        "raw": "(a=1) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a=1) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-with-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "(a, b) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "raw": "(a, b) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a, b) ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: function-with-statement-after-block-and-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "->
  a

# hey
## foo ###
b",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 6,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 5,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 6,
              "line": 2,
              "raw": "a",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  a",
        "start": 0,
        "type": "Function",
      },
      Identifier {
        "column": 1,
        "data": "b",
        "end": 26,
        "line": 6,
        "raw": "b",
        "start": 25,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "->
  a

# hey
## foo ###
b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: greater-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a > b",
    "start": 0,
    "statements": Array [
      GTOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a > b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "GTOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a > b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: greater-than-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a >= b",
    "start": 0,
    "statements": Array [
      GTEOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >= b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "GTEOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a >= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "///a/b/c///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 11,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/a\\\\/b\\\\/c/",
            "end": 8,
            "line": 1,
            "raw": "a/b/c",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "///a/b/c///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "///a/b/c///",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-in-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "///foo///.test('a')",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 16,
            "end": 18,
            "expressions": Array [],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 17,
                "data": "a",
                "end": 17,
                "line": 1,
                "raw": "a",
                "start": 16,
                "type": "Quasi",
              },
            ],
            "raw": "'a'",
            "start": 15,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 19,
        "function": MemberAccessOp {
          "column": 1,
          "end": 14,
          "expression": Heregex {
            "column": 1,
            "end": 9,
            "expressions": Array [],
            "flags": RegexFlags {
              "g": false,
              "global": false,
              "i": false,
              "ignoreCase": false,
              "m": false,
              "multiline": false,
              "sticky": false,
              "u": false,
              "unicode": false,
              "y": false,
            },
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 4,
                "data": "/foo/",
                "end": 6,
                "line": 1,
                "raw": "foo",
                "start": 3,
                "type": "Quasi",
              },
            ],
            "raw": "///foo///",
            "start": 0,
            "type": "Heregex",
          },
          "line": 1,
          "member": Identifier {
            "column": 11,
            "data": "test",
            "end": 14,
            "line": 1,
            "raw": "test",
            "start": 10,
            "type": "Identifier",
          },
          "raw": "///foo///.test",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "///foo///.test('a')",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "///foo///.test('a')
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-with-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "///a/b/c///gimuy",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 16,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": true,
          "multiline": true,
          "sticky": true,
          "u": true,
          "unicode": true,
          "y": true,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/a\\\\/b\\\\/c/gimuy",
            "end": 8,
            "line": 1,
            "raw": "a/b/c",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "///a/b/c///gimuy",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "///a/b/c///gimuy
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-with-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "///
  foo
  #{bar}  # baz
///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 29,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "bar",
            "end": 17,
            "line": 3,
            "raw": "bar",
            "start": 14,
            "type": "Identifier",
          },
        ],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "foo",
            "end": 12,
            "line": 1,
            "raw": "
  foo
  ",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 9,
            "data": "",
            "end": 26,
            "line": 3,
            "raw": "  # baz
",
            "start": 18,
            "type": "Quasi",
          },
        ],
        "raw": "///
  foo
  #{bar}  # baz
///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "///
  foo
  #{bar}  # baz
///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-with-interpolations-and-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 30,
    "inline": false,
    "line": 1,
    "raw": "///
  abc # def #{ghi} j
///gi",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 30,
        "expressions": Array [
          Identifier {
            "column": 15,
            "data": "ghi",
            "end": 21,
            "line": 2,
            "raw": "ghi",
            "start": 18,
            "type": "Identifier",
          },
        ],
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "abc",
            "end": 16,
            "line": 1,
            "raw": "
  abc # def ",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 19,
            "data": "j",
            "end": 25,
            "line": 2,
            "raw": " j
",
            "start": 22,
            "type": "Quasi",
          },
        ],
        "raw": "///
  abc # def #{ghi} j
///gi",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "///
  abc # def #{ghi} j
///gi
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-with-spaces-and-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 305,
    "inline": false,
    "line": 1,
    "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "OPERATOR",
          "end": 8,
          "line": 1,
          "raw": "OPERATOR",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 305,
        "expression": Heregex {
          "column": 12,
          "end": 305,
          "expressions": Array [],
          "flags": RegexFlags {
            "g": false,
            "global": false,
            "i": false,
            "ignoreCase": false,
            "m": false,
            "multiline": false,
            "sticky": false,
            "u": false,
            "unicode": false,
            "y": false,
          },
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 15,
              "data": "/^(?:[-=]>|[-+*\\\\/%<>&|^!?=]=|>>>=?|([-+:])\\\\1|([&|<>])\\\\2=?|\\\\?\\\\.|\\\\.{2,3})/",
              "end": 302,
              "line": 1,
              "raw": " ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ",
              "start": 14,
              "type": "Quasi",
            },
          ],
          "raw": "/// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
          "start": 11,
          "type": "Heregex",
        },
        "line": 1,
        "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 306,
  "line": 1,
  "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: heregex-with-strange-whitespace 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "/// ///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 7,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/(?:)/",
            "end": 4,
            "line": 1,
            "raw": " ",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "/// ///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 46,
  "line": 1,
  "raw": "/// ///  # This has a \\\\u2028 character in it.
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: hexidecimal-number 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "0x1B000",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 110592,
        "end": 7,
        "line": 1,
        "raw": "0x1B000",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "0x1B000",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: iife-in-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "a((=>
  0)())",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          FunctionApplication {
            "arguments": Array [],
            "column": 3,
            "end": 12,
            "function": BoundFunction {
              "body": Block {
                "column": 3,
                "end": 9,
                "inline": false,
                "line": 2,
                "raw": "0",
                "start": 8,
                "statements": Array [
                  Int {
                    "column": 3,
                    "data": 0,
                    "end": 9,
                    "line": 2,
                    "raw": "0",
                    "start": 8,
                    "type": "Int",
                  },
                ],
                "type": "Block",
              },
              "column": 4,
              "end": 9,
              "line": 1,
              "parameters": Array [],
              "raw": "=>
  0",
              "start": 3,
              "type": "BoundFunction",
            },
            "line": 1,
            "raw": "(=>
  0)()",
            "start": 2,
            "type": "FunctionApplication",
          },
        ],
        "column": 1,
        "end": 13,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a((=>
  0)())",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a((=>
  0)())",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: implicit-object-with-trailing-comma 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "a =
  b: c,
  d: e,",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 19,
        "expression": ObjectInitialiser {
          "column": 3,
          "end": 19,
          "line": 2,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 10,
              "expression": Identifier {
                "column": 6,
                "data": "c",
                "end": 10,
                "line": 2,
                "raw": "c",
                "start": 9,
                "type": "Identifier",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "b",
                "end": 7,
                "line": 2,
                "raw": "b",
                "start": 6,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "b: c",
              "start": 6,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 3,
              "end": 18,
              "expression": Identifier {
                "column": 6,
                "data": "e",
                "end": 18,
                "line": 3,
                "raw": "e",
                "start": 17,
                "type": "Identifier",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "d",
                "end": 15,
                "line": 3,
                "raw": "d",
                "start": 14,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "d: e",
              "start": 14,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "b: c,
  d: e,",
          "start": 6,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "a =
  b: c,
  d: e,",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "a =
  b: c,
  d: e,
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: import-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "import a from 'b'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "end": 17,
        "line": 1,
        "namedImports": null,
        "namespaceImport": null,
        "raw": "import a from 'b'",
        "source": String {
          "column": 15,
          "end": 17,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 16,
              "data": "b",
              "end": 16,
              "line": 1,
              "raw": "b",
              "start": 15,
              "type": "Quasi",
            },
          ],
          "raw": "'b'",
          "start": 14,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "import a from 'b'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: import-named-with-alias 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 27,
    "inline": false,
    "line": 1,
    "raw": "import {a, b as c} from 'd'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 27,
        "line": 1,
        "namedImports": Array [
          ModuleSpecifier {
            "alias": null,
            "column": 9,
            "end": 9,
            "line": 1,
            "original": Identifier {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Identifier",
            },
            "raw": "a",
            "start": 8,
            "type": "ModuleSpecifier",
          },
          ModuleSpecifier {
            "alias": Identifier {
              "column": 17,
              "data": "c",
              "end": 17,
              "line": 1,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
            "column": 12,
            "end": 17,
            "line": 1,
            "original": Identifier {
              "column": 12,
              "data": "b",
              "end": 12,
              "line": 1,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
            "raw": "b as c",
            "start": 11,
            "type": "ModuleSpecifier",
          },
        ],
        "namespaceImport": null,
        "raw": "import {a, b as c} from 'd'",
        "source": String {
          "column": 25,
          "end": 27,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 26,
              "data": "d",
              "end": 26,
              "line": 1,
              "raw": "d",
              "start": 25,
              "type": "Quasi",
            },
          ],
          "raw": "'d'",
          "start": 24,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 28,
  "line": 1,
  "raw": "import {a, b as c} from 'd'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: import-star 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "import * as a from 'b'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 22,
        "line": 1,
        "namedImports": null,
        "namespaceImport": Identifier {
          "column": 13,
          "data": "a",
          "end": 13,
          "line": 1,
          "raw": "a",
          "start": 12,
          "type": "Identifier",
        },
        "raw": "import * as a from 'b'",
        "source": String {
          "column": 20,
          "end": 22,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 21,
              "data": "b",
              "end": 21,
              "line": 1,
              "raw": "b",
              "start": 20,
              "type": "Quasi",
            },
          ],
          "raw": "'b'",
          "start": 19,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 23,
  "line": 1,
  "raw": "import * as a from 'b'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: import-without-specifiers 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "import 'a';",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 10,
        "line": 1,
        "namedImports": null,
        "namespaceImport": null,
        "raw": "import 'a'",
        "source": String {
          "column": 8,
          "end": 10,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Quasi",
            },
          ],
          "raw": "'a'",
          "start": 7,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "import 'a';
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a in b",
    "start": 0,
    "statements": Array [
      InOp {
        "column": 1,
        "end": 6,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a in b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a in b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: in-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not in b
a !in b",
    "start": 0,
    "statements": Array [
      InOp {
        "column": 1,
        "end": 10,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not in b",
        "right": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InOp",
      },
      InOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 12,
          "line": 2,
          "raw": "a",
          "start": 11,
          "type": "Identifier",
        },
        "line": 2,
        "raw": "a !in b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 18,
          "line": 2,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 11,
        "type": "InOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a not in b
a !in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: instanceof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "a instanceof b",
    "start": 0,
    "statements": Array [
      InstanceofOp {
        "column": 1,
        "end": 14,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a instanceof b",
        "right": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InstanceofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "a instanceof b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: instanceof-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not instanceof b",
    "start": 0,
    "statements": Array [
      InstanceofOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not instanceof b",
        "right": Identifier {
          "column": 18,
          "data": "b",
          "end": 18,
          "line": 1,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InstanceofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a not instanceof b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: integer 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 1,
    "inline": false,
    "line": 1,
    "raw": "1",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 1,
        "end": 1,
        "line": 1,
        "raw": "1",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 1,
  "line": 1,
  "raw": "1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: js 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a = \`void 0\`",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 12,
        "expression": JavaScript {
          "column": 5,
          "data": "void 0",
          "end": 12,
          "line": 1,
          "raw": "\`void 0\`",
          "start": 4,
          "type": "JavaScript",
        },
        "line": 1,
        "raw": "a = \`void 0\`",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a = \`void 0\`",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: keyword-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a.break",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 7,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "break",
          "end": 7,
          "line": 1,
          "raw": "break",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "a.break",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "a.break
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: less-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a < b",
    "start": 0,
    "statements": Array [
      LTOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a < b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LTOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a < b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: less-than-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a <= b",
    "start": 0,
    "statements": Array [
      LTEOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a <= b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LTEOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a <= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: logical-and 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a && b",
    "start": 0,
    "statements": Array [
      LogicalAndOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a && b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a && b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: logical-and-longform 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a and b",
    "start": 0,
    "statements": Array [
      LogicalAndOp {
        "column": 1,
        "end": 7,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a and b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a and b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: logical-or 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a || b",
    "start": 0,
    "statements": Array [
      LogicalOrOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a || b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a || b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: logical-or-longform 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a or b",
    "start": 0,
    "statements": Array [
      LogicalOrOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a or b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a or b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "loop
  a",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 8,
              "line": 2,
              "raw": "a",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 8,
        "line": 1,
        "raw": "loop
  a",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "loop
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: many-expressions-in-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "(a; b; c; d; e) + f",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 19,
        "left": SeqOp {
          "column": 2,
          "end": 14,
          "left": Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a; b; c; d; e",
          "right": SeqOp {
            "column": 5,
            "end": 14,
            "left": Identifier {
              "column": 5,
              "data": "b",
              "end": 5,
              "line": 1,
              "raw": "b",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b; c; d; e",
            "right": SeqOp {
              "column": 8,
              "end": 14,
              "left": Identifier {
                "column": 8,
                "data": "c",
                "end": 8,
                "line": 1,
                "raw": "c",
                "start": 7,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "c; d; e",
              "right": SeqOp {
                "column": 11,
                "end": 14,
                "left": Identifier {
                  "column": 11,
                  "data": "d",
                  "end": 11,
                  "line": 1,
                  "raw": "d",
                  "start": 10,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "d; e",
                "right": Identifier {
                  "column": 14,
                  "data": "e",
                  "end": 14,
                  "line": 1,
                  "raw": "e",
                  "start": 13,
                  "type": "Identifier",
                },
                "start": 10,
                "type": "SeqOp",
              },
              "start": 7,
              "type": "SeqOp",
            },
            "start": 4,
            "type": "SeqOp",
          },
          "start": 1,
          "type": "SeqOp",
        },
        "line": 1,
        "raw": "(a; b; c; d; e) + f",
        "right": Identifier {
          "column": 19,
          "data": "f",
          "end": 19,
          "line": 1,
          "raw": "f",
          "start": 18,
          "type": "Identifier",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "(a; b; c; d; e) + f",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: modulo 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a %% b",
    "start": 0,
    "statements": Array [
      ModuloOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a %% b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ModuloOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a %% b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: multiline-interpolated-string-with-escaped-newline 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\\\
 #{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 13,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 4,
            "data": "b",
            "end": 11,
            "line": 2,
            "raw": "b",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 8,
            "line": 1,
            "raw": "\\\\
 ",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 12,
            "line": 2,
            "raw": "",
            "start": 12,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\\\
 #{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\\"#{a}\\\\
 #{b}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: multiline-string-with-interpolations-and-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 39,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 39,
        "expressions": Array [
          Identifier {
            "column": 9,
            "data": "c",
            "end": 17,
            "line": 3,
            "raw": "c",
            "start": 16,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "e",
            "end": 29,
            "line": 4,
            "raw": "e",
            "start": 28,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a
  b\\"",
            "end": 14,
            "line": 1,
            "raw": "
  a
    b\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
  d\\"",
            "end": 26,
            "line": 3,
            "raw": "\\"
    d\\"",
            "start": 18,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
f",
            "end": 36,
            "line": 4,
            "raw": "\\"
  f
",
            "start": 30,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: multiline-string-with-quoted-interpolations-and-non-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 48,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 48,
        "expressions": Array [
          Identifier {
            "column": 9,
            "data": "c",
            "end": 17,
            "line": 3,
            "raw": "c",
            "start": 16,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "g",
            "end": 38,
            "line": 5,
            "raw": "g",
            "start": 37,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a
  b\\"",
            "end": 14,
            "line": 1,
            "raw": "
  a
    b\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
  d\\"e\\"
  f\\"",
            "end": 35,
            "line": 3,
            "raw": "\\"
    d\\"e\\"
    f\\"",
            "start": 18,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
h",
            "end": 45,
            "line": 5,
            "raw": "\\"
  h
",
            "start": 39,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 49,
  "line": 1,
  "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: multiple-expressions-in-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "a + (b; c)",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 10,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a + (b; c)",
        "right": SeqOp {
          "column": 6,
          "end": 9,
          "left": Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "b; c",
          "right": Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
          "start": 5,
          "type": "SeqOp",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "a + (b; c)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: multiplication 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 * 4",
    "start": 0,
    "statements": Array [
      MultiplyOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 * 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "MultiplyOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 * 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: negated-equality 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a != b",
    "start": 0,
    "statements": Array [
      NEQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a != b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "NEQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a != b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: negated-equality-longhand 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "a isnt b",
    "start": 0,
    "statements": Array [
      NEQOp {
        "column": 1,
        "end": 8,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a isnt b",
        "right": Identifier {
          "column": 8,
          "data": "b",
          "end": 8,
          "line": 1,
          "raw": "b",
          "start": 7,
          "type": "Identifier",
        },
        "start": 0,
        "type": "NEQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "a isnt b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "!a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "!a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "!a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: negation-with-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "not a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "not a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "not a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-code-with-outdent 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 52,
    "inline": false,
    "line": 1,
    "raw": "a {
  b: ->
    return c d,
      if e
        f
}
g",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          ObjectInitialiser {
            "column": 3,
            "end": 50,
            "line": 1,
            "members": Array [
              ObjectInitialiserMember {
                "column": 3,
                "end": 48,
                "expression": Function {
                  "body": Block {
                    "column": 5,
                    "end": 48,
                    "inline": false,
                    "line": 3,
                    "raw": "return c d,
      if e
        f",
                    "start": 16,
                    "statements": Array [
                      Return {
                        "column": 5,
                        "end": 48,
                        "expression": FunctionApplication {
                          "arguments": Array [
                            Identifier {
                              "column": 14,
                              "data": "d",
                              "end": 26,
                              "line": 3,
                              "raw": "d",
                              "start": 25,
                              "type": "Identifier",
                            },
                            Conditional {
                              "alternate": null,
                              "column": 7,
                              "condition": Identifier {
                                "column": 10,
                                "data": "e",
                                "end": 38,
                                "line": 4,
                                "raw": "e",
                                "start": 37,
                                "type": "Identifier",
                              },
                              "consequent": Block {
                                "column": 9,
                                "end": 48,
                                "inline": false,
                                "line": 5,
                                "raw": "f",
                                "start": 47,
                                "statements": Array [
                                  Identifier {
                                    "column": 9,
                                    "data": "f",
                                    "end": 48,
                                    "line": 5,
                                    "raw": "f",
                                    "start": 47,
                                    "type": "Identifier",
                                  },
                                ],
                                "type": "Block",
                              },
                              "end": 48,
                              "isUnless": false,
                              "line": 4,
                              "raw": "if e
        f",
                              "start": 34,
                              "type": "Conditional",
                            },
                          ],
                          "column": 12,
                          "end": 48,
                          "function": Identifier {
                            "column": 12,
                            "data": "c",
                            "end": 24,
                            "line": 3,
                            "raw": "c",
                            "start": 23,
                            "type": "Identifier",
                          },
                          "line": 3,
                          "raw": "c d,
      if e
        f",
                          "start": 23,
                          "type": "FunctionApplication",
                        },
                        "line": 3,
                        "raw": "return c d,
      if e
        f",
                        "start": 16,
                        "type": "Return",
                      },
                    ],
                    "type": "Block",
                  },
                  "column": 6,
                  "end": 48,
                  "line": 2,
                  "parameters": Array [],
                  "raw": "->
    return c d,
      if e
        f",
                  "start": 9,
                  "type": "Function",
                },
                "isComputed": false,
                "key": Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 7,
                  "line": 2,
                  "raw": "b",
                  "start": 6,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "b: ->
    return c d,
      if e
        f",
                "start": 6,
                "type": "ObjectInitialiserMember",
              },
            ],
            "raw": "{
  b: ->
    return c d,
      if e
        f
}",
            "start": 2,
            "type": "ObjectInitialiser",
          },
        ],
        "column": 1,
        "end": 50,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a {
  b: ->
    return c d,
      if e
        f
}",
        "start": 0,
        "type": "FunctionApplication",
      },
      Identifier {
        "column": 1,
        "data": "g",
        "end": 52,
        "line": 7,
        "raw": "g",
        "start": 51,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 53,
  "line": 1,
  "raw": "a {
  b: ->
    return c d,
      if e
        f
}
g
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-conditionals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "if a
  b
else if c
  d
else
  e",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 6,
          "end": 31,
          "inline": true,
          "line": 3,
          "raw": "if c
  d
else
  e",
          "start": 14,
          "statements": Array [
            Conditional {
              "alternate": Block {
                "column": 3,
                "end": 31,
                "inline": false,
                "line": 6,
                "raw": "e",
                "start": 30,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "e",
                    "end": 31,
                    "line": 6,
                    "raw": "e",
                    "start": 30,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "condition": Identifier {
                "column": 9,
                "data": "c",
                "end": 18,
                "line": 3,
                "raw": "c",
                "start": 17,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 3,
                "end": 22,
                "inline": false,
                "line": 4,
                "raw": "d",
                "start": 21,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "d",
                    "end": 22,
                    "line": 4,
                    "raw": "d",
                    "start": 21,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "end": 31,
              "isUnless": false,
              "line": 3,
              "raw": "if c
  d
else
  e",
              "start": 14,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 31,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b
else if c
  d
else
  e",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "if a
  b
else if c
  d
else
  e",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-member-expressions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a.b.c",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": MemberAccessOp {
          "column": 1,
          "end": 3,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          "raw": "a.b",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "c",
          "end": 5,
          "line": 1,
          "raw": "c",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "a.b.c",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a.b.c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-object-literals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a:
  b: c",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 9,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 9,
            "expression": ObjectInitialiser {
              "column": 3,
              "end": 9,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 3,
                  "end": 9,
                  "expression": Identifier {
                    "column": 6,
                    "data": "c",
                    "end": 9,
                    "line": 2,
                    "raw": "c",
                    "start": 8,
                    "type": "Identifier",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 6,
                    "line": 2,
                    "raw": "b",
                    "start": 5,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: c",
                  "start": 5,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "b: c",
              "start": 5,
              "type": "ObjectInitialiser",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a:
  b: c",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a:
  b: c",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a:
  b: c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-object-with-inner-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a:
  b: ->
    c;",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 17,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 17,
            "expression": ObjectInitialiser {
              "column": 3,
              "end": 17,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 3,
                  "end": 17,
                  "expression": Function {
                    "body": Block {
                      "column": 5,
                      "end": 17,
                      "inline": false,
                      "line": 3,
                      "raw": "c;",
                      "start": 15,
                      "statements": Array [
                        Identifier {
                          "column": 5,
                          "data": "c",
                          "end": 16,
                          "line": 3,
                          "raw": "c",
                          "start": 15,
                          "type": "Identifier",
                        },
                      ],
                      "type": "Block",
                    },
                    "column": 6,
                    "end": 17,
                    "line": 2,
                    "parameters": Array [],
                    "raw": "->
    c;",
                    "start": 8,
                    "type": "Function",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 6,
                    "line": 2,
                    "raw": "b",
                    "start": 5,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: ->
    c;",
                  "start": 5,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "b: ->
    c;",
              "start": 5,
              "type": "ObjectInitialiser",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a:
  b: ->
    c;",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a:
  b: ->
    c;",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a:
  b: ->
    c;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: nested-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{\\"b#{c}\\"}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 13,
        "expressions": Array [
          String {
            "column": 5,
            "end": 11,
            "expressions": Array [
              Identifier {
                "column": 9,
                "data": "c",
                "end": 9,
                "line": 1,
                "raw": "c",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 6,
                "data": "b",
                "end": 6,
                "line": 1,
                "raw": "b",
                "start": 5,
                "type": "Quasi",
              },
              Quasi {
                "column": 11,
                "data": "",
                "end": 10,
                "line": 1,
                "raw": "",
                "start": 10,
                "type": "Quasi",
              },
            ],
            "raw": "\\"b#{c}\\"",
            "start": 4,
            "type": "String",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 13,
            "data": "",
            "end": 12,
            "line": 1,
            "raw": "",
            "start": 12,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{\\"b#{c}\\"}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"a#{\\"b#{c}\\"}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: new 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "new a.B()",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [],
        "column": 1,
        "ctor": MemberAccessOp {
          "column": 5,
          "end": 7,
          "expression": Identifier {
            "column": 5,
            "data": "a",
            "end": 5,
            "line": 1,
            "raw": "a",
            "start": 4,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 7,
            "data": "B",
            "end": 7,
            "line": 1,
            "raw": "B",
            "start": 6,
            "type": "Identifier",
          },
          "raw": "a.B",
          "start": 4,
          "type": "MemberAccessOp",
        },
        "end": 9,
        "line": 1,
        "raw": "new a.B()",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "new a.B()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: new-with-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "-> new A().b(c)",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 4,
          "end": 15,
          "inline": true,
          "line": 1,
          "raw": "new A().b(c)",
          "start": 3,
          "statements": Array [
            FunctionApplication {
              "arguments": Array [
                Identifier {
                  "column": 14,
                  "data": "c",
                  "end": 14,
                  "line": 1,
                  "raw": "c",
                  "start": 13,
                  "type": "Identifier",
                },
              ],
              "column": 4,
              "end": 15,
              "function": MemberAccessOp {
                "column": 4,
                "end": 12,
                "expression": NewOp {
                  "arguments": Array [],
                  "column": 4,
                  "ctor": Identifier {
                    "column": 8,
                    "data": "A",
                    "end": 8,
                    "line": 1,
                    "raw": "A",
                    "start": 7,
                    "type": "Identifier",
                  },
                  "end": 10,
                  "line": 1,
                  "raw": "new A()",
                  "start": 3,
                  "type": "NewOp",
                },
                "line": 1,
                "member": Identifier {
                  "column": 12,
                  "data": "b",
                  "end": 12,
                  "line": 1,
                  "raw": "b",
                  "start": 11,
                  "type": "Identifier",
                },
                "raw": "new A().b",
                "start": 3,
                "type": "MemberAccessOp",
              },
              "line": 1,
              "raw": "new A().b(c)",
              "start": 3,
              "type": "FunctionApplication",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "parameters": Array [],
        "raw": "-> new A().b(c)",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "-> new A().b(c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: new-without-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "new A",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "A",
          "end": 5,
          "line": 1,
          "raw": "A",
          "start": 4,
          "type": "Identifier",
        },
        "end": 5,
        "line": 1,
        "raw": "new A",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "new A",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: null 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "null",
    "start": 0,
    "statements": Array [
      Null {
        "column": 1,
        "end": 4,
        "line": 1,
        "raw": "null",
        "start": 0,
        "type": "Null",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "null",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: number-object-key 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "arr",
          "end": 3,
          "line": 1,
          "raw": "arr",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 38,
        "expression": ObjectInitialiser {
          "column": 7,
          "end": 38,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 8,
              "end": 16,
              "expression": Int {
                "column": 16,
                "data": 1,
                "end": 16,
                "line": 1,
                "raw": "1",
                "start": 15,
                "type": "Int",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 8,
                "data": "length",
                "end": 13,
                "line": 1,
                "raw": "length",
                "start": 7,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "length: 1",
              "start": 7,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 19,
              "end": 28,
              "expression": String {
                "column": 22,
                "end": 28,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 23,
                    "data": "Hello",
                    "end": 27,
                    "line": 1,
                    "raw": "Hello",
                    "start": 22,
                    "type": "Quasi",
                  },
                ],
                "raw": "'Hello'",
                "start": 21,
                "type": "String",
              },
              "isComputed": false,
              "key": Int {
                "column": 19,
                "data": 0,
                "end": 19,
                "line": 1,
                "raw": "0",
                "start": 18,
                "type": "Int",
              },
              "line": 1,
              "raw": "0: 'Hello'",
              "start": 18,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 31,
              "end": 37,
              "expression": Int {
                "column": 37,
                "data": 0,
                "end": 37,
                "line": 1,
                "raw": "0",
                "start": 36,
                "type": "Int",
              },
              "isComputed": false,
              "key": Float {
                "column": 31,
                "data": 3.14,
                "end": 34,
                "line": 1,
                "raw": "3.14",
                "start": 30,
                "type": "Float",
              },
              "line": 1,
              "raw": "3.14: 0",
              "start": 30,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{length: 1, 0: 'Hello', 3.14: 0}",
          "start": 6,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-destructure-with-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a = 1} = b",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": ObjectInitialiser {
          "column": 1,
          "end": 7,
          "line": 1,
          "members": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 2,
                "data": "a",
                "end": 2,
                "line": 1,
                "raw": "a",
                "start": 1,
                "type": "Identifier",
              },
              "column": 2,
              "end": 6,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 6,
                "line": 1,
                "raw": "1",
                "start": 5,
                "type": "Int",
              },
              "line": 1,
              "raw": "a = 1",
              "start": 1,
              "type": "AssignOp",
            },
          ],
          "raw": "{a = 1}",
          "start": 0,
          "type": "ObjectInitialiser",
        },
        "column": 1,
        "end": 11,
        "expression": Identifier {
          "column": 11,
          "data": "b",
          "end": 11,
          "line": 1,
          "raw": "b",
          "start": 10,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "{a = 1} = b",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a = 1} = b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-with-block-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 47,
    "inline": false,
    "line": 1,
    "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "obj",
          "end": 3,
          "line": 1,
          "raw": "obj",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 47,
        "expression": ObjectInitialiser {
          "column": 3,
          "end": 47,
          "line": 2,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 47,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 47,
                "line": 5,
                "raw": "1",
                "start": 46,
                "type": "Int",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "a",
                "end": 44,
                "line": 5,
                "raw": "a",
                "start": 43,
                "type": "Identifier",
              },
              "line": 5,
              "raw": "a: 1",
              "start": 43,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "###
  # @returns {boolean}
  ###
  a: 1",
          "start": 8,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 47,
  "line": 1,
  "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-with-braces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "{a: 1}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 6,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 5,
            "expression": Int {
              "column": 5,
              "data": 1,
              "end": 5,
              "line": 1,
              "raw": "1",
              "start": 4,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: 1",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: 1}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "{a: 1}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-with-combined-key-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{ a, b: 1 }",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 3,
            "end": 3,
            "expression": null,
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "a",
              "end": 3,
              "line": 1,
              "raw": "a",
              "start": 2,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a",
            "start": 2,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 6,
            "end": 9,
            "expression": Int {
              "column": 9,
              "data": 1,
              "end": 9,
              "line": 1,
              "raw": "1",
              "start": 8,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 6,
              "data": "b",
              "end": 6,
              "line": 1,
              "raw": "b",
              "start": 5,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b: 1",
            "start": 5,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{ a, b: 1 }",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "{ a, b: 1 }",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-with-multiple-properties 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "{
  a: 1,
  b: 2
}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 18,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 3,
            "end": 8,
            "expression": Int {
              "column": 6,
              "data": 1,
              "end": 8,
              "line": 2,
              "raw": "1",
              "start": 7,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "a",
              "end": 5,
              "line": 2,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
            "line": 2,
            "raw": "a: 1",
            "start": 4,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 3,
            "end": 16,
            "expression": Int {
              "column": 6,
              "data": 2,
              "end": 16,
              "line": 3,
              "raw": "2",
              "start": 15,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "b",
              "end": 13,
              "line": 3,
              "raw": "b",
              "start": 12,
              "type": "Identifier",
            },
            "line": 3,
            "raw": "b: 2",
            "start": 12,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{
  a: 1,
  b: 2
}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "{
  a: 1,
  b: 2
}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-with-parenthesized-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a: (b), c}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 7,
            "expression": Identifier {
              "column": 6,
              "data": "b",
              "end": 6,
              "line": 1,
              "raw": "b",
              "start": 5,
              "type": "Identifier",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: (b)",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 10,
            "end": 10,
            "expression": null,
            "isComputed": false,
            "key": Identifier {
              "column": 10,
              "data": "c",
              "end": 10,
              "line": 1,
              "raw": "c",
              "start": 9,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "c",
            "start": 9,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: (b), c}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a: (b), c}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: object-without-braces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a: 1",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 4,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 4,
            "expression": Int {
              "column": 4,
              "data": 1,
              "end": 4,
              "line": 1,
              "raw": "1",
              "start": 3,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: 1",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a: 1",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a: 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: octal-number 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "0o1234",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 668,
        "end": 6,
        "line": 1,
        "raw": "0o1234",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "0o1234",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a of b",
    "start": 0,
    "statements": Array [
      OfOp {
        "column": 1,
        "end": 6,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a of b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "OfOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a of b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: of-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not of b
a !of b",
    "start": 0,
    "statements": Array [
      OfOp {
        "column": 1,
        "end": 10,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not of b",
        "right": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "start": 0,
        "type": "OfOp",
      },
      OfOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 12,
          "line": 2,
          "raw": "a",
          "start": 11,
          "type": "Identifier",
        },
        "line": 2,
        "raw": "a !of b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 18,
          "line": 2,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 11,
        "type": "OfOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a not of b
a !of b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: only-empty-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "\\"#{}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 5,
        "expressions": Array [
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 4,
            "line": 1,
            "raw": "",
            "start": 4,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "\\"#{}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: parentheses 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "(a + b) * c",
    "start": 0,
    "statements": Array [
      MultiplyOp {
        "column": 1,
        "end": 11,
        "left": PlusOp {
          "column": 2,
          "end": 6,
          "left": Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a + b",
          "right": Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          "start": 1,
          "type": "PlusOp",
        },
        "line": 1,
        "raw": "(a + b) * c",
        "right": Identifier {
          "column": 11,
          "data": "c",
          "end": 11,
          "line": 1,
          "raw": "c",
          "start": 10,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MultiplyOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "(a + b) * c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: parenthesized-arrow-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a (->)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": null,
            "column": 4,
            "end": 5,
            "line": 1,
            "parameters": Array [],
            "raw": "->",
            "start": 3,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 6,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a (->)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a (->)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: parenthesized-break-in-postfix-while 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "(break) while true",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 1,
          "end": 7,
          "inline": true,
          "line": 1,
          "raw": "(break)",
          "start": 0,
          "statements": Array [
            Break {
              "column": 2,
              "end": 6,
              "line": 1,
              "raw": "break",
              "start": 1,
              "type": "Break",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Bool {
          "column": 15,
          "data": true,
          "end": 18,
          "line": 1,
          "raw": "true",
          "start": 14,
          "type": "Bool",
        },
        "end": 18,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "(break) while true",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "(break) while true
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: parenthesized-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "(a).b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "(a).b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "(a).b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: post-decrement 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a--",
    "start": 0,
    "statements": Array [
      PostDecrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a--",
        "start": 0,
        "type": "PostDecrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a--",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: post-for 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a for a in b",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "a for a in b",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 12,
          "data": "b",
          "end": 12,
          "line": 1,
          "raw": "b",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a for a in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: post-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a++",
    "start": 0,
    "statements": Array [
      PostIncrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a++",
        "start": 0,
        "type": "PostIncrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a++",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: post-unless-not-if 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "c unless a not in b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 10,
          "end": 19,
          "isNot": true,
          "left": Identifier {
            "column": 10,
            "data": "a",
            "end": 10,
            "line": 1,
            "raw": "a",
            "start": 9,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not in b",
          "right": Identifier {
            "column": 19,
            "data": "b",
            "end": 19,
            "line": 1,
            "raw": "b",
            "start": 18,
            "type": "Identifier",
          },
          "start": 9,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "c",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "c",
              "end": 1,
              "line": 1,
              "raw": "c",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 19,
        "isUnless": true,
        "line": 1,
        "raw": "c unless a not in b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "c unless a not in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: post-while-with-loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "loop a while b",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 6,
          "end": 14,
          "inline": true,
          "line": 1,
          "raw": "a while b",
          "start": 5,
          "statements": Array [
            While {
              "body": Block {
                "column": 6,
                "end": 6,
                "inline": true,
                "line": 1,
                "raw": "a",
                "start": 5,
                "statements": Array [
                  Identifier {
                    "column": 6,
                    "data": "a",
                    "end": 6,
                    "line": 1,
                    "raw": "a",
                    "start": 5,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "condition": Identifier {
                "column": 14,
                "data": "b",
                "end": 14,
                "line": 1,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "end": 14,
              "guard": null,
              "isUntil": false,
              "line": 1,
              "raw": "a while b",
              "start": 5,
              "type": "While",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "line": 1,
        "raw": "loop a while b",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "loop a while b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: pow 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a ** b",
    "start": 0,
    "statements": Array [
      ExpOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ** b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ExpOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a ** b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: pre-decrement 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "--a",
    "start": 0,
    "statements": Array [
      PreDecrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "--a",
        "start": 0,
        "type": "PreDecrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "--a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: pre-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "++a",
    "start": 0,
    "statements": Array [
      PreIncrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "++a",
        "start": 0,
        "type": "PreIncrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "++a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: prototype-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "Object::toString",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 16,
        "expression": ProtoMemberAccessOp {
          "column": 1,
          "end": 8,
          "expression": Identifier {
            "column": 1,
            "data": "Object",
            "end": 6,
            "line": 1,
            "raw": "Object",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "Object::",
          "start": 0,
          "type": "ProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 9,
          "data": "toString",
          "end": 16,
          "line": 1,
          "raw": "toString",
          "start": 8,
          "type": "Identifier",
        },
        "raw": "Object::toString",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "Object::toString",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: range-exclusive 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "[a...b]",
    "start": 0,
    "statements": Array [
      Range {
        "column": 1,
        "end": 7,
        "isInclusive": false,
        "left": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a...b]",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Range",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "[a...b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: range-inclusive 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "[a..b]",
    "start": 0,
    "statements": Array [
      Range {
        "column": 1,
        "end": 6,
        "isInclusive": true,
        "left": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a..b]",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Range",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "[a..b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: regex-with-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "/a/gimuy",
    "start": 0,
    "statements": Array [
      Regex {
        "column": 1,
        "end": 8,
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": true,
          "multiline": true,
          "sticky": true,
          "u": true,
          "unicode": true,
          "y": true,
        },
        "line": 1,
        "pattern": "a",
        "raw": "/a/gimuy",
        "start": 0,
        "type": "Regex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "/a/gimuy
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: regexp 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "/a/",
    "start": 0,
    "statements": Array [
      Regex {
        "column": 1,
        "end": 3,
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "pattern": "a",
        "raw": "/a/",
        "start": 0,
        "type": "Regex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "/a/
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: remainder 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 % 4",
    "start": 0,
    "statements": Array [
      RemOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 % 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "RemOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 % 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: rest-param-in-bound-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "(rest...) =>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 12,
        "line": 1,
        "parameters": Array [
          Rest {
            "column": 2,
            "end": 8,
            "expression": Identifier {
              "column": 2,
              "data": "rest",
              "end": 5,
              "line": 1,
              "raw": "rest",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "rest...",
            "start": 1,
            "type": "Rest",
          },
        ],
        "raw": "(rest...) =>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "(rest...) =>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: rest-param-in-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "(rest...) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 12,
        "line": 1,
        "parameters": Array [
          Rest {
            "column": 2,
            "end": 8,
            "expression": Identifier {
              "column": 2,
              "data": "rest",
              "end": 5,
              "line": 1,
              "raw": "rest",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "rest...",
            "start": 1,
            "type": "Rest",
          },
        ],
        "raw": "(rest...) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "(rest...) ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: return-with-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "->
  return a",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 13,
          "inline": false,
          "line": 2,
          "raw": "return a",
          "start": 5,
          "statements": Array [
            Return {
              "column": 3,
              "end": 13,
              "expression": Identifier {
                "column": 10,
                "data": "a",
                "end": 13,
                "line": 2,
                "raw": "a",
                "start": 12,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "return a",
              "start": 5,
              "type": "Return",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 13,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  return a",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "->
  return a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: return-without-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "->
  return",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "return",
          "start": 5,
          "statements": Array [
            Return {
              "column": 3,
              "end": 11,
              "expression": null,
              "line": 2,
              "raw": "return",
              "start": 5,
              "type": "Return",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 11,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  return",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "->
  return",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-object-with-interpolated-strings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "x = {\\"a#{b}c\\"}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 14,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 14,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 6,
              "end": 13,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 6,
                "end": 13,
                "expressions": Array [
                  Identifier {
                    "column": 10,
                    "data": "b",
                    "end": 10,
                    "line": 1,
                    "raw": "b",
                    "start": 9,
                    "type": "Identifier",
                  },
                ],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 7,
                    "data": "a",
                    "end": 7,
                    "line": 1,
                    "raw": "a",
                    "start": 6,
                    "type": "Quasi",
                  },
                  Quasi {
                    "column": 12,
                    "data": "c",
                    "end": 12,
                    "line": 1,
                    "raw": "c",
                    "start": 11,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"a#{b}c\\"",
                "start": 5,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"a#{b}c\\"",
              "start": 5,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{\\"a#{b}c\\"}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "x = {\\"a#{b}c\\"}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "x = {\\"a#{b}c\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-object-with-strings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 25,
    "inline": false,
    "line": 1,
    "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 25,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 25,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 6,
              "end": 10,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 6,
                "end": 10,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 7,
                    "data": "FOO",
                    "end": 9,
                    "line": 1,
                    "raw": "FOO",
                    "start": 6,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"FOO\\"",
                "start": 5,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"FOO\\"",
              "start": 5,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 13,
              "end": 17,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 13,
                "end": 17,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 14,
                    "data": "BAR",
                    "end": 16,
                    "line": 1,
                    "raw": "BAR",
                    "start": 13,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"BAR\\"",
                "start": 12,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"BAR\\"",
              "start": 12,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 20,
              "end": 24,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 20,
                "end": 24,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 21,
                    "data": "BAZ",
                    "end": 23,
                    "line": 1,
                    "raw": "BAZ",
                    "start": 20,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"BAZ\\"",
                "start": 19,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"BAZ\\"",
              "start": 19,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-object-with-this 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "{@a}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 4,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 3,
            "expression": null,
            "isComputed": false,
            "key": MemberAccessOp {
              "column": 2,
              "end": 3,
              "expression": This {
                "column": 2,
                "end": 2,
                "line": 1,
                "raw": "@",
                "start": 1,
                "type": "This",
              },
              "line": 1,
              "member": Identifier {
                "column": 3,
                "data": "a",
                "end": 3,
                "line": 1,
                "raw": "a",
                "start": 2,
                "type": "Identifier",
              },
              "raw": "@a",
              "start": 1,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "@a",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{@a}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "{@a}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-this 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 1,
    "inline": false,
    "line": 1,
    "raw": "@",
    "start": 0,
    "statements": Array [
      This {
        "column": 1,
        "end": 1,
        "line": 1,
        "raw": "@",
        "start": 0,
        "type": "This",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 1,
  "line": 1,
  "raw": "@",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-this-member-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "@a",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 2,
        "expression": This {
          "column": 1,
          "end": 1,
          "line": 1,
          "raw": "@",
          "start": 0,
          "type": "This",
        },
        "line": 1,
        "member": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "raw": "@a",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "@a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: shorthand-this-member-expression-with-dot 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "@.a",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 3,
        "expression": This {
          "column": 1,
          "end": 1,
          "line": 1,
          "raw": "@",
          "start": 0,
          "type": "This",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "@.a",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "@.a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: simple-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 3,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: simple-member-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a.b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "a.b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a.b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: slice-with-lower-and-upper-bounds 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a[b..c]",
    "start": 0,
    "statements": Array [
      Slice {
        "column": 1,
        "end": 7,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a[b..c]",
        "right": Identifier {
          "column": 6,
          "data": "c",
          "end": 6,
          "line": 1,
          "raw": "c",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Slice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a[b..c]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: slice-with-no-bounds 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a[..]",
    "start": 0,
    "statements": Array [
      Slice {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": null,
        "line": 1,
        "raw": "a[..]",
        "right": null,
        "start": 0,
        "type": "Slice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a[..]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-dynamic-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a?[b]",
    "start": 0,
    "statements": Array [
      SoakedDynamicMemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "indexingExpr": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b]",
        "start": 0,
        "type": "SoakedDynamicMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a?[b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a?()",
    "start": 0,
    "statements": Array [
      SoakedFunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 4,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?()",
        "start": 0,
        "type": "SoakedFunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a?()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a?.b",
    "start": 0,
    "statements": Array [
      SoakedMemberAccessOp {
        "column": 1,
        "end": 4,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "raw": "a?.b",
        "start": 0,
        "type": "SoakedMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a?.b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a?.b()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 6,
        "function": SoakedMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 4,
            "data": "b",
            "end": 4,
            "line": 1,
            "raw": "b",
            "start": 3,
            "type": "Identifier",
          },
          "raw": "a?.b",
          "start": 0,
          "type": "SoakedMemberAccessOp",
        },
        "line": 1,
        "raw": "a?.b()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a?.b()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-new 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "new A? b",
    "start": 0,
    "statements": Array [
      SoakedNewOp {
        "arguments": Array [
          Identifier {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "A",
          "end": 5,
          "line": 1,
          "raw": "A",
          "start": 4,
          "type": "Identifier",
        },
        "end": 8,
        "line": 1,
        "raw": "new A? b",
        "start": 0,
        "type": "SoakedNewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "new A? b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-prototype-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a?::b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": SoakedProtoMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?::",
          "start": 0,
          "type": "SoakedProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "a?::b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a?::b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-slice 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "a?[b..c]",
    "start": 0,
    "statements": Array [
      SoakedSlice {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b..c]",
        "right": Identifier {
          "column": 7,
          "data": "c",
          "end": 7,
          "line": 1,
          "raw": "c",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "SoakedSlice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a?[b..c]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: soaked-splice 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a?[b..c] = d",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": SoakedSlice {
          "column": 1,
          "end": 8,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "isInclusive": true,
          "left": Identifier {
            "column": 4,
            "data": "b",
            "end": 4,
            "line": 1,
            "raw": "b",
            "start": 3,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?[b..c]",
          "right": Identifier {
            "column": 7,
            "data": "c",
            "end": 7,
            "line": 1,
            "raw": "c",
            "start": 6,
            "type": "Identifier",
          },
          "start": 0,
          "type": "SoakedSlice",
        },
        "column": 1,
        "end": 12,
        "expression": Identifier {
          "column": 12,
          "data": "d",
          "end": 12,
          "line": 1,
          "raw": "d",
          "start": 11,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b..c] = d",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a?[b..c] = d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: splat-in-array 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "[a...]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 6,
        "line": 1,
        "members": Array [
          Spread {
            "column": 2,
            "end": 5,
            "expression": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a...",
            "start": 1,
            "type": "Spread",
          },
        ],
        "raw": "[a...]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "[a...]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: splat-in-array-with-other-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "[a, b..., c]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 12,
        "line": 1,
        "members": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Spread {
            "column": 5,
            "end": 8,
            "expression": Identifier {
              "column": 5,
              "data": "b",
              "end": 5,
              "line": 1,
              "raw": "b",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b...",
            "start": 4,
            "type": "Spread",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "raw": "[a, b..., c]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "[a, b..., c]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: splat-in-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a(b...)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Spread {
            "column": 3,
            "end": 6,
            "expression": Identifier {
              "column": 3,
              "data": "b",
              "end": 3,
              "line": 1,
              "raw": "b",
              "start": 2,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b...",
            "start": 2,
            "type": "Spread",
          },
        ],
        "column": 1,
        "end": 7,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(b...)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a(b...)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: splat-in-function-call-with-other-args 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a b, c..., d",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          Spread {
            "column": 6,
            "end": 9,
            "expression": Identifier {
              "column": 6,
              "data": "c",
              "end": 6,
              "line": 1,
              "raw": "c",
              "start": 5,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "c...",
            "start": 5,
            "type": "Spread",
          },
          Identifier {
            "column": 12,
            "data": "d",
            "end": 12,
            "line": 1,
            "raw": "d",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "end": 12,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a b, c..., d",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a b, c..., d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: splat-in-new-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "new Foo(args...)",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [
          Spread {
            "column": 9,
            "end": 15,
            "expression": Identifier {
              "column": 9,
              "data": "args",
              "end": 12,
              "line": 1,
              "raw": "args",
              "start": 8,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "args...",
            "start": 8,
            "type": "Spread",
          },
        ],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "Foo",
          "end": 7,
          "line": 1,
          "raw": "Foo",
          "start": 4,
          "type": "Identifier",
        },
        "end": 16,
        "line": 1,
        "raw": "new Foo(args...)",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "new Foo(args...)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-ending-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "",
            "end": 6,
            "line": 1,
            "raw": "",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "\\"a#{b}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-interpolation-in-object-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a: \\"#{b}\\"}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 10,
            "expression": String {
              "column": 5,
              "end": 10,
              "expressions": Array [
                Identifier {
                  "column": 8,
                  "data": "b",
                  "end": 8,
                  "line": 1,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "line": 1,
              "quasis": Array [
                Quasi {
                  "column": 6,
                  "data": "",
                  "end": 5,
                  "line": 1,
                  "raw": "",
                  "start": 5,
                  "type": "Quasi",
                },
                Quasi {
                  "column": 10,
                  "data": "",
                  "end": 9,
                  "line": 1,
                  "raw": "",
                  "start": 9,
                  "type": "Quasi",
                },
              ],
              "raw": "\\"#{b}\\"",
              "start": 4,
              "type": "String",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: \\"#{b}\\"",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: \\"#{b}\\"}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a: \\"#{b}\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-interpolation-plus-normal-string 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\" + \\"b\\"",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 12,
        "left": String {
          "column": 1,
          "end": 6,
          "expressions": Array [
            Identifier {
              "column": 4,
              "data": "a",
              "end": 4,
              "line": 1,
              "raw": "a",
              "start": 3,
              "type": "Identifier",
            },
          ],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 2,
              "data": "",
              "end": 1,
              "line": 1,
              "raw": "",
              "start": 1,
              "type": "Quasi",
            },
            Quasi {
              "column": 6,
              "data": "",
              "end": 5,
              "line": 1,
              "raw": "",
              "start": 5,
              "type": "Quasi",
            },
          ],
          "raw": "\\"#{a}\\"",
          "start": 0,
          "type": "String",
        },
        "line": 1,
        "raw": "\\"#{a}\\" + \\"b\\"",
        "right": String {
          "column": 10,
          "end": 12,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 11,
              "data": "b",
              "end": 11,
              "line": 1,
              "raw": "b",
              "start": 10,
              "type": "Quasi",
            },
          ],
          "raw": "\\"b\\"",
          "start": 9,
          "type": "String",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"#{a}\\" + \\"b\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-interpolation-preceded-by-parenthesis 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"(#{a}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "a",
            "end": 5,
            "line": 1,
            "raw": "a",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "(",
            "end": 2,
            "line": 1,
            "raw": "(",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "",
            "end": 6,
            "line": 1,
            "raw": "",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"(#{a}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 67,
  "line": 1,
  "raw": "\\"(#{a}\\"  # https://github.com/decaffeinate/decaffeinate/issues/212
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-interpolation-with-escaped-newline 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\\\
#{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 12,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 3,
            "data": "b",
            "end": 10,
            "line": 2,
            "raw": "b",
            "start": 9,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 7,
            "line": 1,
            "raw": "\\\\
",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 11,
            "line": 2,
            "raw": "",
            "start": 11,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\\\
#{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"#{a}\\\\
#{b}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-interpolation-with-plus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a + b}c\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [
          PlusOp {
            "column": 4,
            "end": 8,
            "left": Identifier {
              "column": 4,
              "data": "a",
              "end": 4,
              "line": 1,
              "raw": "a",
              "start": 3,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a + b",
            "right": Identifier {
              "column": 8,
              "data": "b",
              "end": 8,
              "line": 1,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
            "start": 3,
            "type": "PlusOp",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 10,
            "data": "c",
            "end": 10,
            "line": 1,
            "raw": "c",
            "start": 9,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a + b}c\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "\\"#{a + b}c\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-starting-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}b\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}b\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "\\"#{a}b\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-double-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"coffee me\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "coffee me",
            "end": 10,
            "line": 1,
            "raw": "coffee me",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "\\"coffee me\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "\\"coffee me\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{b}c\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 8,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "c",
            "end": 7,
            "line": 1,
            "raw": "c",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{b}c\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "\\"a#{b}c\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-interpolations-at-start-and-end 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a} #{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "b",
            "end": 9,
            "line": 1,
            "raw": "b",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": " ",
            "end": 6,
            "line": 1,
            "raw": " ",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "",
            "end": 10,
            "line": 1,
            "raw": "",
            "start": 10,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a} #{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "\\"#{a} #{b}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-noop-escape 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "'\\\\.'",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 4,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": ".",
            "end": 3,
            "line": 1,
            "raw": "\\\\.",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "'\\\\.'",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "'\\\\.'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-only-multiple-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}#{b}#{c}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 14,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Identifier",
          },
          Identifier {
            "column": 12,
            "data": "c",
            "end": 12,
            "line": 1,
            "raw": "c",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 5,
            "line": 1,
            "raw": "",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 10,
            "data": "",
            "end": 9,
            "line": 1,
            "raw": "",
            "start": 9,
            "type": "Quasi",
          },
          Quasi {
            "column": 14,
            "data": "",
            "end": 13,
            "line": 1,
            "raw": "",
            "start": 13,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}#{b}#{c}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\\"#{a}#{b}#{c}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-only-single-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 6,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 5,
            "line": 1,
            "raw": "",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "\\"#{a}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-parentheses-inside 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "\\"( a\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 5,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "( a",
            "end": 4,
            "line": 1,
            "raw": "( a",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "\\"( a\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "\\"( a\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-single-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "'coffee script'",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 15,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "coffee script",
            "end": 14,
            "line": 1,
            "raw": "coffee script",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "'coffee script'",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "'coffee script'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-triple-double-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 26,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "multi-line strings",
            "end": 23,
            "line": 1,
            "raw": "
multi-line strings
",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-triple-quote-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 12,
        "expressions": Array [
          Identifier {
            "column": 3,
            "data": "a",
            "end": 7,
            "line": 2,
            "raw": "a",
            "start": 6,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "",
            "end": 4,
            "line": 1,
            "raw": "
",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 9,
            "line": 2,
            "raw": "
",
            "start": 8,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-triple-quote-interpolation-containing-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 20,
        "expressions": Array [
          Identifier {
            "column": 8,
            "data": "bar",
            "end": 14,
            "line": 2,
            "raw": "bar",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "bar=\\"",
            "end": 9,
            "line": 1,
            "raw": "
bar=\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 12,
            "data": "\\"",
            "end": 17,
            "line": 2,
            "raw": "\\"
",
            "start": 15,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: string-with-triple-single-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "'''
multi-line strings
'''",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 26,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "multi-line strings",
            "end": 23,
            "line": 1,
            "raw": "
multi-line strings
",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "'''
multi-line strings
'''",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "'''
multi-line strings
'''",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: subtraction 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 - 4",
    "start": 0,
    "statements": Array [
      SubtractOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 - 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "SubtractOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 - 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: switch-with-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 37,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c

  else
    d",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": Block {
          "column": 5,
          "end": 37,
          "inline": false,
          "line": 6,
          "raw": "d",
          "start": 36,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "d",
              "end": 37,
              "line": 6,
              "raw": "d",
              "start": 36,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 37,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c

  else
    d",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 37,
  "line": 1,
  "raw": "switch a
  when b
    c

  else
    d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: switch-with-multiple-cases 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c
  when d
    e",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "d",
                "end": 32,
                "line": 4,
                "raw": "d",
                "start": 31,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 38,
              "inline": false,
              "line": 5,
              "raw": "e",
              "start": 37,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "e",
                  "end": 38,
                  "line": 5,
                  "raw": "e",
                  "start": 37,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 38,
            "line": 4,
            "raw": "when d
    e",
            "start": 26,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 38,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c
  when d
    e",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "switch a
  when b
    c
  when d
    e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: switch-with-multiple-conditions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b, c
    d",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
              Identifier {
                "column": 11,
                "data": "c",
                "end": 20,
                "line": 2,
                "raw": "c",
                "start": 19,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 26,
              "inline": false,
              "line": 3,
              "raw": "d",
              "start": 25,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "d",
                  "end": 26,
                  "line": 3,
                  "raw": "d",
                  "start": 25,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 26,
            "line": 2,
            "raw": "when b, c
    d",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 26,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b, c
    d",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "switch a
  when b, c
    d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: switch-with-one-case 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 23,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "switch a
  when b
    c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: tagged-template-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "s = f\\"a#{b}c\\"",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "s",
          "end": 1,
          "line": 1,
          "raw": "s",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 13,
        "expression": TaggedTemplateLiteral {
          "column": 5,
          "end": 13,
          "line": 1,
          "raw": "f\\"a#{b}c\\"",
          "start": 4,
          "tag": Identifier {
            "column": 5,
            "data": "f",
            "end": 5,
            "line": 1,
            "raw": "f",
            "start": 4,
            "type": "Identifier",
          },
          "template": String {
            "column": 6,
            "end": 13,
            "expressions": Array [
              Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
            ],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 7,
                "data": "a",
                "end": 7,
                "line": 1,
                "raw": "a",
                "start": 6,
                "type": "Quasi",
              },
              Quasi {
                "column": 12,
                "data": "c",
                "end": 12,
                "line": 1,
                "raw": "c",
                "start": 11,
                "type": "Quasi",
              },
            ],
            "raw": "\\"a#{b}c\\"",
            "start": 5,
            "type": "String",
          },
          "type": "TaggedTemplateLiteral",
        },
        "line": 1,
        "raw": "s = f\\"a#{b}c\\"",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "s = f\\"a#{b}c\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: this-assign-with-keyword 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "(@case) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [
          MemberAccessOp {
            "column": 2,
            "end": 6,
            "expression": This {
              "column": 2,
              "end": 2,
              "line": 1,
              "raw": "@",
              "start": 1,
              "type": "This",
            },
            "line": 1,
            "member": Identifier {
              "column": 3,
              "data": "case",
              "end": 6,
              "line": 1,
              "raw": "case",
              "start": 2,
              "type": "Identifier",
            },
            "raw": "@case",
            "start": 1,
            "type": "MemberAccessOp",
          },
        ],
        "raw": "(@case) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "(@case) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: throw 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "throw 42",
    "start": 0,
    "statements": Array [
      Throw {
        "column": 1,
        "end": 8,
        "expression": Int {
          "column": 7,
          "data": 42,
          "end": 8,
          "line": 1,
          "raw": "42",
          "start": 6,
          "type": "Int",
        },
        "line": 1,
        "raw": "throw 42",
        "start": 0,
        "type": "Throw",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "throw 42",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: triple-backtick-inline-js 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\`\`\`
a(b);
\`\`\`",
    "start": 0,
    "statements": Array [
      JavaScript {
        "column": 1,
        "data": "
a(b);
",
        "end": 13,
        "line": 1,
        "raw": "\`\`\`
a(b);
\`\`\`",
        "start": 0,
        "type": "JavaScript",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\`\`\`
a(b);
\`\`\`
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: true 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "true",
    "start": 0,
    "statements": Array [
      Bool {
        "column": 1,
        "data": true,
        "end": 4,
        "line": 1,
        "raw": "true",
        "start": 0,
        "type": "Bool",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "true",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-with-catch-and-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch
  b
finally
  c",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 4,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 29,
        "finallyBody": Block {
          "column": 3,
          "end": 29,
          "inline": false,
          "line": 6,
          "raw": "c",
          "start": 28,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 29,
              "line": 6,
              "raw": "c",
              "start": 28,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "line": 1,
        "raw": "try
  a
catch
  b
finally
  c",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "try
  a
catch
  b
finally
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-with-catch-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch err
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": Identifier {
          "column": 7,
          "data": "err",
          "end": 17,
          "line": 3,
          "raw": "err",
          "start": 14,
          "type": "Identifier",
        },
        "catchBody": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 21,
              "line": 4,
              "raw": "b",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a
catch err
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "try
  a
catch err
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-with-catch-single-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "try a catch b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 5,
          "end": 5,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 4,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": Identifier {
          "column": 13,
          "data": "b",
          "end": 13,
          "line": 1,
          "raw": "b",
          "start": 12,
          "type": "Identifier",
        },
        "catchBody": null,
        "column": 1,
        "end": 13,
        "finallyBody": null,
        "line": 1,
        "raw": "try a catch b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "try a catch b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-with-catch-without-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 4,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a
catch
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "try
  a
catch
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-without-catch-or-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "try
  a",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 7,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "try
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-without-catch-single-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "try a",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 5,
          "end": 5,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 4,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 5,
        "finallyBody": null,
        "line": 1,
        "raw": "try a",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "try a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: try-without-catch-with-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "try
  a
finally
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 19,
        "finallyBody": Block {
          "column": 3,
          "end": 19,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 18,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 19,
              "line": 4,
              "raw": "b",
              "start": 18,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "line": 1,
        "raw": "try
  a
finally
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "try
  a
finally
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: typeof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "typeof a",
    "start": 0,
    "statements": Array [
      TypeofOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "typeof a",
        "start": 0,
        "type": "TypeofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "typeof a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unary-bitwise-negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "~a",
    "start": 0,
    "statements": Array [
      BitNotOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "~a",
        "start": 0,
        "type": "BitNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "~a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unary-minus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "-1",
    "start": 0,
    "statements": Array [
      UnaryNegateOp {
        "column": 1,
        "end": 2,
        "expression": Int {
          "column": 2,
          "data": 1,
          "end": 2,
          "line": 1,
          "raw": "1",
          "start": 1,
          "type": "Int",
        },
        "line": 1,
        "raw": "-1",
        "start": 0,
        "type": "UnaryNegateOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "-1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unary-plus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "+1",
    "start": 0,
    "statements": Array [
      UnaryPlusOp {
        "column": 1,
        "end": 2,
        "expression": Int {
          "column": 2,
          "data": 1,
          "end": 2,
          "line": 1,
          "raw": "1",
          "start": 1,
          "type": "Int",
        },
        "line": 1,
        "raw": "+1",
        "start": 0,
        "type": "UnaryPlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "+1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: undefined 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "undefined",
    "start": 0,
    "statements": Array [
      Undefined {
        "column": 1,
        "end": 9,
        "line": 1,
        "raw": "undefined",
        "start": 0,
        "type": "Undefined",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "undefined",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unless-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "unless a in b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 8,
          "end": 13,
          "isNot": false,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a in b",
          "right": Identifier {
            "column": 13,
            "data": "b",
            "end": 13,
            "line": 1,
            "raw": "b",
            "start": 12,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": true,
        "line": 1,
        "raw": "unless a in b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "unless a in b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unless-not-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "unless a not in b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 8,
          "end": 17,
          "isNot": true,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not in b",
          "right": Identifier {
            "column": 17,
            "data": "b",
            "end": 17,
            "line": 1,
            "raw": "b",
            "start": 16,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 21,
              "line": 2,
              "raw": "c",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 21,
        "isUnless": true,
        "line": 1,
        "raw": "unless a not in b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "unless a not in b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: unless-not-instanceof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "unless a not instanceof b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InstanceofOp {
          "column": 8,
          "end": 25,
          "isNot": true,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not instanceof b",
          "right": Identifier {
            "column": 25,
            "data": "b",
            "end": 25,
            "line": 1,
            "raw": "b",
            "start": 24,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InstanceofOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 29,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 28,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 29,
              "line": 2,
              "raw": "c",
              "start": 28,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 29,
        "isUnless": true,
        "line": 1,
        "raw": "unless a not instanceof b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "unless a not instanceof b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: until 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "until a
  b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 11,
              "line": 2,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 11,
        "guard": null,
        "isUntil": true,
        "line": 1,
        "raw": "until a
  b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "until a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: while-on-multiple-lines 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "while a
  b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 11,
              "line": 2,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 11,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "while a
  b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "while a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: while-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a while b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 9,
          "data": "b",
          "end": 9,
          "line": 1,
          "raw": "b",
          "start": 8,
          "type": "Identifier",
        },
        "end": 9,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "a while b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a while b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: while-with-guard 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "while a when b
  c",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 18,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 18,
              "line": 2,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 18,
        "guard": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "isUntil": false,
        "line": 1,
        "raw": "while a when b
  c",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "while a when b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: yield 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "-> yield 1",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 10,
          "inline": true,
          "line": 1,
          "raw": "yield 1",
          "start": 3,
          "statements": Array [
            Yield {
              "column": 4,
              "end": 10,
              "expression": Int {
                "column": 10,
                "data": 1,
                "end": 10,
                "line": 1,
                "raw": "1",
                "start": 9,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield 1",
              "start": 3,
              "type": "Yield",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield 1",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "-> yield 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: yield-from 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "-> yield from fn()",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 18,
          "inline": true,
          "line": 1,
          "raw": "yield from fn()",
          "start": 3,
          "statements": Array [
            YieldFrom {
              "column": 4,
              "end": 18,
              "expression": FunctionApplication {
                "arguments": Array [],
                "column": 15,
                "end": 18,
                "function": Identifier {
                  "column": 15,
                  "data": "fn",
                  "end": 16,
                  "line": 1,
                  "raw": "fn",
                  "start": 14,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "fn()",
                "start": 14,
                "type": "FunctionApplication",
              },
              "line": 1,
              "raw": "yield from fn()",
              "start": 3,
              "type": "YieldFrom",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 18,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield from fn()",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "-> yield from fn()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: yield-return 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "-> yield return 3",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 17,
          "inline": true,
          "line": 1,
          "raw": "yield return 3",
          "start": 3,
          "statements": Array [
            YieldReturn {
              "column": 4,
              "end": 17,
              "expression": Int {
                "column": 17,
                "data": 3,
                "end": 17,
                "line": 1,
                "raw": "3",
                "start": 16,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield return 3",
              "start": 3,
              "type": "YieldReturn",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield return 3",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "-> yield return 3
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS1: yield-return-empty 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "-> yield return",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 15,
          "inline": true,
          "line": 1,
          "raw": "yield return",
          "start": 3,
          "statements": Array [
            YieldReturn {
              "column": 4,
              "end": 15,
              "expression": null,
              "line": 1,
              "raw": "yield return",
              "start": 3,
              "type": "YieldReturn",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield return",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "-> yield return
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: addition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 + 4",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 + 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 + 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: array-with-multiple-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "[1, 2, 3]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 9,
        "line": 1,
        "members": Array [
          Int {
            "column": 2,
            "data": 1,
            "end": 2,
            "line": 1,
            "raw": "1",
            "start": 1,
            "type": "Int",
          },
          Int {
            "column": 5,
            "data": 2,
            "end": 5,
            "line": 1,
            "raw": "2",
            "start": 4,
            "type": "Int",
          },
          Int {
            "column": 8,
            "data": 3,
            "end": 8,
            "line": 1,
            "raw": "3",
            "start": 7,
            "type": "Int",
          },
        ],
        "raw": "[1, 2, 3]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "[1, 2, 3]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: array-with-single-member 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "[1]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 3,
        "line": 1,
        "members": Array [
          Int {
            "column": 2,
            "data": 1,
            "end": 2,
            "line": 1,
            "raw": "1",
            "start": 1,
            "type": "Int",
          },
        ],
        "raw": "[1]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "[1]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: assign 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a = 1",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 5,
        "expression": Int {
          "column": 5,
          "data": 1,
          "end": 5,
          "line": 1,
          "raw": "1",
          "start": 4,
          "type": "Int",
        },
        "line": 1,
        "raw": "a = 1",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a = 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: await 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "f = ->
  await sleep()",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 22,
        "expression": AsyncFunction {
          "body": Block {
            "column": 3,
            "end": 22,
            "inline": false,
            "line": 2,
            "raw": "await sleep()",
            "start": 9,
            "statements": Array [
              Await {
                "column": 3,
                "end": 22,
                "expression": FunctionApplication {
                  "arguments": Array [],
                  "column": 9,
                  "end": 22,
                  "function": Identifier {
                    "column": 9,
                    "data": "sleep",
                    "end": 20,
                    "line": 2,
                    "raw": "sleep",
                    "start": 15,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "sleep()",
                  "start": 15,
                  "type": "FunctionApplication",
                },
                "line": 2,
                "raw": "await sleep()",
                "start": 9,
                "type": "Await",
              },
            ],
            "type": "Block",
          },
          "column": 5,
          "end": 22,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  await sleep()",
          "start": 4,
          "type": "AsyncFunction",
        },
        "line": 1,
        "raw": "f = ->
  await sleep()",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 23,
  "line": 1,
  "raw": "f = ->
  await sleep()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: await-bound-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "f = =>
  await sleep()",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 22,
        "expression": BoundAsyncFunction {
          "body": Block {
            "column": 3,
            "end": 22,
            "inline": false,
            "line": 2,
            "raw": "await sleep()",
            "start": 9,
            "statements": Array [
              Await {
                "column": 3,
                "end": 22,
                "expression": FunctionApplication {
                  "arguments": Array [],
                  "column": 9,
                  "end": 22,
                  "function": Identifier {
                    "column": 9,
                    "data": "sleep",
                    "end": 20,
                    "line": 2,
                    "raw": "sleep",
                    "start": 15,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "sleep()",
                  "start": 15,
                  "type": "FunctionApplication",
                },
                "line": 2,
                "raw": "await sleep()",
                "start": 9,
                "type": "Await",
              },
            ],
            "type": "Block",
          },
          "column": 5,
          "end": 22,
          "line": 1,
          "parameters": Array [],
          "raw": "=>
  await sleep()",
          "start": 4,
          "type": "BoundAsyncFunction",
        },
        "line": 1,
        "raw": "f = =>
  await sleep()",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 23,
  "line": 1,
  "raw": "f = =>
  await sleep()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: await-return 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "f = ->
  await return",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 21,
        "expression": AsyncFunction {
          "body": Block {
            "column": 3,
            "end": 21,
            "inline": false,
            "line": 2,
            "raw": "await return",
            "start": 9,
            "statements": Array [
              AwaitReturn {
                "column": 3,
                "end": 21,
                "expression": null,
                "line": 2,
                "raw": "await return",
                "start": 9,
                "type": "AwaitReturn",
              },
            ],
            "type": "Block",
          },
          "column": 5,
          "end": 21,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  await return",
          "start": 4,
          "type": "AsyncFunction",
        },
        "line": 1,
        "raw": "f = ->
  await return",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "f = ->
  await return
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: backticks-with-string-inside 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "\`import foo from 'foo'\`",
    "start": 0,
    "statements": Array [
      JavaScript {
        "column": 1,
        "data": "import foo from 'foo'",
        "end": 23,
        "line": 1,
        "raw": "\`import foo from 'foo'\`",
        "start": 0,
        "type": "JavaScript",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "\`import foo from 'foo'\`
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bare-yield 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "f = ->
  yield",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 14,
        "expression": GeneratorFunction {
          "body": Block {
            "column": 3,
            "end": 14,
            "inline": false,
            "line": 2,
            "raw": "yield",
            "start": 9,
            "statements": Array [
              Yield {
                "column": 3,
                "end": 14,
                "expression": null,
                "line": 2,
                "raw": "yield",
                "start": 9,
                "type": "Yield",
              },
            ],
            "type": "Block",
          },
          "column": 5,
          "end": 14,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  yield",
          "start": 4,
          "type": "GeneratorFunction",
        },
        "line": 1,
        "raw": "f = ->
  yield",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "f = ->
  yield
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitshift-left 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a << b",
    "start": 0,
    "statements": Array [
      LeftShiftOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a << b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LeftShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a << b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitshift-right 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a >> b",
    "start": 0,
    "statements": Array [
      SignedRightShiftOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >> b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "SignedRightShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a >> b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitshift-right-unsigned 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a >>> b",
    "start": 0,
    "statements": Array [
      UnsignedRightShiftOp {
        "column": 1,
        "end": 7,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >>> b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "UnsignedRightShiftOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a >>> b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitwise-and 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a & b",
    "start": 0,
    "statements": Array [
      BitAndOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a & b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a & b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitwise-or 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a | b",
    "start": 0,
    "statements": Array [
      BitOrOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a | b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a | b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bitwise-xor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a ^ b",
    "start": 0,
    "statements": Array [
      BitXorOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ^ b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "BitXorOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a ^ b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "###
# hey there
###
a",
    "start": 0,
    "statements": Array [
      Identifier {
        "column": 1,
        "data": "a",
        "end": 21,
        "line": 4,
        "raw": "a",
        "start": 20,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "###
# hey there
###
a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: block-comment-in-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "->
  ###
  a
  ###",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 2,
        "line": 1,
        "parameters": Array [],
        "raw": "->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "->
  ###
  a
  ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: block-comment-only-file 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "###
# hey there
###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bound-function-with-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "(a, b) =>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "raw": "(a, b) =>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a, b) =>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: bound-generator-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "=> yield 3",
    "start": 0,
    "statements": Array [
      BoundGeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 10,
          "inline": true,
          "line": 1,
          "raw": "yield 3",
          "start": 3,
          "statements": Array [
            Yield {
              "column": 4,
              "end": 10,
              "expression": Int {
                "column": 10,
                "data": 3,
                "end": 10,
                "line": 1,
                "raw": "3",
                "start": 9,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield 3",
              "start": 3,
              "type": "Yield",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [],
        "raw": "=> yield 3",
        "start": 0,
        "type": "BoundGeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "=> yield 3
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: break 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "loop
  break",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 12,
          "inline": false,
          "line": 2,
          "raw": "break",
          "start": 7,
          "statements": Array [
            Break {
              "column": 3,
              "end": 12,
              "line": 2,
              "raw": "break",
              "start": 7,
              "type": "Break",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "line": 1,
        "raw": "loop
  break",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "loop
  break
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: call-dynamic-member-access-result 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a[b]()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 6,
        "function": DynamicMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "indexingExpr": Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a[b]",
          "start": 0,
          "type": "DynamicMemberAccessOp",
        },
        "line": 1,
        "raw": "a[b]()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a[b]()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chain-calls-with-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 56,
    "inline": false,
    "line": 1,
    "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 15,
            "end": 47,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 16,
                "data": "MyCtrl",
                "end": 46,
                "line": 3,
                "raw": "MyCtrl",
                "start": 40,
                "type": "Quasi",
              },
            ],
            "raw": "'MyCtrl'",
            "start": 39,
            "type": "String",
          },
          Identifier {
            "column": 25,
            "data": "MyCtrl",
            "end": 55,
            "line": 3,
            "raw": "MyCtrl",
            "start": 49,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "end": 56,
        "function": MemberAccessOp {
          "column": 1,
          "end": 38,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 11,
                "end": 23,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 12,
                    "data": "app",
                    "end": 22,
                    "line": 2,
                    "raw": "app",
                    "start": 19,
                    "type": "Quasi",
                  },
                ],
                "raw": "'app'",
                "start": 18,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 24,
            "function": MemberAccessOp {
              "column": 1,
              "end": 17,
              "expression": Identifier {
                "column": 1,
                "data": "angular",
                "end": 7,
                "line": 1,
                "raw": "angular",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 4,
                "data": "module",
                "end": 17,
                "line": 2,
                "raw": "module",
                "start": 11,
                "type": "Identifier",
              },
              "raw": "angular
  .module",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "angular
  .module('app')",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 4,
            "data": "controller",
            "end": 38,
            "line": 3,
            "raw": "controller",
            "start": 28,
            "type": "Identifier",
          },
          "raw": "angular
  .module('app')
  .controller",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 56,
  "line": 1,
  "raw": "angular
  .module('app')
  .controller('MyCtrl', MyCtrl)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chain-calls-without-indent 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 40,
    "inline": false,
    "line": 1,
    "raw": "$stateProvider
.state 'foo'
.state 'bar'",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 8,
            "end": 40,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 9,
                "data": "bar",
                "end": 39,
                "line": 3,
                "raw": "bar",
                "start": 36,
                "type": "Quasi",
              },
            ],
            "raw": "'bar'",
            "start": 35,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 40,
        "function": MemberAccessOp {
          "column": 1,
          "end": 34,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 8,
                "end": 27,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 9,
                    "data": "foo",
                    "end": 26,
                    "line": 2,
                    "raw": "foo",
                    "start": 23,
                    "type": "Quasi",
                  },
                ],
                "raw": "'foo'",
                "start": 22,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 27,
            "function": MemberAccessOp {
              "column": 1,
              "end": 21,
              "expression": Identifier {
                "column": 1,
                "data": "$stateProvider",
                "end": 14,
                "line": 1,
                "raw": "$stateProvider",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 2,
                "data": "state",
                "end": 21,
                "line": 2,
                "raw": "state",
                "start": 16,
                "type": "Identifier",
              },
              "raw": "$stateProvider
.state",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "$stateProvider
.state 'foo'",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 2,
            "data": "state",
            "end": 34,
            "line": 3,
            "raw": "state",
            "start": 29,
            "type": "Identifier",
          },
          "raw": "$stateProvider
.state 'foo'
.state",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "$stateProvider
.state 'foo'
.state 'bar'",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "$stateProvider
.state 'foo'
.state 'bar'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chain-calls-without-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 40,
    "inline": false,
    "line": 1,
    "raw": "$stateProvider
.state 'foo'
.state 'bar'",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 8,
            "end": 40,
            "expressions": Array [],
            "line": 3,
            "quasis": Array [
              Quasi {
                "column": 9,
                "data": "bar",
                "end": 39,
                "line": 3,
                "raw": "bar",
                "start": 36,
                "type": "Quasi",
              },
            ],
            "raw": "'bar'",
            "start": 35,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 40,
        "function": MemberAccessOp {
          "column": 1,
          "end": 34,
          "expression": FunctionApplication {
            "arguments": Array [
              String {
                "column": 8,
                "end": 27,
                "expressions": Array [],
                "line": 2,
                "quasis": Array [
                  Quasi {
                    "column": 9,
                    "data": "foo",
                    "end": 26,
                    "line": 2,
                    "raw": "foo",
                    "start": 23,
                    "type": "Quasi",
                  },
                ],
                "raw": "'foo'",
                "start": 22,
                "type": "String",
              },
            ],
            "column": 1,
            "end": 27,
            "function": MemberAccessOp {
              "column": 1,
              "end": 21,
              "expression": Identifier {
                "column": 1,
                "data": "$stateProvider",
                "end": 14,
                "line": 1,
                "raw": "$stateProvider",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 2,
                "data": "state",
                "end": 21,
                "line": 2,
                "raw": "state",
                "start": 16,
                "type": "Identifier",
              },
              "raw": "$stateProvider
.state",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "$stateProvider
.state 'foo'",
            "start": 0,
            "type": "FunctionApplication",
          },
          "line": 1,
          "member": Identifier {
            "column": 2,
            "data": "state",
            "end": 34,
            "line": 3,
            "raw": "state",
            "start": 29,
            "type": "Identifier",
          },
          "raw": "$stateProvider
.state 'foo'
.state",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "$stateProvider
.state 'foo'
.state 'bar'",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "$stateProvider
.state 'foo'
.state 'bar'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-equals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "a == b == c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 11,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a == b == c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a == b == c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-extended 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a < b < c < d < e",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 17,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
          Identifier {
            "column": 13,
            "data": "d",
            "end": 13,
            "line": 1,
            "raw": "d",
            "start": 12,
            "type": "Identifier",
          },
          Identifier {
            "column": 17,
            "data": "e",
            "end": 17,
            "line": 1,
            "raw": "e",
            "start": 16,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 11,
              "start": 10,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 15,
              "start": 14,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b < c < d < e",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "a < b < c < d < e",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-greater-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a > b > c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a > b > c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a > b > c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-less-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a < b < c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b < c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a < b < c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-mixed 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a < b > c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 9,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 3,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": ">",
            "token": SourceToken {
              "end": 7,
              "start": 6,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a < b > c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a < b > c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-nested 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "(a == b == c) == d == e",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 23,
        "line": 1,
        "operands": Array [
          ChainedComparisonOp {
            "column": 2,
            "end": 12,
            "line": 1,
            "operands": Array [
              Identifier {
                "column": 2,
                "data": "a",
                "end": 2,
                "line": 1,
                "raw": "a",
                "start": 1,
                "type": "Identifier",
              },
              Identifier {
                "column": 7,
                "data": "b",
                "end": 7,
                "line": 1,
                "raw": "b",
                "start": 6,
                "type": "Identifier",
              },
              Identifier {
                "column": 12,
                "data": "c",
                "end": 12,
                "line": 1,
                "raw": "c",
                "start": 11,
                "type": "Identifier",
              },
            ],
            "operators": Array [
              OperatorInfo {
                "operator": "==",
                "token": SourceToken {
                  "end": 5,
                  "start": 3,
                  "type": "OPERATOR",
                },
              },
              OperatorInfo {
                "operator": "==",
                "token": SourceToken {
                  "end": 10,
                  "start": 8,
                  "type": "OPERATOR",
                },
              },
            ],
            "raw": "a == b == c",
            "start": 1,
            "type": "ChainedComparisonOp",
          },
          Identifier {
            "column": 18,
            "data": "d",
            "end": 18,
            "line": 1,
            "raw": "d",
            "start": 17,
            "type": "Identifier",
          },
          Identifier {
            "column": 23,
            "data": "e",
            "end": 23,
            "line": 1,
            "raw": "e",
            "start": 22,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 16,
              "start": 14,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 21,
              "start": 19,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "(a == b == c) == d == e",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "(a == b == c) == d == e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-not-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "a != b != c",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 11,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "!=",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "!=",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a != b != c",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a != b != c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-three 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "a == b == c == d",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 16,
        "line": 1,
        "operands": Array [
          Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
          Identifier {
            "column": 16,
            "data": "d",
            "end": 16,
            "line": 1,
            "raw": "d",
            "start": 15,
            "type": "Identifier",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 4,
              "start": 2,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 9,
              "start": 7,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "==",
            "token": SourceToken {
              "end": 14,
              "start": 12,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "a == b == c == d",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "a == b == c == d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-with-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "0<++c<2",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 7,
        "line": 1,
        "operands": Array [
          Int {
            "column": 1,
            "data": 0,
            "end": 1,
            "line": 1,
            "raw": "0",
            "start": 0,
            "type": "Int",
          },
          PreIncrementOp {
            "column": 3,
            "end": 5,
            "expression": Identifier {
              "column": 5,
              "data": "c",
              "end": 5,
              "line": 1,
              "raw": "c",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "++c",
            "start": 2,
            "type": "PreIncrementOp",
          },
          Int {
            "column": 7,
            "data": 2,
            "end": 7,
            "line": 1,
            "raw": "2",
            "start": 6,
            "type": "Int",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 2,
              "start": 1,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 6,
              "start": 5,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "0<++c<2",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "0<++c<2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-with-other-operators 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "Math.PI/2 < angle < 3*Math.PI/2",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 31,
        "line": 1,
        "operands": Array [
          DivideOp {
            "column": 1,
            "end": 9,
            "left": MemberAccessOp {
              "column": 1,
              "end": 7,
              "expression": Identifier {
                "column": 1,
                "data": "Math",
                "end": 4,
                "line": 1,
                "raw": "Math",
                "start": 0,
                "type": "Identifier",
              },
              "line": 1,
              "member": Identifier {
                "column": 6,
                "data": "PI",
                "end": 7,
                "line": 1,
                "raw": "PI",
                "start": 5,
                "type": "Identifier",
              },
              "raw": "Math.PI",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "Math.PI/2",
            "right": Int {
              "column": 9,
              "data": 2,
              "end": 9,
              "line": 1,
              "raw": "2",
              "start": 8,
              "type": "Int",
            },
            "start": 0,
            "type": "DivideOp",
          },
          Identifier {
            "column": 13,
            "data": "angle",
            "end": 17,
            "line": 1,
            "raw": "angle",
            "start": 12,
            "type": "Identifier",
          },
          DivideOp {
            "column": 21,
            "end": 31,
            "left": MultiplyOp {
              "column": 21,
              "end": 29,
              "left": Int {
                "column": 21,
                "data": 3,
                "end": 21,
                "line": 1,
                "raw": "3",
                "start": 20,
                "type": "Int",
              },
              "line": 1,
              "raw": "3*Math.PI",
              "right": MemberAccessOp {
                "column": 23,
                "end": 29,
                "expression": Identifier {
                  "column": 23,
                  "data": "Math",
                  "end": 26,
                  "line": 1,
                  "raw": "Math",
                  "start": 22,
                  "type": "Identifier",
                },
                "line": 1,
                "member": Identifier {
                  "column": 28,
                  "data": "PI",
                  "end": 29,
                  "line": 1,
                  "raw": "PI",
                  "start": 27,
                  "type": "Identifier",
                },
                "raw": "Math.PI",
                "start": 22,
                "type": "MemberAccessOp",
              },
              "start": 20,
              "type": "MultiplyOp",
            },
            "line": 1,
            "raw": "3*Math.PI/2",
            "right": Int {
              "column": 31,
              "data": 2,
              "end": 31,
              "line": 1,
              "raw": "2",
              "start": 30,
              "type": "Int",
            },
            "start": 20,
            "type": "DivideOp",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 11,
              "start": 10,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 19,
              "start": 18,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "Math.PI/2 < angle < 3*Math.PI/2",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 32,
  "line": 1,
  "raw": "Math.PI/2 < angle < 3*Math.PI/2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-comparison-with-unary-negate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "-1 < 0 < 1",
    "start": 0,
    "statements": Array [
      ChainedComparisonOp {
        "column": 1,
        "end": 10,
        "line": 1,
        "operands": Array [
          UnaryNegateOp {
            "column": 1,
            "end": 2,
            "expression": Int {
              "column": 2,
              "data": 1,
              "end": 2,
              "line": 1,
              "raw": "1",
              "start": 1,
              "type": "Int",
            },
            "line": 1,
            "raw": "-1",
            "start": 0,
            "type": "UnaryNegateOp",
          },
          Int {
            "column": 6,
            "data": 0,
            "end": 6,
            "line": 1,
            "raw": "0",
            "start": 5,
            "type": "Int",
          },
          Int {
            "column": 10,
            "data": 1,
            "end": 10,
            "line": 1,
            "raw": "1",
            "start": 9,
            "type": "Int",
          },
        ],
        "operators": Array [
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 4,
              "start": 3,
              "type": "OPERATOR",
            },
          },
          OperatorInfo {
            "operator": "<",
            "token": SourceToken {
              "end": 8,
              "start": 7,
              "type": "OPERATOR",
            },
          },
        ],
        "raw": "-1 < 0 < 1",
        "start": 0,
        "type": "ChainedComparisonOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "-1 < 0 < 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: chained-prototype-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 37,
    "inline": false,
    "line": 1,
    "raw": "Object::toString.constructor::valueOf",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 37,
        "expression": ProtoMemberAccessOp {
          "column": 1,
          "end": 30,
          "expression": MemberAccessOp {
            "column": 1,
            "end": 28,
            "expression": MemberAccessOp {
              "column": 1,
              "end": 16,
              "expression": ProtoMemberAccessOp {
                "column": 1,
                "end": 8,
                "expression": Identifier {
                  "column": 1,
                  "data": "Object",
                  "end": 6,
                  "line": 1,
                  "raw": "Object",
                  "start": 0,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "Object::",
                "start": 0,
                "type": "ProtoMemberAccessOp",
              },
              "line": 1,
              "member": Identifier {
                "column": 9,
                "data": "toString",
                "end": 16,
                "line": 1,
                "raw": "toString",
                "start": 8,
                "type": "Identifier",
              },
              "raw": "Object::toString",
              "start": 0,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "member": Identifier {
              "column": 18,
              "data": "constructor",
              "end": 28,
              "line": 1,
              "raw": "constructor",
              "start": 17,
              "type": "Identifier",
            },
            "raw": "Object::toString.constructor",
            "start": 0,
            "type": "MemberAccessOp",
          },
          "line": 1,
          "raw": "Object::toString.constructor::",
          "start": 0,
          "type": "ProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 31,
          "data": "valueOf",
          "end": 37,
          "line": 1,
          "raw": "valueOf",
          "start": 30,
          "type": "Identifier",
        },
        "raw": "Object::toString.constructor::valueOf",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 38,
  "line": 1,
  "raw": "Object::toString.constructor::valueOf
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-member-with-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 39,
    "inline": false,
    "line": 1,
    "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 39,
          "inline": false,
          "line": 5,
          "raw": "foo: ->",
          "start": 32,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "foo",
                "end": 35,
                "line": 5,
                "raw": "foo",
                "start": 32,
                "type": "Identifier",
              },
              "column": 3,
              "end": 39,
              "expression": Function {
                "body": null,
                "column": 8,
                "end": 39,
                "line": 5,
                "parameters": Array [],
                "raw": "->",
                "start": 37,
                "type": "Function",
              },
              "line": 5,
              "raw": "foo: ->",
              "start": 32,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 39,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "Foo",
          "end": 9,
          "line": 1,
          "raw": "Foo",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class Foo
  ###
  # foo
  ###
  foo: ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-body-statements 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "class A
  a = 1
  b: a",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 22,
          "inline": false,
          "line": 2,
          "raw": "a = 1
  b: a",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 15,
              "expression": Int {
                "column": 7,
                "data": 1,
                "end": 15,
                "line": 2,
                "raw": "1",
                "start": 14,
                "type": "Int",
              },
              "line": 2,
              "raw": "a = 1",
              "start": 10,
              "type": "AssignOp",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 19,
                "line": 3,
                "raw": "b",
                "start": 18,
                "type": "Identifier",
              },
              "column": 3,
              "end": 22,
              "expression": Identifier {
                "column": 6,
                "data": "a",
                "end": 22,
                "line": 3,
                "raw": "a",
                "start": 21,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "b: a",
              "start": 18,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 22,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a = 1
  b: a",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "class A
  a = 1
  b: a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-bound-methods 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A
  a: => b",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "a: => b",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 17,
              "expression": BoundFunction {
                "body": Block {
                  "column": 9,
                  "end": 17,
                  "inline": true,
                  "line": 2,
                  "raw": "b",
                  "start": 16,
                  "statements": Array [
                    Identifier {
                      "column": 9,
                      "data": "b",
                      "end": 17,
                      "line": 2,
                      "raw": "b",
                      "start": 16,
                      "type": "Identifier",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 17,
                "line": 2,
                "parameters": Array [],
                "raw": "=> b",
                "start": 13,
                "type": "BoundFunction",
              },
              "line": 2,
              "raw": "a: => b",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [
          ClassProtoAssignOp {
            "assignee": Identifier {
              "column": 3,
              "data": "a",
              "end": 11,
              "line": 2,
              "raw": "a",
              "start": 10,
              "type": "Identifier",
            },
            "column": 3,
            "end": 17,
            "expression": BoundFunction {
              "body": Block {
                "column": 9,
                "end": 17,
                "inline": true,
                "line": 2,
                "raw": "b",
                "start": 16,
                "statements": Array [
                  Identifier {
                    "column": 9,
                    "data": "b",
                    "end": 17,
                    "line": 2,
                    "raw": "b",
                    "start": 16,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "end": 17,
              "line": 2,
              "parameters": Array [],
              "raw": "=> b",
              "start": 13,
              "type": "BoundFunction",
            },
            "line": 2,
            "raw": "a: => b",
            "start": 10,
            "type": "ClassProtoAssignOp",
          },
        ],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a: => b",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  a: => b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-conditional-bound-method 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: => d",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 26,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: => d",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 26,
                "inline": false,
                "line": 3,
                "raw": "c: => d",
                "start": 19,
                "statements": Array [
                  ClassProtoAssignOp {
                    "assignee": Identifier {
                      "column": 5,
                      "data": "c",
                      "end": 20,
                      "line": 3,
                      "raw": "c",
                      "start": 19,
                      "type": "Identifier",
                    },
                    "column": 5,
                    "end": 26,
                    "expression": BoundFunction {
                      "body": Block {
                        "column": 11,
                        "end": 26,
                        "inline": true,
                        "line": 3,
                        "raw": "d",
                        "start": 25,
                        "statements": Array [
                          Identifier {
                            "column": 11,
                            "data": "d",
                            "end": 26,
                            "line": 3,
                            "raw": "d",
                            "start": 25,
                            "type": "Identifier",
                          },
                        ],
                        "type": "Block",
                      },
                      "column": 8,
                      "end": 26,
                      "line": 3,
                      "parameters": Array [],
                      "raw": "=> d",
                      "start": 22,
                      "type": "BoundFunction",
                    },
                    "line": 3,
                    "raw": "c: => d",
                    "start": 19,
                    "type": "ClassProtoAssignOp",
                  },
                ],
                "type": "Block",
              },
              "end": 26,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: => d",
              "start": 10,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [
          ClassProtoAssignOp {
            "assignee": Identifier {
              "column": 5,
              "data": "c",
              "end": 20,
              "line": 3,
              "raw": "c",
              "start": 19,
              "type": "Identifier",
            },
            "column": 5,
            "end": 26,
            "expression": BoundFunction {
              "body": Block {
                "column": 11,
                "end": 26,
                "inline": true,
                "line": 3,
                "raw": "d",
                "start": 25,
                "statements": Array [
                  Identifier {
                    "column": 11,
                    "data": "d",
                    "end": 26,
                    "line": 3,
                    "raw": "d",
                    "start": 25,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 8,
              "end": 26,
              "line": 3,
              "parameters": Array [],
              "raw": "=> d",
              "start": 22,
              "type": "BoundFunction",
            },
            "line": 3,
            "raw": "c: => d",
            "start": 19,
            "type": "ClassProtoAssignOp",
          },
        ],
        "column": 1,
        "ctor": null,
        "end": 26,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: => d",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "class A
  if b
    c: => d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-conditional-method 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: -> d",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 26,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: -> d",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 26,
                "inline": false,
                "line": 3,
                "raw": "c: -> d",
                "start": 19,
                "statements": Array [
                  ClassProtoAssignOp {
                    "assignee": Identifier {
                      "column": 5,
                      "data": "c",
                      "end": 20,
                      "line": 3,
                      "raw": "c",
                      "start": 19,
                      "type": "Identifier",
                    },
                    "column": 5,
                    "end": 26,
                    "expression": Function {
                      "body": Block {
                        "column": 11,
                        "end": 26,
                        "inline": true,
                        "line": 3,
                        "raw": "d",
                        "start": 25,
                        "statements": Array [
                          Identifier {
                            "column": 11,
                            "data": "d",
                            "end": 26,
                            "line": 3,
                            "raw": "d",
                            "start": 25,
                            "type": "Identifier",
                          },
                        ],
                        "type": "Block",
                      },
                      "column": 8,
                      "end": 26,
                      "line": 3,
                      "parameters": Array [],
                      "raw": "-> d",
                      "start": 22,
                      "type": "Function",
                    },
                    "line": 3,
                    "raw": "c: -> d",
                    "start": 19,
                    "type": "ClassProtoAssignOp",
                  },
                ],
                "type": "Block",
              },
              "end": 26,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: -> d",
              "start": 10,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 26,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: -> d",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "class A
  if b
    c: -> d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-constructor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "class Point
  constructor: (@x, @y) ->",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 38,
          "inline": false,
          "line": 2,
          "raw": "constructor: (@x, @y) ->",
          "start": 14,
          "statements": Array [
            Constructor {
              "assignee": Identifier {
                "column": 3,
                "data": "constructor",
                "end": 25,
                "line": 2,
                "raw": "constructor",
                "start": 14,
                "type": "Identifier",
              },
              "column": 3,
              "end": 38,
              "expression": Function {
                "body": null,
                "column": 16,
                "end": 38,
                "line": 2,
                "parameters": Array [
                  MemberAccessOp {
                    "column": 17,
                    "end": 30,
                    "expression": This {
                      "column": 17,
                      "end": 29,
                      "line": 2,
                      "raw": "@",
                      "start": 28,
                      "type": "This",
                    },
                    "line": 2,
                    "member": Identifier {
                      "column": 18,
                      "data": "x",
                      "end": 30,
                      "line": 2,
                      "raw": "x",
                      "start": 29,
                      "type": "Identifier",
                    },
                    "raw": "@x",
                    "start": 28,
                    "type": "MemberAccessOp",
                  },
                  MemberAccessOp {
                    "column": 21,
                    "end": 34,
                    "expression": This {
                      "column": 21,
                      "end": 33,
                      "line": 2,
                      "raw": "@",
                      "start": 32,
                      "type": "This",
                    },
                    "line": 2,
                    "member": Identifier {
                      "column": 22,
                      "data": "y",
                      "end": 34,
                      "line": 2,
                      "raw": "y",
                      "start": 33,
                      "type": "Identifier",
                    },
                    "raw": "@y",
                    "start": 32,
                    "type": "MemberAccessOp",
                  },
                ],
                "raw": "(@x, @y) ->",
                "start": 27,
                "type": "Function",
              },
              "line": 2,
              "raw": "constructor: (@x, @y) ->",
              "start": 14,
              "type": "Constructor",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": Constructor {
          "assignee": Identifier {
            "column": 3,
            "data": "constructor",
            "end": 25,
            "line": 2,
            "raw": "constructor",
            "start": 14,
            "type": "Identifier",
          },
          "column": 3,
          "end": 38,
          "expression": Function {
            "body": null,
            "column": 16,
            "end": 38,
            "line": 2,
            "parameters": Array [
              MemberAccessOp {
                "column": 17,
                "end": 30,
                "expression": This {
                  "column": 17,
                  "end": 29,
                  "line": 2,
                  "raw": "@",
                  "start": 28,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 18,
                  "data": "x",
                  "end": 30,
                  "line": 2,
                  "raw": "x",
                  "start": 29,
                  "type": "Identifier",
                },
                "raw": "@x",
                "start": 28,
                "type": "MemberAccessOp",
              },
              MemberAccessOp {
                "column": 21,
                "end": 34,
                "expression": This {
                  "column": 21,
                  "end": 33,
                  "line": 2,
                  "raw": "@",
                  "start": 32,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 22,
                  "data": "y",
                  "end": 34,
                  "line": 2,
                  "raw": "y",
                  "start": 33,
                  "type": "Identifier",
                },
                "raw": "@y",
                "start": 32,
                "type": "MemberAccessOp",
              },
            ],
            "raw": "(@x, @y) ->",
            "start": 27,
            "type": "Function",
          },
          "line": 2,
          "raw": "constructor: (@x, @y) ->",
          "start": 14,
          "type": "Constructor",
        },
        "end": 38,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "Point",
          "end": 11,
          "line": 1,
          "raw": "Point",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "Point",
          "end": 11,
          "line": 1,
          "raw": "Point",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class Point
  constructor: (@x, @y) ->",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class Point
  constructor: (@x, @y) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-explicit-object-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "class A
  {b: c}",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "{b: c}",
          "start": 10,
          "statements": Array [
            ObjectInitialiser {
              "column": 3,
              "end": 16,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 4,
                  "end": 15,
                  "expression": Identifier {
                    "column": 7,
                    "data": "c",
                    "end": 15,
                    "line": 2,
                    "raw": "c",
                    "start": 14,
                    "type": "Identifier",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 4,
                    "data": "b",
                    "end": 12,
                    "line": 2,
                    "raw": "b",
                    "start": 11,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: c",
                  "start": 11,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "{b: c}",
              "start": 10,
              "type": "ObjectInitialiser",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 16,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  {b: c}",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  {b: c}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-implicit-object-literal-within-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "class A
  b = ->
    c: d
    return 1",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 38,
          "inline": false,
          "line": 2,
          "raw": "b = ->
    c: d
    return 1",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 38,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 38,
                  "inline": false,
                  "line": 3,
                  "raw": "c: d
    return 1",
                  "start": 21,
                  "statements": Array [
                    ObjectInitialiser {
                      "column": 5,
                      "end": 25,
                      "line": 3,
                      "members": Array [
                        ObjectInitialiserMember {
                          "column": 5,
                          "end": 25,
                          "expression": Identifier {
                            "column": 8,
                            "data": "d",
                            "end": 25,
                            "line": 3,
                            "raw": "d",
                            "start": 24,
                            "type": "Identifier",
                          },
                          "isComputed": false,
                          "key": Identifier {
                            "column": 5,
                            "data": "c",
                            "end": 22,
                            "line": 3,
                            "raw": "c",
                            "start": 21,
                            "type": "Identifier",
                          },
                          "line": 3,
                          "raw": "c: d",
                          "start": 21,
                          "type": "ObjectInitialiserMember",
                        },
                      ],
                      "raw": "c: d",
                      "start": 21,
                      "type": "ObjectInitialiser",
                    },
                    Return {
                      "column": 5,
                      "end": 38,
                      "expression": Int {
                        "column": 12,
                        "data": 1,
                        "end": 38,
                        "line": 4,
                        "raw": "1",
                        "start": 37,
                        "type": "Int",
                      },
                      "line": 4,
                      "raw": "return 1",
                      "start": 30,
                      "type": "Return",
                    },
                  ],
                  "type": "Block",
                },
                "column": 7,
                "end": 38,
                "line": 2,
                "parameters": Array [],
                "raw": "->
    c: d
    return 1",
                "start": 14,
                "type": "Function",
              },
              "line": 2,
              "raw": "b = ->
    c: d
    return 1",
              "start": 10,
              "type": "AssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 38,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b = ->
    c: d
    return 1",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "class A
  b = ->
    c: d
    return 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "class A
  a: 1
  b: -> 2",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 24,
          "inline": false,
          "line": 2,
          "raw": "a: 1
  b: -> 2",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 11,
                "line": 2,
                "raw": "a",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 14,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 14,
                "line": 2,
                "raw": "1",
                "start": 13,
                "type": "Int",
              },
              "line": 2,
              "raw": "a: 1",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 18,
                "line": 3,
                "raw": "b",
                "start": 17,
                "type": "Identifier",
              },
              "column": 3,
              "end": 24,
              "expression": Function {
                "body": Block {
                  "column": 9,
                  "end": 24,
                  "inline": true,
                  "line": 3,
                  "raw": "2",
                  "start": 23,
                  "statements": Array [
                    Int {
                      "column": 9,
                      "data": 2,
                      "end": 24,
                      "line": 3,
                      "raw": "2",
                      "start": 23,
                      "type": "Int",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 24,
                "line": 3,
                "parameters": Array [],
                "raw": "-> 2",
                "start": 20,
                "type": "Function",
              },
              "line": 3,
              "raw": "b: -> 2",
              "start": 17,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 24,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  a: 1
  b: -> 2",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "class A
  a: 1
  b: -> 2",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-non-identifier-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A?.B
  a: 1",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "a: 1",
          "start": 13,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "a",
                "end": 14,
                "line": 2,
                "raw": "a",
                "start": 13,
                "type": "Identifier",
              },
              "column": 3,
              "end": 17,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 17,
                "line": 2,
                "raw": "1",
                "start": 16,
                "type": "Int",
              },
              "line": 2,
              "raw": "a: 1",
              "start": 13,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": SoakedMemberAccessOp {
          "column": 7,
          "end": 10,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 10,
            "data": "B",
            "end": 10,
            "line": 1,
            "raw": "B",
            "start": 9,
            "type": "Identifier",
          },
          "raw": "A?.B",
          "start": 6,
          "type": "SoakedMemberAccessOp",
        },
        "nameAssignee": SoakedMemberAccessOp {
          "column": 7,
          "end": 10,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 10,
            "data": "B",
            "end": 10,
            "line": 1,
            "raw": "B",
            "start": 9,
            "type": "Identifier",
          },
          "raw": "A?.B",
          "start": 6,
          "type": "SoakedMemberAccessOp",
        },
        "parent": null,
        "raw": "class A?.B
  a: 1",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "class A?.B
  a: 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-outer-assign-blocking-conditional-assign 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 30,
    "inline": false,
    "line": 1,
    "raw": "class A
  if b
    c: d
  e: f",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 30,
          "inline": false,
          "line": 2,
          "raw": "if b
    c: d
  e: f",
          "start": 10,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 3,
              "condition": Identifier {
                "column": 6,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 5,
                "end": 23,
                "inline": false,
                "line": 3,
                "raw": "c: d",
                "start": 19,
                "statements": Array [
                  ObjectInitialiser {
                    "column": 5,
                    "end": 23,
                    "line": 3,
                    "members": Array [
                      ObjectInitialiserMember {
                        "column": 5,
                        "end": 23,
                        "expression": Identifier {
                          "column": 8,
                          "data": "d",
                          "end": 23,
                          "line": 3,
                          "raw": "d",
                          "start": 22,
                          "type": "Identifier",
                        },
                        "isComputed": false,
                        "key": Identifier {
                          "column": 5,
                          "data": "c",
                          "end": 20,
                          "line": 3,
                          "raw": "c",
                          "start": 19,
                          "type": "Identifier",
                        },
                        "line": 3,
                        "raw": "c: d",
                        "start": 19,
                        "type": "ObjectInitialiserMember",
                      },
                    ],
                    "raw": "c: d",
                    "start": 19,
                    "type": "ObjectInitialiser",
                  },
                ],
                "type": "Block",
              },
              "end": 23,
              "isUnless": false,
              "line": 2,
              "raw": "if b
    c: d",
              "start": 10,
              "type": "Conditional",
            },
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "e",
                "end": 27,
                "line": 4,
                "raw": "e",
                "start": 26,
                "type": "Identifier",
              },
              "column": 3,
              "end": 30,
              "expression": Identifier {
                "column": 6,
                "data": "f",
                "end": 30,
                "line": 4,
                "raw": "f",
                "start": 29,
                "type": "Identifier",
              },
              "line": 4,
              "raw": "e: f",
              "start": 26,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 30,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  if b
    c: d
  e: f",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "class A
  if b
    c: d
  e: f
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-parenthesized-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "class A
  b: (c)",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "b: (c)",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 16,
              "expression": Identifier {
                "column": 7,
                "data": "c",
                "end": 15,
                "line": 2,
                "raw": "c",
                "start": 14,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "b: (c)",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 16,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b: (c)",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A
  b: (c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-proto-access-name 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "class A::",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 9,
        "line": 1,
        "name": ProtoMemberAccessOp {
          "column": 7,
          "end": 9,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "A::",
          "start": 6,
          "type": "ProtoMemberAccessOp",
        },
        "nameAssignee": ProtoMemberAccessOp {
          "column": 7,
          "end": 9,
          "expression": Identifier {
            "column": 7,
            "data": "A",
            "end": 7,
            "line": 1,
            "raw": "A",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "A::",
          "start": 6,
          "type": "ProtoMemberAccessOp",
        },
        "parent": null,
        "raw": "class A::",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "class A::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: class-with-static-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "class A
  @b: c",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 15,
          "inline": false,
          "line": 2,
          "raw": "@b: c",
          "start": 10,
          "statements": Array [
            AssignOp {
              "assignee": MemberAccessOp {
                "column": 3,
                "end": 12,
                "expression": This {
                  "column": 3,
                  "end": 11,
                  "line": 2,
                  "raw": "@",
                  "start": 10,
                  "type": "This",
                },
                "line": 2,
                "member": Identifier {
                  "column": 4,
                  "data": "b",
                  "end": 12,
                  "line": 2,
                  "raw": "b",
                  "start": 11,
                  "type": "Identifier",
                },
                "raw": "@b",
                "start": 10,
                "type": "MemberAccessOp",
              },
              "column": 3,
              "end": 15,
              "expression": Identifier {
                "column": 7,
                "data": "c",
                "end": 15,
                "line": 2,
                "raw": "c",
                "start": 14,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "@b: c",
              "start": 10,
              "type": "AssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 15,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  @b: c",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "class A
  @b: c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: comment-in-parenthesized-block 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "() -> (
  ###yo###
  a
)",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 7,
          "end": 24,
          "inline": true,
          "line": 1,
          "raw": "(
  ###yo###
  a
)",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 22,
              "line": 3,
              "raw": "a",
              "start": 21,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 24,
        "line": 1,
        "parameters": Array [],
        "raw": "() -> (
  ###yo###
  a
)",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "() -> (
  ###yo###
  a
)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: comment-only-file 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "# Testing
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: complex-computed-object-key 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "o = {
  [a b]: c
}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "o",
          "end": 1,
          "line": 1,
          "raw": "o",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 18,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 18,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 16,
              "expression": Identifier {
                "column": 10,
                "data": "c",
                "end": 16,
                "line": 2,
                "raw": "c",
                "start": 15,
                "type": "Identifier",
              },
              "isComputed": true,
              "key": FunctionApplication {
                "arguments": Array [
                  Identifier {
                    "column": 6,
                    "data": "b",
                    "end": 12,
                    "line": 2,
                    "raw": "b",
                    "start": 11,
                    "type": "Identifier",
                  },
                ],
                "column": 4,
                "end": 12,
                "function": Identifier {
                  "column": 4,
                  "data": "a",
                  "end": 10,
                  "line": 2,
                  "raw": "a",
                  "start": 9,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a b",
                "start": 9,
                "type": "FunctionApplication",
              },
              "line": 2,
              "raw": "[a b]: c",
              "start": 8,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{
  [a b]: c
}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "o = {
  [a b]: c
}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "o = {
  [a b]: c
}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: complex-template-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "\\"#{}A#{} #{} #{}B#{}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 21,
        "expressions": Array [
          null,
          null,
          null,
          null,
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "A",
            "end": 5,
            "line": 1,
            "raw": "A",
            "start": 4,
            "type": "Quasi",
          },
          Quasi {
            "column": 9,
            "data": " ",
            "end": 9,
            "line": 1,
            "raw": " ",
            "start": 8,
            "type": "Quasi",
          },
          Quasi {
            "column": 13,
            "data": " ",
            "end": 13,
            "line": 1,
            "raw": " ",
            "start": 12,
            "type": "Quasi",
          },
          Quasi {
            "column": 17,
            "data": "B",
            "end": 17,
            "line": 1,
            "raw": "B",
            "start": 16,
            "type": "Quasi",
          },
          Quasi {
            "column": 21,
            "data": "",
            "end": 20,
            "line": 1,
            "raw": "",
            "start": 20,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{}A#{} #{} #{}B#{}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "\\"#{}A#{} #{} #{}B#{}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: compound-assignment-addition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a += 1",
    "start": 0,
    "statements": Array [
      CompoundAssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Int {
          "column": 6,
          "data": 1,
          "end": 6,
          "line": 1,
          "raw": "1",
          "start": 5,
          "type": "Int",
        },
        "line": 1,
        "op": "PlusOp",
        "raw": "a += 1",
        "start": 0,
        "type": "CompoundAssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a += 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: compound-assignment-subtraction 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a -= b",
    "start": 0,
    "statements": Array [
      CompoundAssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "line": 1,
        "op": "SubtractOp",
        "raw": "a -= b",
        "start": 0,
        "type": "CompoundAssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a -= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: computed-object-key 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "o = {
  [a]: b
}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "o",
          "end": 1,
          "line": 1,
          "raw": "o",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 16,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 16,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 14,
              "expression": Identifier {
                "column": 8,
                "data": "b",
                "end": 14,
                "line": 2,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "isComputed": true,
              "key": Identifier {
                "column": 4,
                "data": "a",
                "end": 10,
                "line": 2,
                "raw": "a",
                "start": 9,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "[a]: b",
              "start": 8,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{
  [a]: b
}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "o = {
  [a]: b
}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "o = {
  [a]: b
}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: computed-shorthand-object-key 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "o = {
  [a]
}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "o",
          "end": 1,
          "line": 1,
          "raw": "o",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 13,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 13,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 11,
              "expression": null,
              "isComputed": true,
              "key": Identifier {
                "column": 4,
                "data": "a",
                "end": 10,
                "line": 2,
                "raw": "a",
                "start": 9,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "[a]",
              "start": 8,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{
  [a]
}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "o = {
  [a]
}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "o = {
  [a]
}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-empty-consequent-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 27,
    "inline": false,
    "line": 1,
    "raw": "if false
else if false
else",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 6,
          "end": 27,
          "inline": true,
          "line": 2,
          "raw": "if false
else",
          "start": 14,
          "statements": Array [
            Conditional {
              "alternate": null,
              "column": 6,
              "condition": Bool {
                "column": 9,
                "data": false,
                "end": 22,
                "line": 2,
                "raw": "false",
                "start": 17,
                "type": "Bool",
              },
              "consequent": null,
              "end": 27,
              "isUnless": false,
              "line": 2,
              "raw": "if false
else",
              "start": 14,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Bool {
          "column": 4,
          "data": false,
          "end": 8,
          "line": 1,
          "raw": "false",
          "start": 3,
          "type": "Bool",
        },
        "consequent": null,
        "end": 27,
        "isUnless": false,
        "line": 1,
        "raw": "if false
else if false
else",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "if false
else if false
else",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-ending-in-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "x = if a
  ;",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 12,
        "expression": Conditional {
          "alternate": null,
          "column": 5,
          "condition": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "consequent": null,
          "end": 12,
          "isUnless": false,
          "line": 1,
          "raw": "if a
  ;",
          "start": 4,
          "type": "Conditional",
        },
        "line": 1,
        "raw": "x = if a
  ;",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "x = if a
  ;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "if a then b else c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 18,
          "end": 18,
          "inline": true,
          "line": 1,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 18,
              "data": "c",
              "end": 18,
              "line": 1,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 11,
          "end": 11,
          "inline": true,
          "line": 1,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 11,
              "data": "b",
              "end": 11,
              "line": 1,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 18,
        "isUnless": false,
        "line": 1,
        "raw": "if a then b else c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "if a then b else c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-unless-equal-condition 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "unless a == b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": EQOp {
          "column": 8,
          "end": 13,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a == b",
          "right": Identifier {
            "column": 13,
            "data": "b",
            "end": 13,
            "line": 1,
            "raw": "b",
            "start": 12,
            "type": "Identifier",
          },
          "start": 7,
          "type": "EQOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": true,
        "line": 1,
        "raw": "unless a == b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "unless a == b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-unless-exists-op 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "unless a?
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": UnaryExistsOp {
          "column": 8,
          "end": 9,
          "expression": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?",
          "start": 7,
          "type": "UnaryExistsOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 13,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 12,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 13,
              "line": 2,
              "raw": "b",
              "start": 12,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 13,
        "isUnless": true,
        "line": 1,
        "raw": "unless a?
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "unless a?
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-unless-virtual-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "unless a + b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": PlusOp {
          "column": 8,
          "end": 12,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a + b",
          "right": Identifier {
            "column": 12,
            "data": "b",
            "end": 12,
            "line": 1,
            "raw": "b",
            "start": 11,
            "type": "Identifier",
          },
          "start": 7,
          "type": "PlusOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 15,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 16,
              "line": 2,
              "raw": "c",
              "start": 15,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 16,
        "isUnless": true,
        "line": 1,
        "raw": "unless a + b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "unless a + b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-using-unless 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "unless a
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 12,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 11,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 12,
              "line": 2,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 12,
        "isUnless": true,
        "line": 1,
        "raw": "unless a
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "unless a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-with-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "if a
  b
else
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 4,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b
else
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "if a
  b
else
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-with-braces-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "a if (b and c)",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": LogicalAndOp {
          "column": 7,
          "end": 13,
          "left": Identifier {
            "column": 7,
            "data": "b",
            "end": 7,
            "line": 1,
            "raw": "b",
            "start": 6,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "b and c",
          "right": Identifier {
            "column": 13,
            "data": "c",
            "end": 13,
            "line": 1,
            "raw": "c",
            "start": 12,
            "type": "Identifier",
          },
          "start": 6,
          "type": "LogicalAndOp",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 14,
        "isUnless": false,
        "line": 1,
        "raw": "a if (b and c)",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "a if (b and c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-with-post-if 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a if b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 6,
        "isUnless": false,
        "line": 1,
        "raw": "a if b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a if b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-with-post-unless 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "a unless b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 10,
        "isUnless": true,
        "line": 1,
        "raw": "a unless b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "a unless b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: conditional-without-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "if a
  b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 8,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "if a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: continue 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "loop
  continue",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 15,
          "inline": false,
          "line": 2,
          "raw": "continue",
          "start": 7,
          "statements": Array [
            Continue {
              "column": 3,
              "end": 15,
              "line": 2,
              "raw": "continue",
              "start": 7,
              "type": "Continue",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "raw": "loop
  continue",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "loop
  continue
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: csx-fragment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 52,
    "inline": false,
    "line": 1,
    "raw": "x = <>
  <span>Hello</span>
  <span>World</span>
</>",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 52,
        "expression": CSXElement {
          "children": Array [
            CSXElement {
              "children": Array [],
              "column": 3,
              "end": 27,
              "line": 2,
              "properties": Array [],
              "raw": "<span>Hello</span>",
              "start": 9,
              "type": "CSXElement",
            },
            CSXElement {
              "children": Array [],
              "column": 3,
              "end": 48,
              "line": 3,
              "properties": Array [],
              "raw": "<span>World</span>",
              "start": 30,
              "type": "CSXElement",
            },
          ],
          "column": 5,
          "end": 52,
          "line": 1,
          "properties": Array [],
          "raw": "<>
  <span>Hello</span>
  <span>World</span>
</>",
          "start": 4,
          "type": "CSXElement",
        },
        "line": 1,
        "raw": "x = <>
  <span>Hello</span>
  <span>World</span>
</>",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 53,
  "line": 1,
  "raw": "x = <>
  <span>Hello</span>
  <span>World</span>
</>
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: csx-simple 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "x = <div></div>",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 15,
        "expression": CSXElement {
          "children": Array [],
          "column": 5,
          "end": 15,
          "line": 1,
          "properties": Array [],
          "raw": "<div></div>",
          "start": 4,
          "type": "CSXElement",
        },
        "line": 1,
        "raw": "x = <div></div>",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "x = <div></div>
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: csx-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 47,
    "inline": false,
    "line": 1,
    "raw": "x = <div>
  foo
  <blah />
  {bar}
  baz
</div>",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 47,
        "expression": CSXElement {
          "children": Array [
            CSXElement {
              "children": Array [],
              "column": 3,
              "end": 26,
              "line": 3,
              "properties": Array [],
              "raw": "<blah />",
              "start": 18,
              "type": "CSXElement",
            },
            Identifier {
              "column": 4,
              "data": "bar",
              "end": 33,
              "line": 4,
              "raw": "bar",
              "start": 30,
              "type": "Identifier",
            },
          ],
          "column": 5,
          "end": 47,
          "line": 1,
          "properties": Array [],
          "raw": "<div>
  foo
  <blah />
  {bar}
  baz
</div>",
          "start": 4,
          "type": "CSXElement",
        },
        "line": 1,
        "raw": "x = <div>
  foo
  <blah />
  {bar}
  baz
</div>",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 48,
  "line": 1,
  "raw": "x = <div>
  foo
  <blah />
  {bar}
  baz
</div>
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: csx-with-props 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 59,
    "inline": false,
    "line": 1,
    "raw": "x = <Test foo={bar} {...props} a={b} c='d' baz>hello</Test>",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 59,
        "expression": CSXElement {
          "children": Array [],
          "column": 5,
          "end": 59,
          "line": 1,
          "properties": Array [
            Identifier {
              "column": 16,
              "data": "bar",
              "end": 18,
              "line": 1,
              "raw": "bar",
              "start": 15,
              "type": "Identifier",
            },
            Spread {
              "column": 22,
              "end": 29,
              "expression": Identifier {
                "column": 25,
                "data": "props",
                "end": 29,
                "line": 1,
                "raw": "props",
                "start": 24,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "...props",
              "start": 21,
              "type": "Spread",
            },
            Identifier {
              "column": 35,
              "data": "b",
              "end": 35,
              "line": 1,
              "raw": "b",
              "start": 34,
              "type": "Identifier",
            },
          ],
          "raw": "<Test foo={bar} {...props} a={b} c='d' baz>hello</Test>",
          "start": 4,
          "type": "CSXElement",
        },
        "line": 1,
        "raw": "x = <Test foo={bar} {...props} a={b} c='d' baz>hello</Test>",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 60,
  "line": 1,
  "raw": "x = <Test foo={bar} {...props} a={b} c='d' baz>hello</Test>
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: dangling-prototype-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "Object::",
    "start": 0,
    "statements": Array [
      ProtoMemberAccessOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 1,
          "data": "Object",
          "end": 6,
          "line": 1,
          "raw": "Object",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "Object::",
        "start": 0,
        "type": "ProtoMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "Object::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: dangling-prototype-access-of-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a()::",
    "start": 0,
    "statements": Array [
      ProtoMemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": FunctionApplication {
          "arguments": Array [],
          "column": 1,
          "end": 3,
          "function": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a()",
          "start": 0,
          "type": "FunctionApplication",
        },
        "line": 1,
        "raw": "a()::",
        "start": 0,
        "type": "ProtoMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a()::
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: delete 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "delete a",
    "start": 0,
    "statements": Array [
      DeleteOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "delete a",
        "start": 0,
        "type": "DeleteOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "delete a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: destructure-this-assignment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "({@a}) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          ObjectInitialiser {
            "column": 2,
            "end": 5,
            "line": 1,
            "members": Array [
              ObjectInitialiserMember {
                "column": 3,
                "end": 4,
                "expression": null,
                "isComputed": false,
                "key": MemberAccessOp {
                  "column": 3,
                  "end": 4,
                  "expression": This {
                    "column": 3,
                    "end": 3,
                    "line": 1,
                    "raw": "@",
                    "start": 2,
                    "type": "This",
                  },
                  "line": 1,
                  "member": Identifier {
                    "column": 4,
                    "data": "a",
                    "end": 4,
                    "line": 1,
                    "raw": "a",
                    "start": 3,
                    "type": "Identifier",
                  },
                  "raw": "@a",
                  "start": 2,
                  "type": "MemberAccessOp",
                },
                "line": 1,
                "raw": "@a",
                "start": 2,
                "type": "ObjectInitialiserMember",
              },
            ],
            "raw": "{@a}",
            "start": 1,
            "type": "ObjectInitialiser",
          },
        ],
        "raw": "({@a}) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "({@a}) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: division 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 / 4",
    "start": 0,
    "statements": Array [
      DivideOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 / 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "DivideOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 / 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "do ->
  a",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 9,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 9,
            "inline": false,
            "line": 2,
            "raw": "a",
            "start": 8,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "a",
                "end": 9,
                "line": 2,
                "raw": "a",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 9,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  a",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do ->
  a",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "do ->
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a(do =>
  b)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          DoOp {
            "column": 3,
            "end": 11,
            "expression": BoundFunction {
              "body": Block {
                "column": 3,
                "end": 11,
                "inline": false,
                "line": 2,
                "raw": "b",
                "start": 10,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 11,
                    "line": 2,
                    "raw": "b",
                    "start": 10,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "end": 11,
              "line": 1,
              "parameters": Array [],
              "raw": "=>
  b",
              "start": 5,
              "type": "BoundFunction",
            },
            "line": 1,
            "raw": "do =>
  b",
            "start": 2,
            "type": "DoOp",
          },
        ],
        "column": 1,
        "end": 12,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(do =>
  b)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a(do =>
  b)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-assign-and-defaults 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "do a = (b = c, d) ->
  e",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 24,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          "column": 4,
          "end": 24,
          "expression": Function {
            "body": Block {
              "column": 3,
              "end": 24,
              "inline": false,
              "line": 2,
              "raw": "e",
              "start": 23,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "e",
                  "end": 24,
                  "line": 2,
                  "raw": "e",
                  "start": 23,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 8,
            "end": 24,
            "line": 1,
            "parameters": Array [
              DefaultParam {
                "column": 9,
                "default": Identifier {
                  "column": 13,
                  "data": "c",
                  "end": 13,
                  "line": 1,
                  "raw": "c",
                  "start": 12,
                  "type": "Identifier",
                },
                "end": 13,
                "line": 1,
                "param": Identifier {
                  "column": 9,
                  "data": "b",
                  "end": 9,
                  "line": 1,
                  "raw": "b",
                  "start": 8,
                  "type": "Identifier",
                },
                "raw": "b = c",
                "start": 8,
                "type": "DefaultParam",
              },
              Identifier {
                "column": 16,
                "data": "d",
                "end": 16,
                "line": 1,
                "raw": "d",
                "start": 15,
                "type": "Identifier",
              },
            ],
            "raw": "(b = c, d) ->
  e",
            "start": 7,
            "type": "Function",
          },
          "line": 1,
          "raw": "a = (b = c, d) ->
  e",
          "start": 3,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "do a = (b = c, d) ->
  e",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do a = (b = c, d) ->
  e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-assign-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "do wait = ->
  wait()",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 21,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 4,
            "data": "wait",
            "end": 7,
            "line": 1,
            "raw": "wait",
            "start": 3,
            "type": "Identifier",
          },
          "column": 4,
          "end": 21,
          "expression": Function {
            "body": Block {
              "column": 3,
              "end": 21,
              "inline": false,
              "line": 2,
              "raw": "wait()",
              "start": 15,
              "statements": Array [
                FunctionApplication {
                  "arguments": Array [],
                  "column": 3,
                  "end": 21,
                  "function": Identifier {
                    "column": 3,
                    "data": "wait",
                    "end": 19,
                    "line": 2,
                    "raw": "wait",
                    "start": 15,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "wait()",
                  "start": 15,
                  "type": "FunctionApplication",
                },
              ],
              "type": "Block",
            },
            "column": 11,
            "end": 21,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  wait()",
            "start": 10,
            "type": "Function",
          },
          "line": 1,
          "raw": "wait = ->
  wait()",
          "start": 3,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "do wait = ->
  wait()",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "do wait = ->
  wait()
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-bound-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "do =>
  a",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 9,
        "expression": BoundFunction {
          "body": Block {
            "column": 3,
            "end": 9,
            "inline": false,
            "line": 2,
            "raw": "a",
            "start": 8,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "a",
                "end": 9,
                "line": 2,
                "raw": "a",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 9,
          "line": 1,
          "parameters": Array [],
          "raw": "=>
  a",
          "start": 3,
          "type": "BoundFunction",
        },
        "line": 1,
        "raw": "do =>
  a",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "do =>
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-default-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 25,
    "inline": false,
    "line": 1,
    "raw": "do (a=1, b=@b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 25,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 25,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 20,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 25,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 21,
                  "line": 2,
                  "raw": "a",
                  "start": 20,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 25,
                  "line": 2,
                  "raw": "b",
                  "start": 24,
                  "type": "Identifier",
                },
                "start": 20,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 25,
          "line": 1,
          "parameters": Array [
            DefaultParam {
              "column": 5,
              "default": Int {
                "column": 7,
                "data": 1,
                "end": 7,
                "line": 1,
                "raw": "1",
                "start": 6,
                "type": "Int",
              },
              "end": 7,
              "line": 1,
              "param": Identifier {
                "column": 5,
                "data": "a",
                "end": 5,
                "line": 1,
                "raw": "a",
                "start": 4,
                "type": "Identifier",
              },
              "raw": "a=1",
              "start": 4,
              "type": "DefaultParam",
            },
            DefaultParam {
              "column": 10,
              "default": MemberAccessOp {
                "column": 12,
                "end": 13,
                "expression": This {
                  "column": 12,
                  "end": 12,
                  "line": 1,
                  "raw": "@",
                  "start": 11,
                  "type": "This",
                },
                "line": 1,
                "member": Identifier {
                  "column": 13,
                  "data": "b",
                  "end": 13,
                  "line": 1,
                  "raw": "b",
                  "start": 12,
                  "type": "Identifier",
                },
                "raw": "@b",
                "start": 11,
                "type": "MemberAccessOp",
              },
              "end": 13,
              "line": 1,
              "param": Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
              "raw": "b=@b",
              "start": 9,
              "type": "DefaultParam",
            },
          ],
          "raw": "(a=1, b=@b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a=1, b=@b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do (a=1, b=@b) ->
  a + b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-defaults-with-same-name 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 24,
    "inline": false,
    "line": 1,
    "raw": "do (a=a, b=b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 24,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 24,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 19,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 24,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 20,
                  "line": 2,
                  "raw": "a",
                  "start": 19,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 24,
                  "line": 2,
                  "raw": "b",
                  "start": 23,
                  "type": "Identifier",
                },
                "start": 19,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 24,
          "line": 1,
          "parameters": Array [
            DefaultParam {
              "column": 5,
              "default": Identifier {
                "column": 7,
                "data": "a",
                "end": 7,
                "line": 1,
                "raw": "a",
                "start": 6,
                "type": "Identifier",
              },
              "end": 7,
              "line": 1,
              "param": Identifier {
                "column": 5,
                "data": "a",
                "end": 5,
                "line": 1,
                "raw": "a",
                "start": 4,
                "type": "Identifier",
              },
              "raw": "a=a",
              "start": 4,
              "type": "DefaultParam",
            },
            DefaultParam {
              "column": 10,
              "default": Identifier {
                "column": 12,
                "data": "b",
                "end": 12,
                "line": 1,
                "raw": "b",
                "start": 11,
                "type": "Identifier",
              },
              "end": 12,
              "line": 1,
              "param": Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
              "raw": "b=b",
              "start": 9,
              "type": "DefaultParam",
            },
          ],
          "raw": "(a=a, b=b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a=a, b=b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 25,
  "line": 1,
  "raw": "do (a=a, b=b) ->
  a + b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: do-with-simple-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "do (a, b) ->
  a + b",
    "start": 0,
    "statements": Array [
      DoOp {
        "column": 1,
        "end": 20,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 20,
            "inline": false,
            "line": 2,
            "raw": "a + b",
            "start": 15,
            "statements": Array [
              PlusOp {
                "column": 3,
                "end": 20,
                "left": Identifier {
                  "column": 3,
                  "data": "a",
                  "end": 16,
                  "line": 2,
                  "raw": "a",
                  "start": 15,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "a + b",
                "right": Identifier {
                  "column": 7,
                  "data": "b",
                  "end": 20,
                  "line": 2,
                  "raw": "b",
                  "start": 19,
                  "type": "Identifier",
                },
                "start": 15,
                "type": "PlusOp",
              },
            ],
            "type": "Block",
          },
          "column": 4,
          "end": 20,
          "line": 1,
          "parameters": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
            Identifier {
              "column": 8,
              "data": "b",
              "end": 8,
              "line": 1,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "raw": "(a, b) ->
  a + b",
          "start": 3,
          "type": "Function",
        },
        "line": 1,
        "raw": "do (a, b) ->
  a + b",
        "start": 0,
        "type": "DoOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "do (a, b) ->
  a + b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: double-negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "!!a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 3,
        "expression": LogicalNotOp {
          "column": 2,
          "end": 3,
          "expression": Identifier {
            "column": 3,
            "data": "a",
            "end": 3,
            "line": 1,
            "raw": "a",
            "start": 2,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "!a",
          "start": 1,
          "type": "LogicalNotOp",
        },
        "line": 1,
        "raw": "!!a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "!!a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: dynamic-member-expressions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a[b]",
    "start": 0,
    "statements": Array [
      DynamicMemberAccessOp {
        "column": 1,
        "end": 4,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "indexingExpr": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a[b]",
        "start": 0,
        "type": "DynamicMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a[b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: elision 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "[a,, b] = [1, 2, 3]",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": ArrayInitialiser {
          "column": 1,
          "end": 7,
          "line": 1,
          "members": Array [
            Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            Elision {
              "column": 4,
              "end": 4,
              "line": 1,
              "raw": ",",
              "start": 3,
              "type": "Elision",
            },
            Identifier {
              "column": 6,
              "data": "b",
              "end": 6,
              "line": 1,
              "raw": "b",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "raw": "[a,, b]",
          "start": 0,
          "type": "ArrayInitialiser",
        },
        "column": 1,
        "end": 19,
        "expression": ArrayInitialiser {
          "column": 11,
          "end": 19,
          "line": 1,
          "members": Array [
            Int {
              "column": 12,
              "data": 1,
              "end": 12,
              "line": 1,
              "raw": "1",
              "start": 11,
              "type": "Int",
            },
            Int {
              "column": 15,
              "data": 2,
              "end": 15,
              "line": 1,
              "raw": "2",
              "start": 14,
              "type": "Int",
            },
            Int {
              "column": 18,
              "data": 3,
              "end": 18,
              "line": 1,
              "raw": "3",
              "start": 17,
              "type": "Int",
            },
          ],
          "raw": "[1, 2, 3]",
          "start": 10,
          "type": "ArrayInitialiser",
        },
        "line": 1,
        "raw": "[a,, b] = [1, 2, 3]",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "[a,, b] = [1, 2, 3]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-anonymous-class 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "class",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 5,
        "line": 1,
        "name": null,
        "nameAssignee": null,
        "parent": null,
        "raw": "class",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "class",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-array 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "[]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 2,
        "line": 1,
        "members": Array [],
        "raw": "[]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "[]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-bound-function-without-body 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "=>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 2,
        "line": 1,
        "parameters": Array [],
        "raw": "=>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "=>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-class 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "class A",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 7,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "class A",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-class-with-superclass 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "class A extends B",
    "start": 0,
    "statements": Array [
      Class {
        "body": null,
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 17,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": Identifier {
          "column": 17,
          "data": "B",
          "end": 17,
          "line": 1,
          "raw": "B",
          "start": 16,
          "type": "Identifier",
        },
        "raw": "class A extends B",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "class A extends B",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-function-without-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 2,
        "line": 1,
        "parameters": Array [],
        "raw": "->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-heregex-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "///a#{}b///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 11,
        "expressions": Array [
          null,
        ],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Quasi",
          },
        ],
        "raw": "///a#{}b///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "///a#{}b///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "loop",
    "start": 0,
    "statements": Array [
      Loop {
        "body": null,
        "column": 1,
        "end": 4,
        "line": 1,
        "raw": "loop",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "loop then
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-object 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "{}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 2,
        "line": 1,
        "members": Array [],
        "raw": "{}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "{}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-program 1`] = `
Program {
  "body": null,
  "column": 1,
  "end": 0,
  "line": 1,
  "raw": "",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: empty-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{}b\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{}b\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "\\"a#{}b\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: equality 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a == b",
    "start": 0,
    "statements": Array [
      EQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a == b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "EQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a == b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: equality-longhand 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a is b",
    "start": 0,
    "statements": Array [
      EQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a is b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "EQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a is b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: existential-binary 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a ? b",
    "start": 0,
    "statements": Array [
      ExistsOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ? b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ExistsOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a ? b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: existential-unary 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "a?",
    "start": 0,
    "statements": Array [
      UnaryExistsOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?",
        "start": 0,
        "type": "UnaryExistsOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "a?",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: expansion 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "[a, ..., b] = c",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": ArrayInitialiser {
          "column": 1,
          "end": 11,
          "line": 1,
          "members": Array [
            Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            Expansion {
              "column": 5,
              "end": 7,
              "line": 1,
              "raw": "...",
              "start": 4,
              "type": "Expansion",
            },
            Identifier {
              "column": 10,
              "data": "b",
              "end": 10,
              "line": 1,
              "raw": "b",
              "start": 9,
              "type": "Identifier",
            },
          ],
          "raw": "[a, ..., b]",
          "start": 0,
          "type": "ArrayInitialiser",
        },
        "column": 1,
        "end": 15,
        "expression": Identifier {
          "column": 15,
          "data": "c",
          "end": 15,
          "line": 1,
          "raw": "c",
          "start": 14,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a, ..., b] = c",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "[a, ..., b] = c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: export-assignment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "export a = 1",
    "start": 0,
    "statements": Array [
      ExportNamedDeclaration {
        "column": 1,
        "end": 12,
        "expression": AssignOp {
          "assignee": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "column": 1,
          "end": 12,
          "expression": Int {
            "column": 12,
            "data": 1,
            "end": 12,
            "line": 1,
            "raw": "1",
            "start": 11,
            "type": "Int",
          },
          "line": 1,
          "raw": "export a = 1",
          "start": 0,
          "type": "AssignOp",
        },
        "line": 1,
        "raw": "export a = 1",
        "start": 0,
        "type": "ExportNamedDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "export a = 1
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: export-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "export default a",
    "start": 0,
    "statements": Array [
      ExportDefaultDeclaration {
        "column": 1,
        "end": 16,
        "expression": Identifier {
          "column": 16,
          "data": "a",
          "end": 16,
          "line": 1,
          "raw": "a",
          "start": 15,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "export default a",
        "start": 0,
        "type": "ExportDefaultDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "export default a
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: export-multiple-bindings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 43,
    "inline": false,
    "line": 1,
    "raw": "export {a, b as c} from 'd'
export {e as f}",
    "start": 0,
    "statements": Array [
      ExportBindingsDeclaration {
        "column": 1,
        "end": 27,
        "line": 1,
        "namedExports": Array [
          ModuleSpecifier {
            "alias": null,
            "column": 9,
            "end": 9,
            "line": 1,
            "original": Identifier {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Identifier",
            },
            "raw": "a",
            "start": 8,
            "type": "ModuleSpecifier",
          },
          ModuleSpecifier {
            "alias": Identifier {
              "column": 17,
              "data": "c",
              "end": 17,
              "line": 1,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
            "column": 12,
            "end": 17,
            "line": 1,
            "original": Identifier {
              "column": 12,
              "data": "b",
              "end": 12,
              "line": 1,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
            "raw": "b as c",
            "start": 11,
            "type": "ModuleSpecifier",
          },
        ],
        "raw": "export {a, b as c} from 'd'",
        "source": String {
          "column": 25,
          "end": 27,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 26,
              "data": "d",
              "end": 26,
              "line": 1,
              "raw": "d",
              "start": 25,
              "type": "Quasi",
            },
          ],
          "raw": "'d'",
          "start": 24,
          "type": "String",
        },
        "start": 0,
        "type": "ExportBindingsDeclaration",
      },
      ExportBindingsDeclaration {
        "column": 1,
        "end": 43,
        "line": 2,
        "namedExports": Array [
          ModuleSpecifier {
            "alias": Identifier {
              "column": 14,
              "data": "f",
              "end": 42,
              "line": 2,
              "raw": "f",
              "start": 41,
              "type": "Identifier",
            },
            "column": 9,
            "end": 42,
            "line": 2,
            "original": Identifier {
              "column": 9,
              "data": "e",
              "end": 37,
              "line": 2,
              "raw": "e",
              "start": 36,
              "type": "Identifier",
            },
            "raw": "e as f",
            "start": 36,
            "type": "ModuleSpecifier",
          },
        ],
        "raw": "export {e as f}",
        "source": null,
        "start": 28,
        "type": "ExportBindingsDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 44,
  "line": 1,
  "raw": "export {a, b as c} from 'd'
export {e as f}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: export-star 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "export * from 'a'",
    "start": 0,
    "statements": Array [
      ExportAllDeclaration {
        "column": 1,
        "end": 17,
        "line": 1,
        "raw": "export * from 'a'",
        "source": String {
          "column": 15,
          "end": 17,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 16,
              "data": "a",
              "end": 16,
              "line": 1,
              "raw": "a",
              "start": 15,
              "type": "Quasi",
            },
          ],
          "raw": "'a'",
          "start": 14,
          "type": "String",
        },
        "start": 0,
        "type": "ExportAllDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "export * from 'a'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: external-constructor 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "f = ->
class A
  constructor: f",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "f",
          "end": 1,
          "line": 1,
          "raw": "f",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 6,
        "expression": Function {
          "body": null,
          "column": 5,
          "end": 6,
          "line": 1,
          "parameters": Array [],
          "raw": "->",
          "start": 4,
          "type": "Function",
        },
        "line": 1,
        "raw": "f = ->",
        "start": 0,
        "type": "AssignOp",
      },
      Class {
        "body": Block {
          "column": 3,
          "end": 31,
          "inline": false,
          "line": 3,
          "raw": "constructor: f",
          "start": 17,
          "statements": Array [
            Constructor {
              "assignee": Identifier {
                "column": 3,
                "data": "constructor",
                "end": 28,
                "line": 3,
                "raw": "constructor",
                "start": 17,
                "type": "Identifier",
              },
              "column": 3,
              "end": 31,
              "expression": Identifier {
                "column": 16,
                "data": "f",
                "end": 31,
                "line": 3,
                "raw": "f",
                "start": 30,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "constructor: f",
              "start": 17,
              "type": "Constructor",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": Constructor {
          "assignee": Identifier {
            "column": 3,
            "data": "constructor",
            "end": 28,
            "line": 3,
            "raw": "constructor",
            "start": 17,
            "type": "Identifier",
          },
          "column": 3,
          "end": 31,
          "expression": Identifier {
            "column": 16,
            "data": "f",
            "end": 31,
            "line": 3,
            "raw": "f",
            "start": 30,
            "type": "Identifier",
          },
          "line": 3,
          "raw": "constructor: f",
          "start": 17,
          "type": "Constructor",
        },
        "end": 31,
        "line": 2,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 14,
          "line": 2,
          "raw": "A",
          "start": 13,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 14,
          "line": 2,
          "raw": "A",
          "start": 13,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  constructor: f",
        "start": 7,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 32,
  "line": 1,
  "raw": "f = ->
class A
  constructor: f
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: false 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "false",
    "start": 0,
    "statements": Array [
      Bool {
        "column": 1,
        "data": false,
        "end": 5,
        "line": 1,
        "raw": "false",
        "start": 0,
        "type": "Bool",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "false",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: float 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "1.2",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 1.2,
        "end": 3,
        "line": 1,
        "raw": "1.2",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "1.2",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: float-int-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "1.0",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 1,
        "end": 3,
        "line": 1,
        "raw": "1.0",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "1.0",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: float-leading-period 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": ".25",
    "start": 0,
    "statements": Array [
      Float {
        "column": 1,
        "data": 0.25,
        "end": 3,
        "line": 1,
        "raw": ".25",
        "start": 0,
        "type": "Float",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": ".25
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: floor-division 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "7 // 3",
    "start": 0,
    "statements": Array [
      FloorDivideOp {
        "column": 1,
        "end": 6,
        "left": Int {
          "column": 1,
          "data": 7,
          "end": 1,
          "line": 1,
          "raw": "7",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "7 // 3",
        "right": Int {
          "column": 6,
          "data": 3,
          "end": 6,
          "line": 1,
          "raw": "3",
          "start": 5,
          "type": "Int",
        },
        "start": 0,
        "type": "FloorDivideOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "7 // 3",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-comprehension 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a for b in c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "a for b in c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 12,
          "data": "c",
          "end": 12,
          "line": 1,
          "raw": "c",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a for b in c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-from 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "for a from b
  c",
    "start": 0,
    "statements": Array [
      ForFrom {
        "body": Block {
          "column": 3,
          "end": 16,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 15,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 16,
              "line": 2,
              "raw": "c",
              "start": 15,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 16,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a from b
  c",
        "start": 0,
        "target": Identifier {
          "column": 12,
          "data": "b",
          "end": 12,
          "line": 1,
          "raw": "b",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForFrom",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for a from b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for a in b
  c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 13,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 14,
              "line": 2,
              "raw": "c",
              "start": 13,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b
  c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "for a in b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-in-by 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "for a in b by c
  d",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 19,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 18,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 19,
              "line": 2,
              "raw": "d",
              "start": 18,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 19,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b by c
  d",
        "start": 0,
        "step": Identifier {
          "column": 15,
          "data": "c",
          "end": 15,
          "line": 1,
          "raw": "c",
          "start": 14,
          "type": "Identifier",
        },
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "for a in b by c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-in-when 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "for a in b when c
  d",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 21,
              "line": 2,
              "raw": "d",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "filter": Identifier {
          "column": 17,
          "data": "c",
          "end": 17,
          "line": 1,
          "raw": "c",
          "start": 16,
          "type": "Identifier",
        },
        "keyAssignee": null,
        "line": 1,
        "raw": "for a in b when c
  d",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "for a in b when c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-in-with-key-and-value-assignees 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "for a, i in b
  c",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "filter": null,
        "keyAssignee": Identifier {
          "column": 8,
          "data": "i",
          "end": 8,
          "line": 1,
          "raw": "i",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a, i in b
  c",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 13,
          "data": "b",
          "end": 13,
          "line": 1,
          "raw": "b",
          "start": 12,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for a, i in b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for a of b
  c",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 13,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 14,
              "line": 2,
              "raw": "c",
              "start": 13,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a of b
  c",
        "start": 0,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "for a of b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-of-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a(for b of c
  b)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          ForOf {
            "body": Block {
              "column": 3,
              "end": 16,
              "inline": false,
              "line": 2,
              "raw": "b",
              "start": 15,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 16,
                  "line": 2,
                  "raw": "b",
                  "start": 15,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 16,
            "filter": null,
            "isOwn": false,
            "keyAssignee": Identifier {
              "column": 7,
              "data": "b",
              "end": 7,
              "line": 1,
              "raw": "b",
              "start": 6,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "for b of c
  b",
            "start": 2,
            "target": Identifier {
              "column": 12,
              "data": "c",
              "end": 12,
              "line": 1,
              "raw": "c",
              "start": 11,
              "type": "Identifier",
            },
            "type": "ForOf",
            "valAssignee": null,
          },
        ],
        "column": 1,
        "end": 17,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(for b of c
  b)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a(for b of c
  b)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-of-when 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "for a of b when c
  d",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "d",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "d",
              "end": 21,
              "line": 2,
              "raw": "d",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "filter": Identifier {
          "column": 17,
          "data": "c",
          "end": 17,
          "line": 1,
          "raw": "c",
          "start": 16,
          "type": "Identifier",
        },
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for a of b when c
  d",
        "start": 0,
        "target": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "for a of b when c
  d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-of-with-key-and-value-assignees 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "for k, v of a
  b",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 2,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "filter": null,
        "isOwn": false,
        "keyAssignee": Identifier {
          "column": 5,
          "data": "k",
          "end": 5,
          "line": 1,
          "raw": "k",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for k, v of a
  b",
        "start": 0,
        "target": Identifier {
          "column": 13,
          "data": "a",
          "end": 13,
          "line": 1,
          "raw": "a",
          "start": 12,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": Identifier {
          "column": 8,
          "data": "v",
          "end": 8,
          "line": 1,
          "raw": "v",
          "start": 7,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "for k, v of a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-own-of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "for own a of b
  c",
    "start": 0,
    "statements": Array [
      ForOf {
        "body": Block {
          "column": 3,
          "end": 18,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 18,
              "line": 2,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 18,
        "filter": null,
        "isOwn": true,
        "keyAssignee": Identifier {
          "column": 9,
          "data": "a",
          "end": 9,
          "line": 1,
          "raw": "a",
          "start": 8,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "for own a of b
  c",
        "start": 0,
        "target": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "type": "ForOf",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "for own a of b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: for-repeater 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "for [0..1]
  2",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 3,
          "end": 14,
          "inline": false,
          "line": 2,
          "raw": "2",
          "start": 13,
          "statements": Array [
            Int {
              "column": 3,
              "data": 2,
              "end": 14,
              "line": 2,
              "raw": "2",
              "start": 13,
              "type": "Int",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "for [0..1]
  2",
        "start": 0,
        "step": null,
        "target": Range {
          "column": 5,
          "end": 10,
          "isInclusive": true,
          "left": Int {
            "column": 6,
            "data": 0,
            "end": 6,
            "line": 1,
            "raw": "0",
            "start": 5,
            "type": "Int",
          },
          "line": 1,
          "raw": "[0..1]",
          "right": Int {
            "column": 9,
            "data": 1,
            "end": 9,
            "line": 1,
            "raw": "1",
            "start": 8,
            "type": "Int",
          },
          "start": 4,
          "type": "Range",
        },
        "type": "ForIn",
        "valAssignee": null,
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "for [0..1]
  2
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-ending-in-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "a ->
  b
  ### c ###",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": Block {
              "column": 3,
              "end": 8,
              "inline": false,
              "line": 2,
              "raw": "b",
              "start": 7,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 8,
                  "line": 2,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 8,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  b",
            "start": 2,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 8,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ->
  b",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "a ->
  b
  ### c ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-ending-in-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "->
  ;",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  ;",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "->
  ;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-followed-by-block-comment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a ->
  b
### c ###",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": Block {
              "column": 3,
              "end": 8,
              "inline": false,
              "line": 2,
              "raw": "b",
              "start": 7,
              "statements": Array [
                Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 8,
                  "line": 2,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "column": 3,
            "end": 8,
            "line": 1,
            "parameters": Array [],
            "raw": "->
  b",
            "start": 2,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 8,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ->
  b",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a ->
  b
### c ###
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-trailing-spaces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "main = ->
  foo
  bar

baz",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "main",
          "end": 4,
          "line": 1,
          "raw": "main",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 21,
        "expression": Function {
          "body": Block {
            "column": 3,
            "end": 21,
            "inline": false,
            "line": 2,
            "raw": "foo
  bar",
            "start": 12,
            "statements": Array [
              Identifier {
                "column": 3,
                "data": "foo",
                "end": 15,
                "line": 2,
                "raw": "foo",
                "start": 12,
                "type": "Identifier",
              },
              Identifier {
                "column": 3,
                "data": "bar",
                "end": 21,
                "line": 3,
                "raw": "bar",
                "start": 18,
                "type": "Identifier",
              },
            ],
            "type": "Block",
          },
          "column": 8,
          "end": 21,
          "line": 1,
          "parameters": Array [],
          "raw": "->
  foo
  bar",
          "start": 7,
          "type": "Function",
        },
        "line": 1,
        "raw": "main = ->
  foo
  bar",
        "start": 0,
        "type": "AssignOp",
      },
      Identifier {
        "column": 1,
        "data": "baz",
        "end": 26,
        "line": 5,
        "raw": "baz",
        "start": 23,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "main = ->
  foo
  bar

baz",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-with-body 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "->
  a",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 6,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 5,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 6,
              "line": 2,
              "raw": "a",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  a",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "->
  a
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-with-default-parameter 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "(a=1) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 8,
        "line": 1,
        "parameters": Array [
          DefaultParam {
            "column": 2,
            "default": Int {
              "column": 4,
              "data": 1,
              "end": 4,
              "line": 1,
              "raw": "1",
              "start": 3,
              "type": "Int",
            },
            "end": 4,
            "line": 1,
            "param": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "raw": "a=1",
            "start": 1,
            "type": "DefaultParam",
          },
        ],
        "raw": "(a=1) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a=1) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-with-parameters 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "(a, b) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 9,
        "line": 1,
        "parameters": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "raw": "(a, b) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "(a, b) ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: function-with-statement-after-block-and-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "->
  a

# hey
## foo ###
b",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 6,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 5,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 6,
              "line": 2,
              "raw": "a",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 6,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  a",
        "start": 0,
        "type": "Function",
      },
      Identifier {
        "column": 1,
        "data": "b",
        "end": 26,
        "line": 6,
        "raw": "b",
        "start": 25,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 27,
  "line": 1,
  "raw": "->
  a

# hey
## foo ###
b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: greater-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a > b",
    "start": 0,
    "statements": Array [
      GTOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a > b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "GTOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a > b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: greater-than-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a >= b",
    "start": 0,
    "statements": Array [
      GTEOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a >= b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "GTEOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a >= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "///a/b/c///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 11,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/a\\\\/b\\\\/c/",
            "end": 8,
            "line": 1,
            "raw": "a/b/c",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "///a/b/c///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "///a/b/c///",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-in-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "///foo///.test('a')",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          String {
            "column": 16,
            "end": 18,
            "expressions": Array [],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 17,
                "data": "a",
                "end": 17,
                "line": 1,
                "raw": "a",
                "start": 16,
                "type": "Quasi",
              },
            ],
            "raw": "'a'",
            "start": 15,
            "type": "String",
          },
        ],
        "column": 1,
        "end": 19,
        "function": MemberAccessOp {
          "column": 1,
          "end": 14,
          "expression": Heregex {
            "column": 1,
            "end": 9,
            "expressions": Array [],
            "flags": RegexFlags {
              "g": false,
              "global": false,
              "i": false,
              "ignoreCase": false,
              "m": false,
              "multiline": false,
              "sticky": false,
              "u": false,
              "unicode": false,
              "y": false,
            },
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 4,
                "data": "/foo/",
                "end": 6,
                "line": 1,
                "raw": "foo",
                "start": 3,
                "type": "Quasi",
              },
            ],
            "raw": "///foo///",
            "start": 0,
            "type": "Heregex",
          },
          "line": 1,
          "member": Identifier {
            "column": 11,
            "data": "test",
            "end": 14,
            "line": 1,
            "raw": "test",
            "start": 10,
            "type": "Identifier",
          },
          "raw": "///foo///.test",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "raw": "///foo///.test('a')",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "///foo///.test('a')
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-with-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "///a/b/c///gimuy",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 16,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": true,
          "multiline": true,
          "sticky": true,
          "u": true,
          "unicode": true,
          "y": true,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/a\\\\/b\\\\/c/gimuy",
            "end": 8,
            "line": 1,
            "raw": "a/b/c",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "///a/b/c///gimuy",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "///a/b/c///gimuy
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-with-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "///
  foo
  #{bar}  # baz
///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 29,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "bar",
            "end": 17,
            "line": 3,
            "raw": "bar",
            "start": 14,
            "type": "Identifier",
          },
        ],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "foo",
            "end": 12,
            "line": 1,
            "raw": "
  foo
  ",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 9,
            "data": "",
            "end": 26,
            "line": 3,
            "raw": "  # baz
",
            "start": 18,
            "type": "Quasi",
          },
        ],
        "raw": "///
  foo
  #{bar}  # baz
///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "///
  foo
  #{bar}  # baz
///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-with-interpolations-and-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 30,
    "inline": false,
    "line": 1,
    "raw": "///
  abc # def #{ghi} j
///gi",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 30,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/abc/gi",
            "end": 25,
            "line": 1,
            "raw": "
  abc # def #{ghi} j
",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "///
  abc # def #{ghi} j
///gi",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "///
  abc # def #{ghi} j
///gi
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-with-spaces-and-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 305,
    "inline": false,
    "line": 1,
    "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "OPERATOR",
          "end": 8,
          "line": 1,
          "raw": "OPERATOR",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 305,
        "expression": Heregex {
          "column": 12,
          "end": 305,
          "expressions": Array [],
          "flags": RegexFlags {
            "g": false,
            "global": false,
            "i": false,
            "ignoreCase": false,
            "m": false,
            "multiline": false,
            "sticky": false,
            "u": false,
            "unicode": false,
            "y": false,
          },
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 15,
              "data": "/^(?:[-=]>|[-+*\\\\/%<>&|^!?=]=|>>>=?|([-+:])\\\\1|([&|<>])\\\\2=?|\\\\?\\\\.|\\\\.{2,3})/",
              "end": 302,
              "line": 1,
              "raw": " ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ",
              "start": 14,
              "type": "Quasi",
            },
          ],
          "raw": "/// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
          "start": 11,
          "type": "Heregex",
        },
        "line": 1,
        "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 306,
  "line": 1,
  "raw": "OPERATOR = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\\\\1         # doubles
   | ([&|<>])\\\\2=?      # logic / shift
   | \\\\?\\\\.              # soak access
   | \\\\.{2,3}           # range or splat
) ///
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: heregex-with-strange-whitespace 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "/// ///",
    "start": 0,
    "statements": Array [
      Heregex {
        "column": 1,
        "end": 7,
        "expressions": Array [],
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "/(?:)/",
            "end": 4,
            "line": 1,
            "raw": " ",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "/// ///",
        "start": 0,
        "type": "Heregex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 46,
  "line": 1,
  "raw": "/// ///  # This has a \\\\u2028 character in it.
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: hexidecimal-number 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "0x1B000",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 110592,
        "end": 7,
        "line": 1,
        "raw": "0x1B000",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "0x1B000",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: iife-in-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "a((=>
  0)())",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          FunctionApplication {
            "arguments": Array [],
            "column": 3,
            "end": 12,
            "function": BoundFunction {
              "body": Block {
                "column": 3,
                "end": 9,
                "inline": false,
                "line": 2,
                "raw": "0",
                "start": 8,
                "statements": Array [
                  Int {
                    "column": 3,
                    "data": 0,
                    "end": 9,
                    "line": 2,
                    "raw": "0",
                    "start": 8,
                    "type": "Int",
                  },
                ],
                "type": "Block",
              },
              "column": 4,
              "end": 9,
              "line": 1,
              "parameters": Array [],
              "raw": "=>
  0",
              "start": 3,
              "type": "BoundFunction",
            },
            "line": 1,
            "raw": "(=>
  0)()",
            "start": 2,
            "type": "FunctionApplication",
          },
        ],
        "column": 1,
        "end": 13,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a((=>
  0)())",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a((=>
  0)())",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: implicit-object-with-trailing-comma 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "a =
  b: c,
  d: e,",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 19,
        "expression": ObjectInitialiser {
          "column": 3,
          "end": 19,
          "line": 2,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 10,
              "expression": Identifier {
                "column": 6,
                "data": "c",
                "end": 10,
                "line": 2,
                "raw": "c",
                "start": 9,
                "type": "Identifier",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "b",
                "end": 7,
                "line": 2,
                "raw": "b",
                "start": 6,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "b: c",
              "start": 6,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 3,
              "end": 18,
              "expression": Identifier {
                "column": 6,
                "data": "e",
                "end": 18,
                "line": 3,
                "raw": "e",
                "start": 17,
                "type": "Identifier",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "d",
                "end": 15,
                "line": 3,
                "raw": "d",
                "start": 14,
                "type": "Identifier",
              },
              "line": 3,
              "raw": "d: e",
              "start": 14,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "b: c,
  d: e,",
          "start": 6,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "a =
  b: c,
  d: e,",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "a =
  b: c,
  d: e,
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: import-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "import a from 'b'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "end": 17,
        "line": 1,
        "namedImports": null,
        "namespaceImport": null,
        "raw": "import a from 'b'",
        "source": String {
          "column": 15,
          "end": 17,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 16,
              "data": "b",
              "end": 16,
              "line": 1,
              "raw": "b",
              "start": 15,
              "type": "Quasi",
            },
          ],
          "raw": "'b'",
          "start": 14,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "import a from 'b'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: import-named-with-alias 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 27,
    "inline": false,
    "line": 1,
    "raw": "import {a, b as c} from 'd'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 27,
        "line": 1,
        "namedImports": Array [
          ModuleSpecifier {
            "alias": null,
            "column": 9,
            "end": 9,
            "line": 1,
            "original": Identifier {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Identifier",
            },
            "raw": "a",
            "start": 8,
            "type": "ModuleSpecifier",
          },
          ModuleSpecifier {
            "alias": Identifier {
              "column": 17,
              "data": "c",
              "end": 17,
              "line": 1,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
            "column": 12,
            "end": 17,
            "line": 1,
            "original": Identifier {
              "column": 12,
              "data": "b",
              "end": 12,
              "line": 1,
              "raw": "b",
              "start": 11,
              "type": "Identifier",
            },
            "raw": "b as c",
            "start": 11,
            "type": "ModuleSpecifier",
          },
        ],
        "namespaceImport": null,
        "raw": "import {a, b as c} from 'd'",
        "source": String {
          "column": 25,
          "end": 27,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 26,
              "data": "d",
              "end": 26,
              "line": 1,
              "raw": "d",
              "start": 25,
              "type": "Quasi",
            },
          ],
          "raw": "'d'",
          "start": 24,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 28,
  "line": 1,
  "raw": "import {a, b as c} from 'd'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: import-star 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 22,
    "inline": false,
    "line": 1,
    "raw": "import * as a from 'b'",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 22,
        "line": 1,
        "namedImports": null,
        "namespaceImport": Identifier {
          "column": 13,
          "data": "a",
          "end": 13,
          "line": 1,
          "raw": "a",
          "start": 12,
          "type": "Identifier",
        },
        "raw": "import * as a from 'b'",
        "source": String {
          "column": 20,
          "end": 22,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 21,
              "data": "b",
              "end": 21,
              "line": 1,
              "raw": "b",
              "start": 20,
              "type": "Quasi",
            },
          ],
          "raw": "'b'",
          "start": 19,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 23,
  "line": 1,
  "raw": "import * as a from 'b'
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: import-without-specifiers 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "import 'a';",
    "start": 0,
    "statements": Array [
      ImportDeclaration {
        "column": 1,
        "defaultBinding": null,
        "end": 10,
        "line": 1,
        "namedImports": null,
        "namespaceImport": null,
        "raw": "import 'a'",
        "source": String {
          "column": 8,
          "end": 10,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 9,
              "data": "a",
              "end": 9,
              "line": 1,
              "raw": "a",
              "start": 8,
              "type": "Quasi",
            },
          ],
          "raw": "'a'",
          "start": 7,
          "type": "String",
        },
        "start": 0,
        "type": "ImportDeclaration",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "import 'a';
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a in b",
    "start": 0,
    "statements": Array [
      InOp {
        "column": 1,
        "end": 6,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a in b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a in b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: in-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not in b
a !in b",
    "start": 0,
    "statements": Array [
      InOp {
        "column": 1,
        "end": 10,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not in b",
        "right": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InOp",
      },
      InOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 12,
          "line": 2,
          "raw": "a",
          "start": 11,
          "type": "Identifier",
        },
        "line": 2,
        "raw": "a !in b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 18,
          "line": 2,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 11,
        "type": "InOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a not in b
a !in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: instanceof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "a instanceof b",
    "start": 0,
    "statements": Array [
      InstanceofOp {
        "column": 1,
        "end": 14,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a instanceof b",
        "right": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InstanceofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "a instanceof b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: instanceof-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not instanceof b",
    "start": 0,
    "statements": Array [
      InstanceofOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not instanceof b",
        "right": Identifier {
          "column": 18,
          "data": "b",
          "end": 18,
          "line": 1,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 0,
        "type": "InstanceofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a not instanceof b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: integer 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 1,
    "inline": false,
    "line": 1,
    "raw": "1",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 1,
        "end": 1,
        "line": 1,
        "raw": "1",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 1,
  "line": 1,
  "raw": "1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: js 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a = \`void 0\`",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 12,
        "expression": JavaScript {
          "column": 5,
          "data": "void 0",
          "end": 12,
          "line": 1,
          "raw": "\`void 0\`",
          "start": 4,
          "type": "JavaScript",
        },
        "line": 1,
        "raw": "a = \`void 0\`",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a = \`void 0\`",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: keyword-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a.break",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 7,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "break",
          "end": 7,
          "line": 1,
          "raw": "break",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "a.break",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "a.break
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: left-side-spread 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "a = [...b, c]",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 13,
        "expression": ArrayInitialiser {
          "column": 5,
          "end": 13,
          "line": 1,
          "members": Array [
            Spread {
              "column": 6,
              "end": 9,
              "expression": Identifier {
                "column": 9,
                "data": "b",
                "end": 9,
                "line": 1,
                "raw": "b",
                "start": 8,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "...b",
              "start": 5,
              "type": "Spread",
            },
            Identifier {
              "column": 12,
              "data": "c",
              "end": 12,
              "line": 1,
              "raw": "c",
              "start": 11,
              "type": "Identifier",
            },
          ],
          "raw": "[...b, c]",
          "start": 4,
          "type": "ArrayInitialiser",
        },
        "line": 1,
        "raw": "a = [...b, c]",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "a = [...b, c]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: less-than 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a < b",
    "start": 0,
    "statements": Array [
      LTOp {
        "column": 1,
        "end": 5,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a < b",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LTOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a < b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: less-than-equal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a <= b",
    "start": 0,
    "statements": Array [
      LTEOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a <= b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LTEOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a <= b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: logical-and 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a && b",
    "start": 0,
    "statements": Array [
      LogicalAndOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a && b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a && b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: logical-and-longform 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a and b",
    "start": 0,
    "statements": Array [
      LogicalAndOp {
        "column": 1,
        "end": 7,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a and b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 7,
          "line": 1,
          "raw": "b",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalAndOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a and b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: logical-or 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a || b",
    "start": 0,
    "statements": Array [
      LogicalOrOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a || b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a || b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: logical-or-longform 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a or b",
    "start": 0,
    "statements": Array [
      LogicalOrOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a or b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "LogicalOrOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a or b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "loop
  a",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 8,
              "line": 2,
              "raw": "a",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 8,
        "line": 1,
        "raw": "loop
  a",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "loop
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: many-expressions-in-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "(a; b; c; d; e) + f",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 19,
        "left": SeqOp {
          "column": 2,
          "end": 14,
          "left": Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a; b; c; d; e",
          "right": SeqOp {
            "column": 5,
            "end": 14,
            "left": Identifier {
              "column": 5,
              "data": "b",
              "end": 5,
              "line": 1,
              "raw": "b",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b; c; d; e",
            "right": SeqOp {
              "column": 8,
              "end": 14,
              "left": Identifier {
                "column": 8,
                "data": "c",
                "end": 8,
                "line": 1,
                "raw": "c",
                "start": 7,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "c; d; e",
              "right": SeqOp {
                "column": 11,
                "end": 14,
                "left": Identifier {
                  "column": 11,
                  "data": "d",
                  "end": 11,
                  "line": 1,
                  "raw": "d",
                  "start": 10,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "d; e",
                "right": Identifier {
                  "column": 14,
                  "data": "e",
                  "end": 14,
                  "line": 1,
                  "raw": "e",
                  "start": 13,
                  "type": "Identifier",
                },
                "start": 10,
                "type": "SeqOp",
              },
              "start": 7,
              "type": "SeqOp",
            },
            "start": 4,
            "type": "SeqOp",
          },
          "start": 1,
          "type": "SeqOp",
        },
        "line": 1,
        "raw": "(a; b; c; d; e) + f",
        "right": Identifier {
          "column": 19,
          "data": "f",
          "end": 19,
          "line": 1,
          "raw": "f",
          "start": 18,
          "type": "Identifier",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "(a; b; c; d; e) + f",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: modulo 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a %% b",
    "start": 0,
    "statements": Array [
      ModuloOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a %% b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ModuloOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a %% b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: multiline-interpolated-string-with-escaped-newline 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\\\
 #{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 13,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 4,
            "data": "b",
            "end": 11,
            "line": 2,
            "raw": "b",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 8,
            "line": 1,
            "raw": "\\\\
 ",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 12,
            "line": 2,
            "raw": "",
            "start": 12,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\\\
 #{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\\"#{a}\\\\
 #{b}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: multiline-string-with-interpolations-and-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 39,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 39,
        "expressions": Array [
          Identifier {
            "column": 9,
            "data": "c",
            "end": 17,
            "line": 3,
            "raw": "c",
            "start": 16,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "e",
            "end": 29,
            "line": 4,
            "raw": "e",
            "start": 28,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a
  b\\"",
            "end": 14,
            "line": 1,
            "raw": "
  a
    b\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
  d\\"",
            "end": 26,
            "line": 3,
            "raw": "\\"
    d\\"",
            "start": 18,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
f",
            "end": 36,
            "line": 4,
            "raw": "\\"
  f
",
            "start": 30,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 40,
  "line": 1,
  "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"#{e}\\"
  f
\\"\\"\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: multiline-string-with-quoted-interpolations-and-non-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 48,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 48,
        "expressions": Array [
          Identifier {
            "column": 9,
            "data": "c",
            "end": 17,
            "line": 3,
            "raw": "c",
            "start": 16,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "g",
            "end": 38,
            "line": 5,
            "raw": "g",
            "start": 37,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "a
  b\\"",
            "end": 14,
            "line": 1,
            "raw": "
  a
    b\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
  d\\"e\\"
  f\\"",
            "end": 35,
            "line": 3,
            "raw": "\\"
    d\\"e\\"
    f\\"",
            "start": 18,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "\\"
h",
            "end": 45,
            "line": 5,
            "raw": "\\"
  h
",
            "start": 39,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 49,
  "line": 1,
  "raw": "\\"\\"\\"
  a
    b\\"#{c}\\"
    d\\"e\\"
    f\\"#{g}\\"
  h
\\"\\"\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: multiple-expressions-in-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "a + (b; c)",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 10,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a + (b; c)",
        "right": SeqOp {
          "column": 6,
          "end": 9,
          "left": Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "b; c",
          "right": Identifier {
            "column": 9,
            "data": "c",
            "end": 9,
            "line": 1,
            "raw": "c",
            "start": 8,
            "type": "Identifier",
          },
          "start": 5,
          "type": "SeqOp",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "a + (b; c)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: multiplication 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 * 4",
    "start": 0,
    "statements": Array [
      MultiplyOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 * 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "MultiplyOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 * 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: negated-equality 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a != b",
    "start": 0,
    "statements": Array [
      NEQOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a != b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "NEQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a != b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: negated-equality-longhand 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "a isnt b",
    "start": 0,
    "statements": Array [
      NEQOp {
        "column": 1,
        "end": 8,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a isnt b",
        "right": Identifier {
          "column": 8,
          "data": "b",
          "end": 8,
          "line": 1,
          "raw": "b",
          "start": 7,
          "type": "Identifier",
        },
        "start": 0,
        "type": "NEQOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "a isnt b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "!a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "!a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "!a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: negation-with-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "not a",
    "start": 0,
    "statements": Array [
      LogicalNotOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 5,
          "data": "a",
          "end": 5,
          "line": 1,
          "raw": "a",
          "start": 4,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "not a",
        "start": 0,
        "type": "LogicalNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "not a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-code-with-outdent 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 52,
    "inline": false,
    "line": 1,
    "raw": "a {
  b: ->
    return c d,
      if e
        f
}
g",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          ObjectInitialiser {
            "column": 3,
            "end": 50,
            "line": 1,
            "members": Array [
              ObjectInitialiserMember {
                "column": 3,
                "end": 48,
                "expression": Function {
                  "body": Block {
                    "column": 5,
                    "end": 48,
                    "inline": false,
                    "line": 3,
                    "raw": "return c d,
      if e
        f",
                    "start": 16,
                    "statements": Array [
                      Return {
                        "column": 5,
                        "end": 48,
                        "expression": FunctionApplication {
                          "arguments": Array [
                            Identifier {
                              "column": 14,
                              "data": "d",
                              "end": 26,
                              "line": 3,
                              "raw": "d",
                              "start": 25,
                              "type": "Identifier",
                            },
                            Conditional {
                              "alternate": null,
                              "column": 7,
                              "condition": Identifier {
                                "column": 10,
                                "data": "e",
                                "end": 38,
                                "line": 4,
                                "raw": "e",
                                "start": 37,
                                "type": "Identifier",
                              },
                              "consequent": Block {
                                "column": 9,
                                "end": 48,
                                "inline": false,
                                "line": 5,
                                "raw": "f",
                                "start": 47,
                                "statements": Array [
                                  Identifier {
                                    "column": 9,
                                    "data": "f",
                                    "end": 48,
                                    "line": 5,
                                    "raw": "f",
                                    "start": 47,
                                    "type": "Identifier",
                                  },
                                ],
                                "type": "Block",
                              },
                              "end": 48,
                              "isUnless": false,
                              "line": 4,
                              "raw": "if e
        f",
                              "start": 34,
                              "type": "Conditional",
                            },
                          ],
                          "column": 12,
                          "end": 48,
                          "function": Identifier {
                            "column": 12,
                            "data": "c",
                            "end": 24,
                            "line": 3,
                            "raw": "c",
                            "start": 23,
                            "type": "Identifier",
                          },
                          "line": 3,
                          "raw": "c d,
      if e
        f",
                          "start": 23,
                          "type": "FunctionApplication",
                        },
                        "line": 3,
                        "raw": "return c d,
      if e
        f",
                        "start": 16,
                        "type": "Return",
                      },
                    ],
                    "type": "Block",
                  },
                  "column": 6,
                  "end": 48,
                  "line": 2,
                  "parameters": Array [],
                  "raw": "->
    return c d,
      if e
        f",
                  "start": 9,
                  "type": "Function",
                },
                "isComputed": false,
                "key": Identifier {
                  "column": 3,
                  "data": "b",
                  "end": 7,
                  "line": 2,
                  "raw": "b",
                  "start": 6,
                  "type": "Identifier",
                },
                "line": 2,
                "raw": "b: ->
    return c d,
      if e
        f",
                "start": 6,
                "type": "ObjectInitialiserMember",
              },
            ],
            "raw": "{
  b: ->
    return c d,
      if e
        f
}",
            "start": 2,
            "type": "ObjectInitialiser",
          },
        ],
        "column": 1,
        "end": 50,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a {
  b: ->
    return c d,
      if e
        f
}",
        "start": 0,
        "type": "FunctionApplication",
      },
      Identifier {
        "column": 1,
        "data": "g",
        "end": 52,
        "line": 7,
        "raw": "g",
        "start": 51,
        "type": "Identifier",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 53,
  "line": 1,
  "raw": "a {
  b: ->
    return c d,
      if e
        f
}
g
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-conditionals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 31,
    "inline": false,
    "line": 1,
    "raw": "if a
  b
else if c
  d
else
  e",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": Block {
          "column": 6,
          "end": 31,
          "inline": true,
          "line": 3,
          "raw": "if c
  d
else
  e",
          "start": 14,
          "statements": Array [
            Conditional {
              "alternate": Block {
                "column": 3,
                "end": 31,
                "inline": false,
                "line": 6,
                "raw": "e",
                "start": 30,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "e",
                    "end": 31,
                    "line": 6,
                    "raw": "e",
                    "start": 30,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "condition": Identifier {
                "column": 9,
                "data": "c",
                "end": 18,
                "line": 3,
                "raw": "c",
                "start": 17,
                "type": "Identifier",
              },
              "consequent": Block {
                "column": 3,
                "end": 22,
                "inline": false,
                "line": 4,
                "raw": "d",
                "start": 21,
                "statements": Array [
                  Identifier {
                    "column": 3,
                    "data": "d",
                    "end": 22,
                    "line": 4,
                    "raw": "d",
                    "start": 21,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "end": 31,
              "isUnless": false,
              "line": 3,
              "raw": "if c
  d
else
  e",
              "start": 14,
              "type": "Conditional",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 4,
          "data": "a",
          "end": 4,
          "line": 1,
          "raw": "a",
          "start": 3,
          "type": "Identifier",
        },
        "consequent": Block {
          "column": 3,
          "end": 8,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 7,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 8,
              "line": 2,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 31,
        "isUnless": false,
        "line": 1,
        "raw": "if a
  b
else if c
  d
else
  e",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 31,
  "line": 1,
  "raw": "if a
  b
else if c
  d
else
  e",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-member-expressions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a.b.c",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": MemberAccessOp {
          "column": 1,
          "end": 3,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          "raw": "a.b",
          "start": 0,
          "type": "MemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "c",
          "end": 5,
          "line": 1,
          "raw": "c",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "a.b.c",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a.b.c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-object-literals 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a:
  b: c",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 9,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 9,
            "expression": ObjectInitialiser {
              "column": 3,
              "end": 9,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 3,
                  "end": 9,
                  "expression": Identifier {
                    "column": 6,
                    "data": "c",
                    "end": 9,
                    "line": 2,
                    "raw": "c",
                    "start": 8,
                    "type": "Identifier",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 6,
                    "line": 2,
                    "raw": "b",
                    "start": 5,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: c",
                  "start": 5,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "b: c",
              "start": 5,
              "type": "ObjectInitialiser",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a:
  b: c",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a:
  b: c",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a:
  b: c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-object-with-inner-semicolon 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "a:
  b: ->
    c;",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 17,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 17,
            "expression": ObjectInitialiser {
              "column": 3,
              "end": 17,
              "line": 2,
              "members": Array [
                ObjectInitialiserMember {
                  "column": 3,
                  "end": 17,
                  "expression": Function {
                    "body": Block {
                      "column": 5,
                      "end": 17,
                      "inline": false,
                      "line": 3,
                      "raw": "c;",
                      "start": 15,
                      "statements": Array [
                        Identifier {
                          "column": 5,
                          "data": "c",
                          "end": 16,
                          "line": 3,
                          "raw": "c",
                          "start": 15,
                          "type": "Identifier",
                        },
                      ],
                      "type": "Block",
                    },
                    "column": 6,
                    "end": 17,
                    "line": 2,
                    "parameters": Array [],
                    "raw": "->
    c;",
                    "start": 8,
                    "type": "Function",
                  },
                  "isComputed": false,
                  "key": Identifier {
                    "column": 3,
                    "data": "b",
                    "end": 6,
                    "line": 2,
                    "raw": "b",
                    "start": 5,
                    "type": "Identifier",
                  },
                  "line": 2,
                  "raw": "b: ->
    c;",
                  "start": 5,
                  "type": "ObjectInitialiserMember",
                },
              ],
              "raw": "b: ->
    c;",
              "start": 5,
              "type": "ObjectInitialiser",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a:
  b: ->
    c;",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a:
  b: ->
    c;",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "a:
  b: ->
    c;
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: nested-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{\\"b#{c}\\"}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 13,
        "expressions": Array [
          String {
            "column": 5,
            "end": 11,
            "expressions": Array [
              Identifier {
                "column": 9,
                "data": "c",
                "end": 9,
                "line": 1,
                "raw": "c",
                "start": 8,
                "type": "Identifier",
              },
            ],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 6,
                "data": "b",
                "end": 6,
                "line": 1,
                "raw": "b",
                "start": 5,
                "type": "Quasi",
              },
              Quasi {
                "column": 11,
                "data": "",
                "end": 10,
                "line": 1,
                "raw": "",
                "start": 10,
                "type": "Quasi",
              },
            ],
            "raw": "\\"b#{c}\\"",
            "start": 4,
            "type": "String",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 13,
            "data": "",
            "end": 12,
            "line": 1,
            "raw": "",
            "start": 12,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{\\"b#{c}\\"}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"a#{\\"b#{c}\\"}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: new 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "new a.B()",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [],
        "column": 1,
        "ctor": MemberAccessOp {
          "column": 5,
          "end": 7,
          "expression": Identifier {
            "column": 5,
            "data": "a",
            "end": 5,
            "line": 1,
            "raw": "a",
            "start": 4,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 7,
            "data": "B",
            "end": 7,
            "line": 1,
            "raw": "B",
            "start": 6,
            "type": "Identifier",
          },
          "raw": "a.B",
          "start": 4,
          "type": "MemberAccessOp",
        },
        "end": 9,
        "line": 1,
        "raw": "new a.B()",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "new a.B()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: new-with-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "-> new A().b(c)",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 4,
          "end": 15,
          "inline": true,
          "line": 1,
          "raw": "new A().b(c)",
          "start": 3,
          "statements": Array [
            FunctionApplication {
              "arguments": Array [
                Identifier {
                  "column": 14,
                  "data": "c",
                  "end": 14,
                  "line": 1,
                  "raw": "c",
                  "start": 13,
                  "type": "Identifier",
                },
              ],
              "column": 4,
              "end": 15,
              "function": MemberAccessOp {
                "column": 4,
                "end": 12,
                "expression": NewOp {
                  "arguments": Array [],
                  "column": 4,
                  "ctor": Identifier {
                    "column": 8,
                    "data": "A",
                    "end": 8,
                    "line": 1,
                    "raw": "A",
                    "start": 7,
                    "type": "Identifier",
                  },
                  "end": 10,
                  "line": 1,
                  "raw": "new A()",
                  "start": 3,
                  "type": "NewOp",
                },
                "line": 1,
                "member": Identifier {
                  "column": 12,
                  "data": "b",
                  "end": 12,
                  "line": 1,
                  "raw": "b",
                  "start": 11,
                  "type": "Identifier",
                },
                "raw": "new A().b",
                "start": 3,
                "type": "MemberAccessOp",
              },
              "line": 1,
              "raw": "new A().b(c)",
              "start": 3,
              "type": "FunctionApplication",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "parameters": Array [],
        "raw": "-> new A().b(c)",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "-> new A().b(c)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: new-without-parens 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "new A",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "A",
          "end": 5,
          "line": 1,
          "raw": "A",
          "start": 4,
          "type": "Identifier",
        },
        "end": 5,
        "line": 1,
        "raw": "new A",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "new A",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: null 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "null",
    "start": 0,
    "statements": Array [
      Null {
        "column": 1,
        "end": 4,
        "line": 1,
        "raw": "null",
        "start": 0,
        "type": "Null",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "null",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: number-object-key 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "arr",
          "end": 3,
          "line": 1,
          "raw": "arr",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 38,
        "expression": ObjectInitialiser {
          "column": 7,
          "end": 38,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 8,
              "end": 16,
              "expression": Int {
                "column": 16,
                "data": 1,
                "end": 16,
                "line": 1,
                "raw": "1",
                "start": 15,
                "type": "Int",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 8,
                "data": "length",
                "end": 13,
                "line": 1,
                "raw": "length",
                "start": 7,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "length: 1",
              "start": 7,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 19,
              "end": 28,
              "expression": String {
                "column": 22,
                "end": 28,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 23,
                    "data": "Hello",
                    "end": 27,
                    "line": 1,
                    "raw": "Hello",
                    "start": 22,
                    "type": "Quasi",
                  },
                ],
                "raw": "'Hello'",
                "start": 21,
                "type": "String",
              },
              "isComputed": false,
              "key": Int {
                "column": 19,
                "data": 0,
                "end": 19,
                "line": 1,
                "raw": "0",
                "start": 18,
                "type": "Int",
              },
              "line": 1,
              "raw": "0: 'Hello'",
              "start": 18,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 31,
              "end": 37,
              "expression": Int {
                "column": 37,
                "data": 0,
                "end": 37,
                "line": 1,
                "raw": "0",
                "start": 36,
                "type": "Int",
              },
              "isComputed": false,
              "key": Float {
                "column": 31,
                "data": 3.14,
                "end": 34,
                "line": 1,
                "raw": "3.14",
                "start": 30,
                "type": "Float",
              },
              "line": 1,
              "raw": "3.14: 0",
              "start": 30,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{length: 1, 0: 'Hello', 3.14: 0}",
          "start": 6,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "arr = {length: 1, 0: 'Hello', 3.14: 0}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-destructure-with-default 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a = 1} = b",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": ObjectInitialiser {
          "column": 1,
          "end": 7,
          "line": 1,
          "members": Array [
            AssignOp {
              "assignee": Identifier {
                "column": 2,
                "data": "a",
                "end": 2,
                "line": 1,
                "raw": "a",
                "start": 1,
                "type": "Identifier",
              },
              "column": 2,
              "end": 6,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 6,
                "line": 1,
                "raw": "1",
                "start": 5,
                "type": "Int",
              },
              "line": 1,
              "raw": "a = 1",
              "start": 1,
              "type": "AssignOp",
            },
          ],
          "raw": "{a = 1}",
          "start": 0,
          "type": "ObjectInitialiser",
        },
        "column": 1,
        "end": 11,
        "expression": Identifier {
          "column": 11,
          "data": "b",
          "end": 11,
          "line": 1,
          "raw": "b",
          "start": 10,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "{a = 1} = b",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a = 1} = b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-spread 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "o = {a..., b}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "o",
          "end": 1,
          "line": 1,
          "raw": "o",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 13,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 13,
          "line": 1,
          "members": Array [
            Spread {
              "column": 6,
              "end": 9,
              "expression": Identifier {
                "column": 6,
                "data": "a",
                "end": 6,
                "line": 1,
                "raw": "a",
                "start": 5,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "a...",
              "start": 5,
              "type": "Spread",
            },
            ObjectInitialiserMember {
              "column": 12,
              "end": 12,
              "expression": null,
              "isComputed": false,
              "key": Identifier {
                "column": 12,
                "data": "b",
                "end": 12,
                "line": 1,
                "raw": "b",
                "start": 11,
                "type": "Identifier",
              },
              "line": 1,
              "raw": "b",
              "start": 11,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{a..., b}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "o = {a..., b}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "o = {a..., b}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-with-block-comments 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 47,
    "inline": false,
    "line": 1,
    "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "obj",
          "end": 3,
          "line": 1,
          "raw": "obj",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 47,
        "expression": ObjectInitialiser {
          "column": 3,
          "end": 47,
          "line": 5,
          "members": Array [
            ObjectInitialiserMember {
              "column": 3,
              "end": 47,
              "expression": Int {
                "column": 6,
                "data": 1,
                "end": 47,
                "line": 5,
                "raw": "1",
                "start": 46,
                "type": "Int",
              },
              "isComputed": false,
              "key": Identifier {
                "column": 3,
                "data": "a",
                "end": 44,
                "line": 5,
                "raw": "a",
                "start": 43,
                "type": "Identifier",
              },
              "line": 5,
              "raw": "a: 1",
              "start": 43,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "a: 1",
          "start": 43,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 47,
  "line": 1,
  "raw": "obj =
  ###
  # @returns {boolean}
  ###
  a: 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-with-braces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "{a: 1}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 6,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 5,
            "expression": Int {
              "column": 5,
              "data": 1,
              "end": 5,
              "line": 1,
              "raw": "1",
              "start": 4,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: 1",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: 1}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "{a: 1}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-with-combined-key-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{ a, b: 1 }",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 3,
            "end": 3,
            "expression": null,
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "a",
              "end": 3,
              "line": 1,
              "raw": "a",
              "start": 2,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a",
            "start": 2,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 6,
            "end": 9,
            "expression": Int {
              "column": 9,
              "data": 1,
              "end": 9,
              "line": 1,
              "raw": "1",
              "start": 8,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 6,
              "data": "b",
              "end": 6,
              "line": 1,
              "raw": "b",
              "start": 5,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b: 1",
            "start": 5,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{ a, b: 1 }",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "{ a, b: 1 }",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-with-multiple-properties 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "{
  a: 1,
  b: 2
}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 18,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 3,
            "end": 8,
            "expression": Int {
              "column": 6,
              "data": 1,
              "end": 8,
              "line": 2,
              "raw": "1",
              "start": 7,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "a",
              "end": 5,
              "line": 2,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
            "line": 2,
            "raw": "a: 1",
            "start": 4,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 3,
            "end": 16,
            "expression": Int {
              "column": 6,
              "data": 2,
              "end": 16,
              "line": 3,
              "raw": "2",
              "start": 15,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 3,
              "data": "b",
              "end": 13,
              "line": 3,
              "raw": "b",
              "start": 12,
              "type": "Identifier",
            },
            "line": 3,
            "raw": "b: 2",
            "start": 12,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{
  a: 1,
  b: 2
}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "{
  a: 1,
  b: 2
}",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-with-parenthesized-value 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a: (b), c}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 7,
            "expression": Identifier {
              "column": 6,
              "data": "b",
              "end": 6,
              "line": 1,
              "raw": "b",
              "start": 5,
              "type": "Identifier",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: (b)",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
          ObjectInitialiserMember {
            "column": 10,
            "end": 10,
            "expression": null,
            "isComputed": false,
            "key": Identifier {
              "column": 10,
              "data": "c",
              "end": 10,
              "line": 1,
              "raw": "c",
              "start": 9,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "c",
            "start": 9,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: (b), c}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a: (b), c}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: object-without-braces 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a: 1",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 4,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 1,
            "end": 4,
            "expression": Int {
              "column": 4,
              "data": 1,
              "end": 4,
              "line": 1,
              "raw": "1",
              "start": 3,
              "type": "Int",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: 1",
            "start": 0,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "a: 1",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a: 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: octal-number 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "0o1234",
    "start": 0,
    "statements": Array [
      Int {
        "column": 1,
        "data": 668,
        "end": 6,
        "line": 1,
        "raw": "0o1234",
        "start": 0,
        "type": "Int",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "0o1234",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: of 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a of b",
    "start": 0,
    "statements": Array [
      OfOp {
        "column": 1,
        "end": 6,
        "isNot": false,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a of b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "OfOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a of b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: of-not 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "a not of b
a !of b",
    "start": 0,
    "statements": Array [
      OfOp {
        "column": 1,
        "end": 10,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a not of b",
        "right": Identifier {
          "column": 10,
          "data": "b",
          "end": 10,
          "line": 1,
          "raw": "b",
          "start": 9,
          "type": "Identifier",
        },
        "start": 0,
        "type": "OfOp",
      },
      OfOp {
        "column": 1,
        "end": 18,
        "isNot": true,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 12,
          "line": 2,
          "raw": "a",
          "start": 11,
          "type": "Identifier",
        },
        "line": 2,
        "raw": "a !of b",
        "right": Identifier {
          "column": 7,
          "data": "b",
          "end": 18,
          "line": 2,
          "raw": "b",
          "start": 17,
          "type": "Identifier",
        },
        "start": 11,
        "type": "OfOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "a not of b
a !of b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: only-empty-string-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "\\"#{}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 5,
        "expressions": Array [
          null,
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 4,
            "line": 1,
            "raw": "",
            "start": 4,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "\\"#{}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: parentheses 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "(a + b) * c",
    "start": 0,
    "statements": Array [
      MultiplyOp {
        "column": 1,
        "end": 11,
        "left": PlusOp {
          "column": 2,
          "end": 6,
          "left": Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a + b",
          "right": Identifier {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Identifier",
          },
          "start": 1,
          "type": "PlusOp",
        },
        "line": 1,
        "raw": "(a + b) * c",
        "right": Identifier {
          "column": 11,
          "data": "c",
          "end": 11,
          "line": 1,
          "raw": "c",
          "start": 10,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MultiplyOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "(a + b) * c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: parenthesized-arrow-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a (->)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Function {
            "body": null,
            "column": 4,
            "end": 5,
            "line": 1,
            "parameters": Array [],
            "raw": "->",
            "start": 3,
            "type": "Function",
          },
        ],
        "column": 1,
        "end": 6,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a (->)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a (->)
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: parenthesized-break-in-postfix-while 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "(break) while true",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 1,
          "end": 7,
          "inline": true,
          "line": 1,
          "raw": "(break)",
          "start": 0,
          "statements": Array [
            Break {
              "column": 2,
              "end": 6,
              "line": 1,
              "raw": "break",
              "start": 1,
              "type": "Break",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Bool {
          "column": 15,
          "data": true,
          "end": 18,
          "line": 1,
          "raw": "true",
          "start": 14,
          "type": "Bool",
        },
        "end": 18,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "(break) while true",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "(break) while true
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: parenthesized-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "(a).b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "(a).b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "(a).b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: post-decrement 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a--",
    "start": 0,
    "statements": Array [
      PostDecrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a--",
        "start": 0,
        "type": "PostDecrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a--",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: post-for 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a for a in b",
    "start": 0,
    "statements": Array [
      ForIn {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 12,
        "filter": null,
        "keyAssignee": null,
        "line": 1,
        "raw": "a for a in b",
        "start": 0,
        "step": null,
        "target": Identifier {
          "column": 12,
          "data": "b",
          "end": 12,
          "line": 1,
          "raw": "b",
          "start": 11,
          "type": "Identifier",
        },
        "type": "ForIn",
        "valAssignee": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a for a in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: post-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a++",
    "start": 0,
    "statements": Array [
      PostIncrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a++",
        "start": 0,
        "type": "PostIncrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a++",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: post-unless-not-if 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "c unless a not in b",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 10,
          "end": 19,
          "isNot": true,
          "left": Identifier {
            "column": 10,
            "data": "a",
            "end": 10,
            "line": 1,
            "raw": "a",
            "start": 9,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not in b",
          "right": Identifier {
            "column": 19,
            "data": "b",
            "end": 19,
            "line": 1,
            "raw": "b",
            "start": 18,
            "type": "Identifier",
          },
          "start": 9,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "c",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "c",
              "end": 1,
              "line": 1,
              "raw": "c",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 19,
        "isUnless": true,
        "line": 1,
        "raw": "c unless a not in b",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "c unless a not in b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: post-while-with-loop 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "loop a while b",
    "start": 0,
    "statements": Array [
      Loop {
        "body": Block {
          "column": 6,
          "end": 14,
          "inline": true,
          "line": 1,
          "raw": "a while b",
          "start": 5,
          "statements": Array [
            While {
              "body": Block {
                "column": 6,
                "end": 6,
                "inline": true,
                "line": 1,
                "raw": "a",
                "start": 5,
                "statements": Array [
                  Identifier {
                    "column": 6,
                    "data": "a",
                    "end": 6,
                    "line": 1,
                    "raw": "a",
                    "start": 5,
                    "type": "Identifier",
                  },
                ],
                "type": "Block",
              },
              "column": 6,
              "condition": Identifier {
                "column": 14,
                "data": "b",
                "end": 14,
                "line": 1,
                "raw": "b",
                "start": 13,
                "type": "Identifier",
              },
              "end": 14,
              "guard": null,
              "isUntil": false,
              "line": 1,
              "raw": "a while b",
              "start": 5,
              "type": "While",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 14,
        "line": 1,
        "raw": "loop a while b",
        "start": 0,
        "type": "Loop",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "loop a while b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: pow 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a ** b",
    "start": 0,
    "statements": Array [
      ExpOp {
        "column": 1,
        "end": 6,
        "left": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a ** b",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "ExpOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a ** b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: pre-decrement 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "--a",
    "start": 0,
    "statements": Array [
      PreDecrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "--a",
        "start": 0,
        "type": "PreDecrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "--a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: pre-increment 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "++a",
    "start": 0,
    "statements": Array [
      PreIncrementOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "++a",
        "start": 0,
        "type": "PreIncrementOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "++a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: prototype-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "Object::toString",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 16,
        "expression": ProtoMemberAccessOp {
          "column": 1,
          "end": 8,
          "expression": Identifier {
            "column": 1,
            "data": "Object",
            "end": 6,
            "line": 1,
            "raw": "Object",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "Object::",
          "start": 0,
          "type": "ProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 9,
          "data": "toString",
          "end": 16,
          "line": 1,
          "raw": "toString",
          "start": 8,
          "type": "Identifier",
        },
        "raw": "Object::toString",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "Object::toString",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: range-exclusive 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "[a...b]",
    "start": 0,
    "statements": Array [
      Range {
        "column": 1,
        "end": 7,
        "isInclusive": false,
        "left": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a...b]",
        "right": Identifier {
          "column": 6,
          "data": "b",
          "end": 6,
          "line": 1,
          "raw": "b",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Range",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "[a...b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: range-inclusive 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "[a..b]",
    "start": 0,
    "statements": Array [
      Range {
        "column": 1,
        "end": 6,
        "isInclusive": true,
        "left": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "[a..b]",
        "right": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Range",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "[a..b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: regex-with-flags 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "/a/gimuy",
    "start": 0,
    "statements": Array [
      Regex {
        "column": 1,
        "end": 8,
        "flags": RegexFlags {
          "g": true,
          "global": true,
          "i": true,
          "ignoreCase": true,
          "m": true,
          "multiline": true,
          "sticky": true,
          "u": true,
          "unicode": true,
          "y": true,
        },
        "line": 1,
        "pattern": "a",
        "raw": "/a/gimuy",
        "start": 0,
        "type": "Regex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "/a/gimuy
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: regexp 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "/a/",
    "start": 0,
    "statements": Array [
      Regex {
        "column": 1,
        "end": 3,
        "flags": RegexFlags {
          "g": false,
          "global": false,
          "i": false,
          "ignoreCase": false,
          "m": false,
          "multiline": false,
          "sticky": false,
          "u": false,
          "unicode": false,
          "y": false,
        },
        "line": 1,
        "pattern": "a",
        "raw": "/a/",
        "start": 0,
        "type": "Regex",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "/a/
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: remainder 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 % 4",
    "start": 0,
    "statements": Array [
      RemOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 % 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "RemOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 % 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: rest-param-in-bound-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "(rest...) =>",
    "start": 0,
    "statements": Array [
      BoundFunction {
        "body": null,
        "column": 1,
        "end": 12,
        "line": 1,
        "parameters": Array [
          Rest {
            "column": 2,
            "end": 8,
            "expression": Identifier {
              "column": 2,
              "data": "rest",
              "end": 5,
              "line": 1,
              "raw": "rest",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "rest...",
            "start": 1,
            "type": "Rest",
          },
        ],
        "raw": "(rest...) =>",
        "start": 0,
        "type": "BoundFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "(rest...) =>",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: rest-param-in-function 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "(rest...) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 12,
        "line": 1,
        "parameters": Array [
          Rest {
            "column": 2,
            "end": 8,
            "expression": Identifier {
              "column": 2,
              "data": "rest",
              "end": 5,
              "line": 1,
              "raw": "rest",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "rest...",
            "start": 1,
            "type": "Rest",
          },
        ],
        "raw": "(rest...) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "(rest...) ->",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: return-with-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "->
  return a",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 13,
          "inline": false,
          "line": 2,
          "raw": "return a",
          "start": 5,
          "statements": Array [
            Return {
              "column": 3,
              "end": 13,
              "expression": Identifier {
                "column": 10,
                "data": "a",
                "end": 13,
                "line": 2,
                "raw": "a",
                "start": 12,
                "type": "Identifier",
              },
              "line": 2,
              "raw": "return a",
              "start": 5,
              "type": "Return",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 13,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  return a",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "->
  return a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: return-without-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "->
  return",
    "start": 0,
    "statements": Array [
      Function {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "return",
          "start": 5,
          "statements": Array [
            Return {
              "column": 3,
              "end": 11,
              "expression": null,
              "line": 2,
              "raw": "return",
              "start": 5,
              "type": "Return",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 11,
        "line": 1,
        "parameters": Array [],
        "raw": "->
  return",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "->
  return",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-object-with-interpolated-strings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "x = {\\"a#{b}c\\"}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 14,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 14,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 6,
              "end": 13,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 6,
                "end": 13,
                "expressions": Array [
                  Identifier {
                    "column": 10,
                    "data": "b",
                    "end": 10,
                    "line": 1,
                    "raw": "b",
                    "start": 9,
                    "type": "Identifier",
                  },
                ],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 7,
                    "data": "a",
                    "end": 7,
                    "line": 1,
                    "raw": "a",
                    "start": 6,
                    "type": "Quasi",
                  },
                  Quasi {
                    "column": 12,
                    "data": "c",
                    "end": 12,
                    "line": 1,
                    "raw": "c",
                    "start": 11,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"a#{b}c\\"",
                "start": 5,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"a#{b}c\\"",
              "start": 5,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{\\"a#{b}c\\"}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "x = {\\"a#{b}c\\"}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "x = {\\"a#{b}c\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-object-with-strings 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 25,
    "inline": false,
    "line": 1,
    "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "x",
          "end": 1,
          "line": 1,
          "raw": "x",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 25,
        "expression": ObjectInitialiser {
          "column": 5,
          "end": 25,
          "line": 1,
          "members": Array [
            ObjectInitialiserMember {
              "column": 6,
              "end": 10,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 6,
                "end": 10,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 7,
                    "data": "FOO",
                    "end": 9,
                    "line": 1,
                    "raw": "FOO",
                    "start": 6,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"FOO\\"",
                "start": 5,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"FOO\\"",
              "start": 5,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 13,
              "end": 17,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 13,
                "end": 17,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 14,
                    "data": "BAR",
                    "end": 16,
                    "line": 1,
                    "raw": "BAR",
                    "start": 13,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"BAR\\"",
                "start": 12,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"BAR\\"",
              "start": 12,
              "type": "ObjectInitialiserMember",
            },
            ObjectInitialiserMember {
              "column": 20,
              "end": 24,
              "expression": null,
              "isComputed": false,
              "key": String {
                "column": 20,
                "end": 24,
                "expressions": Array [],
                "line": 1,
                "quasis": Array [
                  Quasi {
                    "column": 21,
                    "data": "BAZ",
                    "end": 23,
                    "line": 1,
                    "raw": "BAZ",
                    "start": 20,
                    "type": "Quasi",
                  },
                ],
                "raw": "\\"BAZ\\"",
                "start": 19,
                "type": "String",
              },
              "line": 1,
              "raw": "\\"BAZ\\"",
              "start": 19,
              "type": "ObjectInitialiserMember",
            },
          ],
          "raw": "{\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
          "start": 4,
          "type": "ObjectInitialiser",
        },
        "line": 1,
        "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "x = {\\"FOO\\", \\"BAR\\", \\"BAZ\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-object-with-this 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "{@a}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 4,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 3,
            "expression": null,
            "isComputed": false,
            "key": MemberAccessOp {
              "column": 2,
              "end": 3,
              "expression": This {
                "column": 2,
                "end": 2,
                "line": 1,
                "raw": "@",
                "start": 1,
                "type": "This",
              },
              "line": 1,
              "member": Identifier {
                "column": 3,
                "data": "a",
                "end": 3,
                "line": 1,
                "raw": "a",
                "start": 2,
                "type": "Identifier",
              },
              "raw": "@a",
              "start": 1,
              "type": "MemberAccessOp",
            },
            "line": 1,
            "raw": "@a",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{@a}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "{@a}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-this 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 1,
    "inline": false,
    "line": 1,
    "raw": "@",
    "start": 0,
    "statements": Array [
      This {
        "column": 1,
        "end": 1,
        "line": 1,
        "raw": "@",
        "start": 0,
        "type": "This",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 1,
  "line": 1,
  "raw": "@",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-this-member-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "@a",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 2,
        "expression": This {
          "column": 1,
          "end": 1,
          "line": 1,
          "raw": "@",
          "start": 0,
          "type": "This",
        },
        "line": 1,
        "member": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "raw": "@a",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "@a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: shorthand-this-member-expression-with-dot 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "@.a",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 3,
        "expression": This {
          "column": 1,
          "end": 1,
          "line": 1,
          "raw": "@",
          "start": 0,
          "type": "This",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "a",
          "end": 3,
          "line": 1,
          "raw": "a",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "@.a",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "@.a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: simple-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 3,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: simple-member-expression 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 3,
    "inline": false,
    "line": 1,
    "raw": "a.b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 3,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "raw": "a.b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 3,
  "line": 1,
  "raw": "a.b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: slice-with-lower-and-upper-bounds 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a[b..c]",
    "start": 0,
    "statements": Array [
      Slice {
        "column": 1,
        "end": 7,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": Identifier {
          "column": 3,
          "data": "b",
          "end": 3,
          "line": 1,
          "raw": "b",
          "start": 2,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a[b..c]",
        "right": Identifier {
          "column": 6,
          "data": "c",
          "end": 6,
          "line": 1,
          "raw": "c",
          "start": 5,
          "type": "Identifier",
        },
        "start": 0,
        "type": "Slice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a[b..c]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: slice-with-no-bounds 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a[..]",
    "start": 0,
    "statements": Array [
      Slice {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": null,
        "line": 1,
        "raw": "a[..]",
        "right": null,
        "start": 0,
        "type": "Slice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a[..]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-dynamic-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a?[b]",
    "start": 0,
    "statements": Array [
      SoakedDynamicMemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "indexingExpr": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b]",
        "start": 0,
        "type": "SoakedDynamicMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "a?[b]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a?()",
    "start": 0,
    "statements": Array [
      SoakedFunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 4,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?()",
        "start": 0,
        "type": "SoakedFunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a?()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-member-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "a?.b",
    "start": 0,
    "statements": Array [
      SoakedMemberAccessOp {
        "column": 1,
        "end": 4,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "member": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "raw": "a?.b",
        "start": 0,
        "type": "SoakedMemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "a?.b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-method-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "a?.b()",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [],
        "column": 1,
        "end": 6,
        "function": SoakedMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "member": Identifier {
            "column": 4,
            "data": "b",
            "end": 4,
            "line": 1,
            "raw": "b",
            "start": 3,
            "type": "Identifier",
          },
          "raw": "a?.b",
          "start": 0,
          "type": "SoakedMemberAccessOp",
        },
        "line": 1,
        "raw": "a?.b()",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a?.b()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-new 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "new A? b",
    "start": 0,
    "statements": Array [
      SoakedNewOp {
        "arguments": Array [
          Identifier {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "A",
          "end": 5,
          "line": 1,
          "raw": "A",
          "start": 4,
          "type": "Identifier",
        },
        "end": 8,
        "line": 1,
        "raw": "new A? b",
        "start": 0,
        "type": "SoakedNewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "new A? b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-prototype-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "a?::b",
    "start": 0,
    "statements": Array [
      MemberAccessOp {
        "column": 1,
        "end": 5,
        "expression": SoakedProtoMemberAccessOp {
          "column": 1,
          "end": 4,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?::",
          "start": 0,
          "type": "SoakedProtoMemberAccessOp",
        },
        "line": 1,
        "member": Identifier {
          "column": 5,
          "data": "b",
          "end": 5,
          "line": 1,
          "raw": "b",
          "start": 4,
          "type": "Identifier",
        },
        "raw": "a?::b",
        "start": 0,
        "type": "MemberAccessOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "a?::b
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-slice 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "a?[b..c]",
    "start": 0,
    "statements": Array [
      SoakedSlice {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "isInclusive": true,
        "left": Identifier {
          "column": 4,
          "data": "b",
          "end": 4,
          "line": 1,
          "raw": "b",
          "start": 3,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b..c]",
        "right": Identifier {
          "column": 7,
          "data": "c",
          "end": 7,
          "line": 1,
          "raw": "c",
          "start": 6,
          "type": "Identifier",
        },
        "start": 0,
        "type": "SoakedSlice",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a?[b..c]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: soaked-splice 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a?[b..c] = d",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": SoakedSlice {
          "column": 1,
          "end": 8,
          "expression": Identifier {
            "column": 1,
            "data": "a",
            "end": 1,
            "line": 1,
            "raw": "a",
            "start": 0,
            "type": "Identifier",
          },
          "isInclusive": true,
          "left": Identifier {
            "column": 4,
            "data": "b",
            "end": 4,
            "line": 1,
            "raw": "b",
            "start": 3,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a?[b..c]",
          "right": Identifier {
            "column": 7,
            "data": "c",
            "end": 7,
            "line": 1,
            "raw": "c",
            "start": 6,
            "type": "Identifier",
          },
          "start": 0,
          "type": "SoakedSlice",
        },
        "column": 1,
        "end": 12,
        "expression": Identifier {
          "column": 12,
          "data": "d",
          "end": 12,
          "line": 1,
          "raw": "d",
          "start": 11,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a?[b..c] = d",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "a?[b..c] = d
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: splat-in-array 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "[a...]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 6,
        "line": 1,
        "members": Array [
          Spread {
            "column": 2,
            "end": 5,
            "expression": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a...",
            "start": 1,
            "type": "Spread",
          },
        ],
        "raw": "[a...]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "[a...]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: splat-in-array-with-other-members 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "[a, b..., c]",
    "start": 0,
    "statements": Array [
      ArrayInitialiser {
        "column": 1,
        "end": 12,
        "line": 1,
        "members": Array [
          Identifier {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Identifier",
          },
          Spread {
            "column": 5,
            "end": 8,
            "expression": Identifier {
              "column": 5,
              "data": "b",
              "end": 5,
              "line": 1,
              "raw": "b",
              "start": 4,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b...",
            "start": 4,
            "type": "Spread",
          },
          Identifier {
            "column": 11,
            "data": "c",
            "end": 11,
            "line": 1,
            "raw": "c",
            "start": 10,
            "type": "Identifier",
          },
        ],
        "raw": "[a, b..., c]",
        "start": 0,
        "type": "ArrayInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "[a, b..., c]",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: splat-in-function-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "a(b...)",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Spread {
            "column": 3,
            "end": 6,
            "expression": Identifier {
              "column": 3,
              "data": "b",
              "end": 3,
              "line": 1,
              "raw": "b",
              "start": 2,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "b...",
            "start": 2,
            "type": "Spread",
          },
        ],
        "column": 1,
        "end": 7,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a(b...)",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "a(b...)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: splat-in-function-call-with-other-args 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "a b, c..., d",
    "start": 0,
    "statements": Array [
      FunctionApplication {
        "arguments": Array [
          Identifier {
            "column": 3,
            "data": "b",
            "end": 3,
            "line": 1,
            "raw": "b",
            "start": 2,
            "type": "Identifier",
          },
          Spread {
            "column": 6,
            "end": 9,
            "expression": Identifier {
              "column": 6,
              "data": "c",
              "end": 6,
              "line": 1,
              "raw": "c",
              "start": 5,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "c...",
            "start": 5,
            "type": "Spread",
          },
          Identifier {
            "column": 12,
            "data": "d",
            "end": 12,
            "line": 1,
            "raw": "d",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "column": 1,
        "end": 12,
        "function": Identifier {
          "column": 1,
          "data": "a",
          "end": 1,
          "line": 1,
          "raw": "a",
          "start": 0,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "a b, c..., d",
        "start": 0,
        "type": "FunctionApplication",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "a b, c..., d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: splat-in-new-call 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 16,
    "inline": false,
    "line": 1,
    "raw": "new Foo(args...)",
    "start": 0,
    "statements": Array [
      NewOp {
        "arguments": Array [
          Spread {
            "column": 9,
            "end": 15,
            "expression": Identifier {
              "column": 9,
              "data": "args",
              "end": 12,
              "line": 1,
              "raw": "args",
              "start": 8,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "args...",
            "start": 8,
            "type": "Spread",
          },
        ],
        "column": 1,
        "ctor": Identifier {
          "column": 5,
          "data": "Foo",
          "end": 7,
          "line": 1,
          "raw": "Foo",
          "start": 4,
          "type": "Identifier",
        },
        "end": 16,
        "line": 1,
        "raw": "new Foo(args...)",
        "start": 0,
        "type": "NewOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "new Foo(args...)",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-ending-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "",
            "end": 6,
            "line": 1,
            "raw": "",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "\\"a#{b}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-interpolation-in-object-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "{a: \\"#{b}\\"}",
    "start": 0,
    "statements": Array [
      ObjectInitialiser {
        "column": 1,
        "end": 11,
        "line": 1,
        "members": Array [
          ObjectInitialiserMember {
            "column": 2,
            "end": 10,
            "expression": String {
              "column": 5,
              "end": 10,
              "expressions": Array [
                Identifier {
                  "column": 8,
                  "data": "b",
                  "end": 8,
                  "line": 1,
                  "raw": "b",
                  "start": 7,
                  "type": "Identifier",
                },
              ],
              "line": 1,
              "quasis": Array [
                Quasi {
                  "column": 6,
                  "data": "",
                  "end": 5,
                  "line": 1,
                  "raw": "",
                  "start": 5,
                  "type": "Quasi",
                },
                Quasi {
                  "column": 10,
                  "data": "",
                  "end": 9,
                  "line": 1,
                  "raw": "",
                  "start": 9,
                  "type": "Quasi",
                },
              ],
              "raw": "\\"#{b}\\"",
              "start": 4,
              "type": "String",
            },
            "isComputed": false,
            "key": Identifier {
              "column": 2,
              "data": "a",
              "end": 2,
              "line": 1,
              "raw": "a",
              "start": 1,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a: \\"#{b}\\"",
            "start": 1,
            "type": "ObjectInitialiserMember",
          },
        ],
        "raw": "{a: \\"#{b}\\"}",
        "start": 0,
        "type": "ObjectInitialiser",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "{a: \\"#{b}\\"}
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-interpolation-plus-normal-string 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\" + \\"b\\"",
    "start": 0,
    "statements": Array [
      PlusOp {
        "column": 1,
        "end": 12,
        "left": String {
          "column": 1,
          "end": 6,
          "expressions": Array [
            Identifier {
              "column": 4,
              "data": "a",
              "end": 4,
              "line": 1,
              "raw": "a",
              "start": 3,
              "type": "Identifier",
            },
          ],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 2,
              "data": "",
              "end": 1,
              "line": 1,
              "raw": "",
              "start": 1,
              "type": "Quasi",
            },
            Quasi {
              "column": 6,
              "data": "",
              "end": 5,
              "line": 1,
              "raw": "",
              "start": 5,
              "type": "Quasi",
            },
          ],
          "raw": "\\"#{a}\\"",
          "start": 0,
          "type": "String",
        },
        "line": 1,
        "raw": "\\"#{a}\\" + \\"b\\"",
        "right": String {
          "column": 10,
          "end": 12,
          "expressions": Array [],
          "line": 1,
          "quasis": Array [
            Quasi {
              "column": 11,
              "data": "b",
              "end": 11,
              "line": 1,
              "raw": "b",
              "start": 10,
              "type": "Quasi",
            },
          ],
          "raw": "\\"b\\"",
          "start": 9,
          "type": "String",
        },
        "start": 0,
        "type": "PlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"#{a}\\" + \\"b\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-interpolation-preceded-by-parenthesis 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"(#{a}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "a",
            "end": 5,
            "line": 1,
            "raw": "a",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "(",
            "end": 2,
            "line": 1,
            "raw": "(",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "",
            "end": 6,
            "line": 1,
            "raw": "",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"(#{a}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 67,
  "line": 1,
  "raw": "\\"(#{a}\\"  # https://github.com/decaffeinate/decaffeinate/issues/212
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-interpolation-with-escaped-newline 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\\\
#{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 12,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 3,
            "data": "b",
            "end": 10,
            "line": 2,
            "raw": "b",
            "start": 9,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 7,
            "line": 1,
            "raw": "\\\\
",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 11,
            "line": 2,
            "raw": "",
            "start": 11,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\\\
#{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "\\"#{a}\\\\
#{b}\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-interpolation-with-plus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a + b}c\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [
          PlusOp {
            "column": 4,
            "end": 8,
            "left": Identifier {
              "column": 4,
              "data": "a",
              "end": 4,
              "line": 1,
              "raw": "a",
              "start": 3,
              "type": "Identifier",
            },
            "line": 1,
            "raw": "a + b",
            "right": Identifier {
              "column": 8,
              "data": "b",
              "end": 8,
              "line": 1,
              "raw": "b",
              "start": 7,
              "type": "Identifier",
            },
            "start": 3,
            "type": "PlusOp",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 10,
            "data": "c",
            "end": 10,
            "line": 1,
            "raw": "c",
            "start": 9,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a + b}c\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "\\"#{a + b}c\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-starting-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}b\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 7,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "b",
            "end": 6,
            "line": 1,
            "raw": "b",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}b\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "\\"#{a}b\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-double-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"coffee me\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "coffee me",
            "end": 10,
            "line": 1,
            "raw": "coffee me",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "\\"coffee me\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "\\"coffee me\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "\\"a#{b}c\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 8,
        "expressions": Array [
          Identifier {
            "column": 5,
            "data": "b",
            "end": 5,
            "line": 1,
            "raw": "b",
            "start": 4,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "a",
            "end": 2,
            "line": 1,
            "raw": "a",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 7,
            "data": "c",
            "end": 7,
            "line": 1,
            "raw": "c",
            "start": 6,
            "type": "Quasi",
          },
        ],
        "raw": "\\"a#{b}c\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "\\"a#{b}c\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-interpolations-at-start-and-end 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a} #{b}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 11,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 9,
            "data": "b",
            "end": 9,
            "line": 1,
            "raw": "b",
            "start": 8,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": " ",
            "end": 6,
            "line": 1,
            "raw": " ",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 11,
            "data": "",
            "end": 10,
            "line": 1,
            "raw": "",
            "start": 10,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a} #{b}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "\\"#{a} #{b}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-noop-escape 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "'\\\\.'",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 4,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": ".",
            "end": 3,
            "line": 1,
            "raw": "\\\\.",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "'\\\\.'",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "'\\\\.'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-only-multiple-interpolations 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 14,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}#{b}#{c}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 14,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
          Identifier {
            "column": 8,
            "data": "b",
            "end": 8,
            "line": 1,
            "raw": "b",
            "start": 7,
            "type": "Identifier",
          },
          Identifier {
            "column": 12,
            "data": "c",
            "end": 12,
            "line": 1,
            "raw": "c",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 5,
            "line": 1,
            "raw": "",
            "start": 5,
            "type": "Quasi",
          },
          Quasi {
            "column": 10,
            "data": "",
            "end": 9,
            "line": 1,
            "raw": "",
            "start": 9,
            "type": "Quasi",
          },
          Quasi {
            "column": 14,
            "data": "",
            "end": 13,
            "line": 1,
            "raw": "",
            "start": 13,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}#{b}#{c}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\\"#{a}#{b}#{c}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-only-single-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 6,
    "inline": false,
    "line": 1,
    "raw": "\\"#{a}\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 6,
        "expressions": Array [
          Identifier {
            "column": 4,
            "data": "a",
            "end": 4,
            "line": 1,
            "raw": "a",
            "start": 3,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "",
            "end": 1,
            "line": 1,
            "raw": "",
            "start": 1,
            "type": "Quasi",
          },
          Quasi {
            "column": 6,
            "data": "",
            "end": 5,
            "line": 1,
            "raw": "",
            "start": 5,
            "type": "Quasi",
          },
        ],
        "raw": "\\"#{a}\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 6,
  "line": 1,
  "raw": "\\"#{a}\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-parentheses-inside 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "\\"( a\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 5,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "( a",
            "end": 4,
            "line": 1,
            "raw": "( a",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "\\"( a\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "\\"( a\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-single-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "'coffee script'",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 15,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 2,
            "data": "coffee script",
            "end": 14,
            "line": 1,
            "raw": "coffee script",
            "start": 1,
            "type": "Quasi",
          },
        ],
        "raw": "'coffee script'",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 15,
  "line": 1,
  "raw": "'coffee script'",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-triple-double-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 26,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "multi-line strings",
            "end": 23,
            "line": 1,
            "raw": "
multi-line strings
",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "\\"\\"\\"
multi-line strings
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-triple-quote-interpolation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 12,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 12,
        "expressions": Array [
          Identifier {
            "column": 3,
            "data": "a",
            "end": 7,
            "line": 2,
            "raw": "a",
            "start": 6,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "",
            "end": 4,
            "line": 1,
            "raw": "
",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 5,
            "data": "",
            "end": 9,
            "line": 2,
            "raw": "
",
            "start": 8,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 12,
  "line": 1,
  "raw": "\\"\\"\\"
#{a}
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-triple-quote-interpolation-containing-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 20,
    "inline": false,
    "line": 1,
    "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 20,
        "expressions": Array [
          Identifier {
            "column": 8,
            "data": "bar",
            "end": 14,
            "line": 2,
            "raw": "bar",
            "start": 11,
            "type": "Identifier",
          },
        ],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "bar=\\"",
            "end": 9,
            "line": 1,
            "raw": "
bar=\\"",
            "start": 3,
            "type": "Quasi",
          },
          Quasi {
            "column": 12,
            "data": "\\"",
            "end": 17,
            "line": 2,
            "raw": "\\"
",
            "start": 15,
            "type": "Quasi",
          },
        ],
        "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 20,
  "line": 1,
  "raw": "\\"\\"\\"
bar=\\"#{bar}\\"
\\"\\"\\"",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: string-with-triple-single-quotes 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "'''
multi-line strings
'''",
    "start": 0,
    "statements": Array [
      String {
        "column": 1,
        "end": 26,
        "expressions": Array [],
        "line": 1,
        "quasis": Array [
          Quasi {
            "column": 4,
            "data": "multi-line strings",
            "end": 23,
            "line": 1,
            "raw": "
multi-line strings
",
            "start": 3,
            "type": "Quasi",
          },
        ],
        "raw": "'''
multi-line strings
'''",
        "start": 0,
        "type": "String",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "'''
multi-line strings
'''",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: subtraction 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "3 - 4",
    "start": 0,
    "statements": Array [
      SubtractOp {
        "column": 1,
        "end": 5,
        "left": Int {
          "column": 1,
          "data": 3,
          "end": 1,
          "line": 1,
          "raw": "3",
          "start": 0,
          "type": "Int",
        },
        "line": 1,
        "raw": "3 - 4",
        "right": Int {
          "column": 5,
          "data": 4,
          "end": 5,
          "line": 1,
          "raw": "4",
          "start": 4,
          "type": "Int",
        },
        "start": 0,
        "type": "SubtractOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "3 - 4",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: super-index-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 28,
    "inline": false,
    "line": 1,
    "raw": "class A
  b: ->
    super[c]",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 28,
          "inline": false,
          "line": 2,
          "raw": "b: ->
    super[c]",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 28,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 28,
                  "inline": false,
                  "line": 3,
                  "raw": "super[c]",
                  "start": 20,
                  "statements": Array [
                    DynamicMemberAccessOp {
                      "column": 5,
                      "end": 28,
                      "expression": Super {
                        "column": 5,
                        "end": 25,
                        "line": 3,
                        "raw": "super",
                        "start": 20,
                        "type": "Super",
                      },
                      "indexingExpr": Identifier {
                        "column": 11,
                        "data": "c",
                        "end": 27,
                        "line": 3,
                        "raw": "c",
                        "start": 26,
                        "type": "Identifier",
                      },
                      "line": 3,
                      "raw": "super[c]",
                      "start": 20,
                      "type": "DynamicMemberAccessOp",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 28,
                "line": 2,
                "parameters": Array [],
                "raw": "->
    super[c]",
                "start": 13,
                "type": "Function",
              },
              "line": 2,
              "raw": "b: ->
    super[c]",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 28,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b: ->
    super[c]",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 29,
  "line": 1,
  "raw": "class A
  b: ->
    super[c]
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: super-property-access 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 27,
    "inline": false,
    "line": 1,
    "raw": "class A
  b: ->
    super.c",
    "start": 0,
    "statements": Array [
      Class {
        "body": Block {
          "column": 3,
          "end": 27,
          "inline": false,
          "line": 2,
          "raw": "b: ->
    super.c",
          "start": 10,
          "statements": Array [
            ClassProtoAssignOp {
              "assignee": Identifier {
                "column": 3,
                "data": "b",
                "end": 11,
                "line": 2,
                "raw": "b",
                "start": 10,
                "type": "Identifier",
              },
              "column": 3,
              "end": 27,
              "expression": Function {
                "body": Block {
                  "column": 5,
                  "end": 27,
                  "inline": false,
                  "line": 3,
                  "raw": "super.c",
                  "start": 20,
                  "statements": Array [
                    MemberAccessOp {
                      "column": 5,
                      "end": 27,
                      "expression": Super {
                        "column": 5,
                        "end": 25,
                        "line": 3,
                        "raw": "super",
                        "start": 20,
                        "type": "Super",
                      },
                      "line": 3,
                      "member": Identifier {
                        "column": 11,
                        "data": "c",
                        "end": 27,
                        "line": 3,
                        "raw": "c",
                        "start": 26,
                        "type": "Identifier",
                      },
                      "raw": "super.c",
                      "start": 20,
                      "type": "MemberAccessOp",
                    },
                  ],
                  "type": "Block",
                },
                "column": 6,
                "end": 27,
                "line": 2,
                "parameters": Array [],
                "raw": "->
    super.c",
                "start": 13,
                "type": "Function",
              },
              "line": 2,
              "raw": "b: ->
    super.c",
              "start": 10,
              "type": "ClassProtoAssignOp",
            },
          ],
          "type": "Block",
        },
        "boundMembers": Array [],
        "column": 1,
        "ctor": null,
        "end": 27,
        "line": 1,
        "name": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "nameAssignee": Identifier {
          "column": 7,
          "data": "A",
          "end": 7,
          "line": 1,
          "raw": "A",
          "start": 6,
          "type": "Identifier",
        },
        "parent": null,
        "raw": "class A
  b: ->
    super.c",
        "start": 0,
        "type": "Class",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 28,
  "line": 1,
  "raw": "class A
  b: ->
    super.c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: switch-with-alternate 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 37,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c

  else
    d",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": Block {
          "column": 5,
          "end": 37,
          "inline": false,
          "line": 6,
          "raw": "d",
          "start": 36,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "d",
              "end": 37,
              "line": 6,
              "raw": "d",
              "start": 36,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 37,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c

  else
    d",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 37,
  "line": 1,
  "raw": "switch a
  when b
    c

  else
    d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: switch-with-multiple-cases 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 38,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c
  when d
    e",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "d",
                "end": 32,
                "line": 4,
                "raw": "d",
                "start": 31,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 38,
              "inline": false,
              "line": 5,
              "raw": "e",
              "start": 37,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "e",
                  "end": 38,
                  "line": 5,
                  "raw": "e",
                  "start": 37,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 38,
            "line": 4,
            "raw": "when d
    e",
            "start": 26,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 38,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c
  when d
    e",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 39,
  "line": 1,
  "raw": "switch a
  when b
    c
  when d
    e
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: switch-with-multiple-conditions 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 26,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b, c
    d",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
              Identifier {
                "column": 11,
                "data": "c",
                "end": 20,
                "line": 2,
                "raw": "c",
                "start": 19,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 26,
              "inline": false,
              "line": 3,
              "raw": "d",
              "start": 25,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "d",
                  "end": 26,
                  "line": 3,
                  "raw": "d",
                  "start": 25,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 26,
            "line": 2,
            "raw": "when b, c
    d",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 26,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b, c
    d",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 26,
  "line": 1,
  "raw": "switch a
  when b, c
    d",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: switch-with-one-case 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 23,
    "inline": false,
    "line": 1,
    "raw": "switch a
  when b
    c",
    "start": 0,
    "statements": Array [
      Switch {
        "alternate": null,
        "cases": Array [
          SwitchCase {
            "column": 3,
            "conditions": Array [
              Identifier {
                "column": 8,
                "data": "b",
                "end": 17,
                "line": 2,
                "raw": "b",
                "start": 16,
                "type": "Identifier",
              },
            ],
            "consequent": Block {
              "column": 5,
              "end": 23,
              "inline": false,
              "line": 3,
              "raw": "c",
              "start": 22,
              "statements": Array [
                Identifier {
                  "column": 5,
                  "data": "c",
                  "end": 23,
                  "line": 3,
                  "raw": "c",
                  "start": 22,
                  "type": "Identifier",
                },
              ],
              "type": "Block",
            },
            "end": 23,
            "line": 2,
            "raw": "when b
    c",
            "start": 11,
            "type": "SwitchCase",
          },
        ],
        "column": 1,
        "end": 23,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "switch a
  when b
    c",
        "start": 0,
        "type": "Switch",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 24,
  "line": 1,
  "raw": "switch a
  when b
    c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: tagged-template-literal 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "s = f\\"a#{b}c\\"",
    "start": 0,
    "statements": Array [
      AssignOp {
        "assignee": Identifier {
          "column": 1,
          "data": "s",
          "end": 1,
          "line": 1,
          "raw": "s",
          "start": 0,
          "type": "Identifier",
        },
        "column": 1,
        "end": 13,
        "expression": TaggedTemplateLiteral {
          "column": 5,
          "end": 13,
          "line": 1,
          "raw": "f\\"a#{b}c\\"",
          "start": 4,
          "tag": Identifier {
            "column": 5,
            "data": "f",
            "end": 5,
            "line": 1,
            "raw": "f",
            "start": 4,
            "type": "Identifier",
          },
          "template": String {
            "column": 6,
            "end": 13,
            "expressions": Array [
              Identifier {
                "column": 10,
                "data": "b",
                "end": 10,
                "line": 1,
                "raw": "b",
                "start": 9,
                "type": "Identifier",
              },
            ],
            "line": 1,
            "quasis": Array [
              Quasi {
                "column": 7,
                "data": "a",
                "end": 7,
                "line": 1,
                "raw": "a",
                "start": 6,
                "type": "Quasi",
              },
              Quasi {
                "column": 12,
                "data": "c",
                "end": 12,
                "line": 1,
                "raw": "c",
                "start": 11,
                "type": "Quasi",
              },
            ],
            "raw": "\\"a#{b}c\\"",
            "start": 5,
            "type": "String",
          },
          "type": "TaggedTemplateLiteral",
        },
        "line": 1,
        "raw": "s = f\\"a#{b}c\\"",
        "start": 0,
        "type": "AssignOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "s = f\\"a#{b}c\\"
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: this-assign-with-keyword 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "(@case) ->",
    "start": 0,
    "statements": Array [
      Function {
        "body": null,
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [
          MemberAccessOp {
            "column": 2,
            "end": 6,
            "expression": This {
              "column": 2,
              "end": 2,
              "line": 1,
              "raw": "@",
              "start": 1,
              "type": "This",
            },
            "line": 1,
            "member": Identifier {
              "column": 3,
              "data": "case",
              "end": 6,
              "line": 1,
              "raw": "case",
              "start": 2,
              "type": "Identifier",
            },
            "raw": "@case",
            "start": 1,
            "type": "MemberAccessOp",
          },
        ],
        "raw": "(@case) ->",
        "start": 0,
        "type": "Function",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "(@case) ->
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: throw 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "throw 42",
    "start": 0,
    "statements": Array [
      Throw {
        "column": 1,
        "end": 8,
        "expression": Int {
          "column": 7,
          "data": 42,
          "end": 8,
          "line": 1,
          "raw": "42",
          "start": 6,
          "type": "Int",
        },
        "line": 1,
        "raw": "throw 42",
        "start": 0,
        "type": "Throw",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "throw 42",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: triple-backtick-inline-js 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "\`\`\`
a(b);
\`\`\`",
    "start": 0,
    "statements": Array [
      JavaScript {
        "column": 1,
        "data": "
a(b);
",
        "end": 13,
        "line": 1,
        "raw": "\`\`\`
a(b);
\`\`\`",
        "start": 0,
        "type": "JavaScript",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 14,
  "line": 1,
  "raw": "\`\`\`
a(b);
\`\`\`
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: true 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 4,
    "inline": false,
    "line": 1,
    "raw": "true",
    "start": 0,
    "statements": Array [
      Bool {
        "column": 1,
        "data": true,
        "end": 4,
        "line": 1,
        "raw": "true",
        "start": 0,
        "type": "Bool",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 4,
  "line": 1,
  "raw": "true",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-with-catch-and-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch
  b
finally
  c",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 4,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 29,
        "finallyBody": Block {
          "column": 3,
          "end": 29,
          "inline": false,
          "line": 6,
          "raw": "c",
          "start": 28,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 29,
              "line": 6,
              "raw": "c",
              "start": 28,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "line": 1,
        "raw": "try
  a
catch
  b
finally
  c",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "try
  a
catch
  b
finally
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-with-catch-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch err
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": Identifier {
          "column": 7,
          "data": "err",
          "end": 17,
          "line": 3,
          "raw": "err",
          "start": 14,
          "type": "Identifier",
        },
        "catchBody": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 21,
              "line": 4,
              "raw": "b",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 21,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a
catch err
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 21,
  "line": 1,
  "raw": "try
  a
catch err
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-with-catch-single-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 13,
    "inline": false,
    "line": 1,
    "raw": "try a catch b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 5,
          "end": 5,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 4,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": Identifier {
          "column": 13,
          "data": "b",
          "end": 13,
          "line": 1,
          "raw": "b",
          "start": 12,
          "type": "Identifier",
        },
        "catchBody": null,
        "column": 1,
        "end": 13,
        "finallyBody": null,
        "line": 1,
        "raw": "try a catch b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 13,
  "line": 1,
  "raw": "try a catch b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-with-catch-without-assignee 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "try
  a
catch
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 17,
              "line": 4,
              "raw": "b",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a
catch
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 17,
  "line": 1,
  "raw": "try
  a
catch
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-without-catch-or-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 7,
    "inline": false,
    "line": 1,
    "raw": "try
  a",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 7,
        "finallyBody": null,
        "line": 1,
        "raw": "try
  a",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 7,
  "line": 1,
  "raw": "try
  a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-without-catch-single-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 5,
    "inline": false,
    "line": 1,
    "raw": "try a",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 5,
          "end": 5,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 4,
          "statements": Array [
            Identifier {
              "column": 5,
              "data": "a",
              "end": 5,
              "line": 1,
              "raw": "a",
              "start": 4,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 5,
        "finallyBody": null,
        "line": 1,
        "raw": "try a",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 5,
  "line": 1,
  "raw": "try a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: try-without-catch-with-finally 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 19,
    "inline": false,
    "line": 1,
    "raw": "try
  a
finally
  b",
    "start": 0,
    "statements": Array [
      Try {
        "body": Block {
          "column": 3,
          "end": 7,
          "inline": false,
          "line": 2,
          "raw": "a",
          "start": 6,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "a",
              "end": 7,
              "line": 2,
              "raw": "a",
              "start": 6,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "catchAssignee": null,
        "catchBody": null,
        "column": 1,
        "end": 19,
        "finallyBody": Block {
          "column": 3,
          "end": 19,
          "inline": false,
          "line": 4,
          "raw": "b",
          "start": 18,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 19,
              "line": 4,
              "raw": "b",
              "start": 18,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "line": 1,
        "raw": "try
  a
finally
  b",
        "start": 0,
        "type": "Try",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 19,
  "line": 1,
  "raw": "try
  a
finally
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: typeof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 8,
    "inline": false,
    "line": 1,
    "raw": "typeof a",
    "start": 0,
    "statements": Array [
      TypeofOp {
        "column": 1,
        "end": 8,
        "expression": Identifier {
          "column": 8,
          "data": "a",
          "end": 8,
          "line": 1,
          "raw": "a",
          "start": 7,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "typeof a",
        "start": 0,
        "type": "TypeofOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 8,
  "line": 1,
  "raw": "typeof a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unary-bitwise-negation 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "~a",
    "start": 0,
    "statements": Array [
      BitNotOp {
        "column": 1,
        "end": 2,
        "expression": Identifier {
          "column": 2,
          "data": "a",
          "end": 2,
          "line": 1,
          "raw": "a",
          "start": 1,
          "type": "Identifier",
        },
        "line": 1,
        "raw": "~a",
        "start": 0,
        "type": "BitNotOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "~a",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unary-minus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "-1",
    "start": 0,
    "statements": Array [
      UnaryNegateOp {
        "column": 1,
        "end": 2,
        "expression": Int {
          "column": 2,
          "data": 1,
          "end": 2,
          "line": 1,
          "raw": "1",
          "start": 1,
          "type": "Int",
        },
        "line": 1,
        "raw": "-1",
        "start": 0,
        "type": "UnaryNegateOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "-1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unary-plus 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 2,
    "inline": false,
    "line": 1,
    "raw": "+1",
    "start": 0,
    "statements": Array [
      UnaryPlusOp {
        "column": 1,
        "end": 2,
        "expression": Int {
          "column": 2,
          "data": 1,
          "end": 2,
          "line": 1,
          "raw": "1",
          "start": 1,
          "type": "Int",
        },
        "line": 1,
        "raw": "+1",
        "start": 0,
        "type": "UnaryPlusOp",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 2,
  "line": 1,
  "raw": "+1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: undefined 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "undefined",
    "start": 0,
    "statements": Array [
      Undefined {
        "column": 1,
        "end": 9,
        "line": 1,
        "raw": "undefined",
        "start": 0,
        "type": "Undefined",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "undefined",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unless-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "unless a in b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 8,
          "end": 13,
          "isNot": false,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a in b",
          "right": Identifier {
            "column": 13,
            "data": "b",
            "end": 13,
            "line": 1,
            "raw": "b",
            "start": 12,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 17,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 16,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 17,
              "line": 2,
              "raw": "c",
              "start": 16,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 17,
        "isUnless": true,
        "line": 1,
        "raw": "unless a in b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "unless a in b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unless-not-in 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 21,
    "inline": false,
    "line": 1,
    "raw": "unless a not in b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InOp {
          "column": 8,
          "end": 17,
          "isNot": true,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not in b",
          "right": Identifier {
            "column": 17,
            "data": "b",
            "end": 17,
            "line": 1,
            "raw": "b",
            "start": 16,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 21,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 20,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 21,
              "line": 2,
              "raw": "c",
              "start": 20,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 21,
        "isUnless": true,
        "line": 1,
        "raw": "unless a not in b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 22,
  "line": 1,
  "raw": "unless a not in b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: unless-not-instanceof 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 29,
    "inline": false,
    "line": 1,
    "raw": "unless a not instanceof b
  c",
    "start": 0,
    "statements": Array [
      Conditional {
        "alternate": null,
        "column": 1,
        "condition": InstanceofOp {
          "column": 8,
          "end": 25,
          "isNot": true,
          "left": Identifier {
            "column": 8,
            "data": "a",
            "end": 8,
            "line": 1,
            "raw": "a",
            "start": 7,
            "type": "Identifier",
          },
          "line": 1,
          "raw": "a not instanceof b",
          "right": Identifier {
            "column": 25,
            "data": "b",
            "end": 25,
            "line": 1,
            "raw": "b",
            "start": 24,
            "type": "Identifier",
          },
          "start": 7,
          "type": "InstanceofOp",
        },
        "consequent": Block {
          "column": 3,
          "end": 29,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 28,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 29,
              "line": 2,
              "raw": "c",
              "start": 28,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "end": 29,
        "isUnless": true,
        "line": 1,
        "raw": "unless a not instanceof b
  c",
        "start": 0,
        "type": "Conditional",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 30,
  "line": 1,
  "raw": "unless a not instanceof b
  c
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: until 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "until a
  b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 11,
              "line": 2,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 11,
        "guard": null,
        "isUntil": true,
        "line": 1,
        "raw": "until a
  b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "until a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: while-on-multiple-lines 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 11,
    "inline": false,
    "line": 1,
    "raw": "while a
  b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 11,
          "inline": false,
          "line": 2,
          "raw": "b",
          "start": 10,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "b",
              "end": 11,
              "line": 2,
              "raw": "b",
              "start": 10,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 11,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "while a
  b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 11,
  "line": 1,
  "raw": "while a
  b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: while-on-one-line 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 9,
    "inline": false,
    "line": 1,
    "raw": "a while b",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 1,
          "end": 1,
          "inline": true,
          "line": 1,
          "raw": "a",
          "start": 0,
          "statements": Array [
            Identifier {
              "column": 1,
              "data": "a",
              "end": 1,
              "line": 1,
              "raw": "a",
              "start": 0,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 9,
          "data": "b",
          "end": 9,
          "line": 1,
          "raw": "b",
          "start": 8,
          "type": "Identifier",
        },
        "end": 9,
        "guard": null,
        "isUntil": false,
        "line": 1,
        "raw": "a while b",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 9,
  "line": 1,
  "raw": "a while b",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: while-with-guard 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "while a when b
  c",
    "start": 0,
    "statements": Array [
      While {
        "body": Block {
          "column": 3,
          "end": 18,
          "inline": false,
          "line": 2,
          "raw": "c",
          "start": 17,
          "statements": Array [
            Identifier {
              "column": 3,
              "data": "c",
              "end": 18,
              "line": 2,
              "raw": "c",
              "start": 17,
              "type": "Identifier",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "condition": Identifier {
          "column": 7,
          "data": "a",
          "end": 7,
          "line": 1,
          "raw": "a",
          "start": 6,
          "type": "Identifier",
        },
        "end": 18,
        "guard": Identifier {
          "column": 14,
          "data": "b",
          "end": 14,
          "line": 1,
          "raw": "b",
          "start": 13,
          "type": "Identifier",
        },
        "isUntil": false,
        "line": 1,
        "raw": "while a when b
  c",
        "start": 0,
        "type": "While",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "while a when b
  c",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: yield 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 10,
    "inline": false,
    "line": 1,
    "raw": "-> yield 1",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 10,
          "inline": true,
          "line": 1,
          "raw": "yield 1",
          "start": 3,
          "statements": Array [
            Yield {
              "column": 4,
              "end": 10,
              "expression": Int {
                "column": 10,
                "data": 1,
                "end": 10,
                "line": 1,
                "raw": "1",
                "start": 9,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield 1",
              "start": 3,
              "type": "Yield",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 10,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield 1",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 10,
  "line": 1,
  "raw": "-> yield 1",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: yield-from 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 18,
    "inline": false,
    "line": 1,
    "raw": "-> yield from fn()",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 18,
          "inline": true,
          "line": 1,
          "raw": "yield from fn()",
          "start": 3,
          "statements": Array [
            YieldFrom {
              "column": 4,
              "end": 18,
              "expression": FunctionApplication {
                "arguments": Array [],
                "column": 15,
                "end": 18,
                "function": Identifier {
                  "column": 15,
                  "data": "fn",
                  "end": 16,
                  "line": 1,
                  "raw": "fn",
                  "start": 14,
                  "type": "Identifier",
                },
                "line": 1,
                "raw": "fn()",
                "start": 14,
                "type": "FunctionApplication",
              },
              "line": 1,
              "raw": "yield from fn()",
              "start": 3,
              "type": "YieldFrom",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 18,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield from fn()",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "-> yield from fn()",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: yield-return 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 17,
    "inline": false,
    "line": 1,
    "raw": "-> yield return 3",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 17,
          "inline": true,
          "line": 1,
          "raw": "yield return 3",
          "start": 3,
          "statements": Array [
            YieldReturn {
              "column": 4,
              "end": 17,
              "expression": Int {
                "column": 17,
                "data": 3,
                "end": 17,
                "line": 1,
                "raw": "3",
                "start": 16,
                "type": "Int",
              },
              "line": 1,
              "raw": "yield return 3",
              "start": 3,
              "type": "YieldReturn",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 17,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield return 3",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 18,
  "line": 1,
  "raw": "-> yield return 3
",
  "start": 0,
  "type": "Program",
}
`;

exports[`CS2: yield-return-empty 1`] = `
Program {
  "body": Block {
    "column": 1,
    "end": 15,
    "inline": false,
    "line": 1,
    "raw": "-> yield return",
    "start": 0,
    "statements": Array [
      GeneratorFunction {
        "body": Block {
          "column": 4,
          "end": 15,
          "inline": true,
          "line": 1,
          "raw": "yield return",
          "start": 3,
          "statements": Array [
            YieldReturn {
              "column": 4,
              "end": 15,
              "expression": null,
              "line": 1,
              "raw": "yield return",
              "start": 3,
              "type": "YieldReturn",
            },
          ],
          "type": "Block",
        },
        "column": 1,
        "end": 15,
        "line": 1,
        "parameters": Array [],
        "raw": "-> yield return",
        "start": 0,
        "type": "GeneratorFunction",
      },
    ],
    "type": "Block",
  },
  "column": 1,
  "end": 16,
  "line": 1,
  "raw": "-> yield return
",
  "start": 0,
  "type": "Program",
}
`;
